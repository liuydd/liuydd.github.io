<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>信息壁垒</title>
      <link href="/2022/12/05/eecs/"/>
      <url>/2022/12/05/eecs/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="da1348fbe853634f4d22218000282b88909c6cd36e9210e7235d4e4f7482bae3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">上网冲浪时收集的信息，仅供自用，如有需要，可找我要本文密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> info </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息差, 逃离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录与赵导一次很有启发的谈话</title>
      <link href="/2022/11/20/zcx/"/>
      <url>/2022/11/20/zcx/</url>
      
        <content type="html"><![CDATA[<p><strong>P.S.全文写的较为仓促，可能等我什么时候有时间了会修改本文。</strong></p><h1 id="ReadMe"><a href="#ReadMe" class="headerlink" title="ReadMe"></a>ReadMe</h1><p>这次谈话的起因其实是入党谈话…</p><p>聊完后赵导顺便跟我聊了聊学习生活上的事情。</p><p>这是很普通的一天，但从这次谈话中我感受到了其中的汹涌澎湃，就像高三八省联考后与班主任的谈话一样。</p><p>我能重新找回自己的能量吗？应该是能的吧。</p><h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>一觉醒来，发生的事太多了，谈话的整体内容已经记的不太清晰了。</p><p>但只记得部分，也就够了。</p><div class="note info modern"><p>“人类既强大又虚弱，既卑琐又崇高，既能洞察入微又常常视而不见。”</p></div><h1 id="壹-·-关于奖学金"><a href="#壹-·-关于奖学金" class="headerlink" title="壹 · 关于奖学金"></a>壹 · 关于奖学金</h1><p>谈话中途，赵导透露了我奖学金的评比刚好卡在能得奖学金的下一位…</p><p>说实话，真的很心痛</p><p>回想当初先交高额奖学金的材料（需要审核后答辩），由于看的是必限任的成绩，所以我考虑了很久，决定放弃提交这个材料，事实证明这个决定是正确的，因为只要排在我前面的人交了材料，优先按成绩筛选，我肯定连答辩就进不了。</p><p>随后我将目光放在了综合奖学金上面，因为我自认为我大一一年除了成绩和科研科创比较薄弱外，其他方面综合来看应该还不错。</p><p>于是我认真准备了综奖的材料，希望得到这份奖学金cover我买相机的钱</p><p>……</p><p>结果也知道了，公示上面没有我，就像今年5月的那次公示一样，令人震惊、疑惑与茫然。</p><p>不同的是，这次我花了一天就调整过来了，尽管郁闷，但也无可奈何。</p><p>所以这次听到赵导的话，我的心情有点复杂，但毕竟这事已经过去了。</p><p><strong>“为何不放，早是过往云烟”</strong></p><p>之前我就写过，要去想想自己真正想要做什么，而不是去追求这些虚名。</p><p>但是现在离上次我勇敢踏出第一步已经过了差不多一个月了，我还丝毫没有什么进展</p><p>因为本身课业就很忙，无法all in</p><p>所以我又开始有点焦虑了</p><p>大一一事无成怎么办？</p><p>大二一事无成怎么办？</p><p>赵导说：科研科创这种东西最多起锦上添花的作用，但前提是你得有这个“锦”。</p><p>我也想保住我的gpa，但我觉得我真的学不会物理……</p><p>回想起学期初保3.7争3.8的目标，不由觉得有点荒谬。</p><p>说实话，我最终也不过是想有书读罢了，而且是我真的想去读的那种书。</p><h1 id="贰-·-关于性格"><a href="#贰-·-关于性格" class="headerlink" title="贰 · 关于性格"></a>贰 · 关于性格</h1><div class="note info modern"><p>我觉得你性格比较活泼开朗，不过我们班也没有那种性格特别内向的人。</p></div><p>这是唯一一句让我觉得赵导并没有把我完全看透的话。</p><p>似乎从来没有人用“活泼开朗”这个词来形容我，包括老妈，包括我自己。</p><p>我自己都觉得我的性格应该是极其内敛的。</p><p>宁可自己花大力气摸索，也不愿去求助别人。当然，已经特别熟悉的人除外。</p><p>可能赵导的意思是我擅于与人打交道吧，我觉得我是矛盾的，让我迈出与人打交道的第一步我会十分的痛苦，但后面就还好。</p><p>我会很害怕没人陪我一起，会不敢一个人去新的地方，尝试新的东西。</p><p>可倒也能接受同行者越来越少这个事实，偶尔也会鼓起勇气迈出舒适区。</p><p>我不认为这是“活泼开朗”，更愿意把它理解为“成熟”。</p><p>只是面具戴久了，偶尔也会觉得很累。</p><h1 id="叁-·-关于社工以及更多的"><a href="#叁-·-关于社工以及更多的" class="headerlink" title="叁 · 关于社工以及更多的"></a>叁 · 关于社工以及更多的</h1><div class="note info modern"><p>院系只是个跳板，你可以尝试去学校的社工组织去工作，见见好的社工和优秀的个人是什么样子的，不应该局限于院系社工组织当中。</p></div><p>我也觉得我加入的两个社工组织都不怎么样，下学期看能不能加入那种更有“活力”的组织。</p><p>我早就知道无论在哪个领域，总会有人比你做的更好，甚至是远超于你。</p><p>想开了就好，没必要硬去横向比较，学习他人的长处远比拿自己的短处与他人长处相比更有用。</p><p>其实我也很想尝试不同的事，比如答疑坊，比如科服等等，但我总担心自己能力不够，总想先提升自己到某个level再去寻找机会。</p><p>想来我应该把顺序搞反了，应该先大胆出击，如果能抓住机会，就在机会中磨练自己，如果能力不够被筛选上，就再努力，提升自己后继续出击。</p><p>逡巡不定，想的太多而做的太少，过于在意他人的看法，是永远无法实现梦想的。</p><h1 id="肆-·-关于尝试"><a href="#肆-·-关于尝试" class="headerlink" title="肆 · 关于尝试"></a>肆 · 关于尝试</h1><div class="note info modern"><p>在我心里，你就是那种碰到什么东西觉得够一够就能够着的话就会去尝试的人。</p></div><p>这句话几乎第一时间就击中了我，因为它实在是太准确了。</p><p>每次遇到一个机会，我会第一时间很激动，然后开始深思是否需要去抓住它，其次才是去行动。</p><p>但往往很多行动前，我都在纠结，没有想的很清楚，只是抱有一种“万一呢”的想法再加上一时的头脑发热，才会义无反顾。</p><p>在行动的过程中，我会变得在意这个结果，但更会庆幸自己作出了选择。</p><p>就像我以前写过的，只要是自己作出的决定，就不后悔。</p><p>人类伟大而渺小，然而我们不能因为梦想无法实现，就放弃梦想。</p><p>不管上帝怎么想。</p><h1 id="伍-·-关于失败"><a href="#伍-·-关于失败" class="headerlink" title="伍 · 关于失败"></a>伍 · 关于失败</h1><div class="note info modern"><p>我觉得你一直是一个很有自己想法的人，包括大一的时候你做出的尝试。你要相信自己，失败了又怎么样呢？也许你只看到自己的这些尝试都失败了怎样怎样，但我可以看到班里所有同学，他们也是交了一大堆材料，尝试思源计划失败了，尝试这些那些也失败了。大学本来就是一个可以随便尝试的地方，失败了没关系，我可以继续努力，我也可以换个地方尝试。</p></div><p>开学的时候，梅老师在开学典礼上讲了《失败在大学生活中的三种功能》，而直到现在，我决定我才对失败有了更深刻的认识。</p><p>学生思维，是过于关注结果。</p><p>但更正确也更难做到的，应该是更关注过程。</p><p>胜利可以掩盖很多问题，但失败不会，它会逼迫你认识自己的不足。</p><p>将尝试的过程与想得到的结果分开，生活会轻松很多。</p><p>没有人会喜欢失败，但我更喜欢放手一搏后能获得的成果，就是喜欢这种可能会满盘皆输的刺激感。</p><p>有好多我想做的事情，有好多我想尝试的领域。有没有时间是一个问题，但敢不敢迈出第一步，这才应该是最核心的问题。</p><p>贴一句我一直很喜欢的话：</p><blockquote><p>曾经的我想靠近月亮，后来失败了。</p><p>月亮依旧遥远，我却变成了见过光的人。</p></blockquote><p>我想，支持我一直向前的，是心里的那股内驱力吧。</p><h1 id="陆-·-关于评价"><a href="#陆-·-关于评价" class="headerlink" title="陆 · 关于评价"></a>陆 · 关于评价</h1><div class="note info modern"><p>雅迪我觉得你是那种适合全面发展的同学，我其实很希望你能来竞选班委。</p></div><p>也许在我历代班主任眼里，我更适合全面发展而不是从一钻研。</p><p>初中时失去参加海亮的夏令营的机会，被韩老师建议还是走高考而不是竞赛这条路，高中时失去参加清北暑校的机会……</p><p>包括高考完没出成绩前刘老师相信如果我都不能上清华我们班就没人能上也好</p><p>种种迹象，都表明我更适合全面发展</p><p>其实我也是这么认为的，我也更喜欢各方面都涉猎一点，因为兴趣广泛，好奇心强，所以什么都想试，什么都想学。</p><p><del>或许这就是导致我现在都不太明白我究竟喜欢什么的原因</del></p><p>去年初出茅庐，大胆竞选了党课小组长，可惜落败了。</p><p>今年已经没了那份兴致与冲劲，在清华被打磨的这一年，或许更确切地说，是今年的4月份到现在，在众多打击下我终于认识到了自己的平凡。</p><p>而明年，谁知道又会是什么光景呢？</p><p>突然发现了一个规律，我最具有勇气尝试的时候，是学期初的时候。对成绩的焦虑被假期给稀释，和朋友待在一起冲淡了心头的抑郁，所以更有勇气面对未知的挑战。</p><p>感觉zrjj说的没错，在清华生活真就像溺水一样，痛苦才是永恒的。</p><h1 id="柒-·-关于物理以及学习"><a href="#柒-·-关于物理以及学习" class="headerlink" title="柒 · 关于物理以及学习"></a>柒 · 关于物理以及学习</h1><div class="note info modern"><p>你要相信自己，你看你大一上学期的成绩那么好。可能现在物理对你来说遇到了点困难，可能你的物理基础不如你的数学基础，但我知道你对于哪门课应该花多少时间，取得一个什么样的成绩，心里肯定是有数的。我觉得物理相比于数学来说更注重对概念的理解，你理解清楚了，这道题就会写了。</p></div><p>我不知道我还能不能学会物理，不知道是我的原因还是老师讲的太快的原因还是清华教授的物理本身的原因。</p><p>但既然赵导这么相信我，试一试也无妨。</p><p>如果这是我大学学习的一道坎，我也认了。</p><p>又想起我高中刚学物理时物理也很烂，是直到高三才慢慢变好的，现在只不过是需要点时间。</p><p>可惜属于我的时间太少了，等我把作业写完，所剩的时间就寥寥无几了。</p><p>那就再试一回，如果这次仍然失败了，也不过是更加坚定了跑路的想法而已。</p><h1 id="末"><a href="#末" class="headerlink" title="末"></a>末</h1><div class="note info modern"><p>世上只有一种真正的英雄主义，那就是在认清生活的本质后依然热爱生活。</p><p>脚印会旧而梦还在走，太阳尚远但一定会有。</p><p>曾经的我想靠近月亮，后来失败了。月亮依旧遥远，我却变成了见过光的人。</p><p>人间的灯火，永远不会熄灭。</p><p>世态炎凉，仍乐此生。</p></div><p>和赵导谈话的这一天是极为平凡的一天，在这一天前我还在想能不能不开班会，因为想睡懒觉，还在因为写提案而不想和赵导谈话,,,,,,</p><p>可能很多年后再看，这仍然是很普通的一天，也可能我会一直记得这天，就像记得我生命中那么多个重要的时刻一样。</p><p>它们组成了我，也成就了我。</p><p>尽管某些时刻我真的很不想面对，但不可否认，它们使我更加地完整。</p>]]></content>
      
      
      <categories>
          
          <category> 过往云烟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> connection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some feelings for 《程序设计基础》</title>
      <link href="/2022/11/19/wyp/"/>
      <url>/2022/11/19/wyp/</url>
      
        <content type="html"><![CDATA[<h1 id="ReadMe"><a href="#ReadMe" class="headerlink" title="ReadMe"></a>ReadMe</h1><p>本文用来记录2022年秋季学期笔者从王瑀屏老师《程序设计基础》课堂上以及作业中获得的感悟。</p><p>平时作业见：to be continued（等我结课了我再把仓库放出来）</p><h1 id="一、位运算符"><a href="#一、位运算符" class="headerlink" title="一、位运算符"></a>一、位运算符</h1><p>1.将a左移b位：左移一位相当于乘2，故可由此计算2的n次方。</p><p>2.位与&amp;和位或|：将数字转化为二进制后在每一位上与or或，其他的位运算符同理。</p><p>3.进行复杂运算时记得把括号加全。</p><h1 id="二、一点点指针的知识"><a href="#二、一点点指针的知识" class="headerlink" title="二、一点点指针的知识"></a>二、一点点指针的知识</h1><p>是谁，直到现在都不太会用指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> n=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;n;</span><br><span class="line">*p=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>即p会输出n的地址，而*p会输出n的值</p><p> int *a为指针，而int &amp;a就是单纯地引用</p><h1 id="三、写作业时的感悟"><a href="#三、写作业时的感悟" class="headerlink" title="三、写作业时的感悟"></a>三、写作业时的感悟</h1><ul><li>string类的每一位为字符类型，比较大小可采用m[i]&gt;’9’;</li><li>若字符串里储存的是数字，则应该减去’0’而不是’a’。如m[i]&#x3D;m[i]+n[i]-‘0’;</li><li>判断时可以把情况少的放在前面，这样&amp;&amp;符号会自动把后面的砍掉</li><li>冒泡排序：遍历所有的数，每一轮遍历中都判断相邻两个数的顺序。故有两个循环，同时要注意第二个循环条件为j&lt;n-1。</li></ul><h1 id="四、筛法"><a href="#四、筛法" class="headerlink" title="四、筛法"></a>四、筛法</h1><p>筛法求1~100内的所有素数并输出</p><p>原来的思路：利用素数的定义，循环用每一个数去除以当前的数，即</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">100</span>;j++)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍微简化一点：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j =i+<span class="number">1</span>;j&lt;=<span class="built_in">sqrt</span>(<span class="number">100</span>);j++)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质还是列出每一个数，然后用数挨个来作除法</p><p>而筛法： $O(nlog(n))$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">bool</span> isPrime[<span class="number">110</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">110</span>;i++)</span><br><span class="line">        isPrime[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime[i])&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i*i;j&lt;=<span class="number">100</span>;j+=i)&#123;</span><br><span class="line">                isPrime[j]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isPrime[i])</span><br><span class="line">            cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路是在这100个数中逐一筛掉2的倍数、3的倍数……</p><div class="note info modern"><p>精髓在于利用数组（筛子），仅对需要处理的数进行枚举遍历，而非遍历每个数后再进行判断。</p><p>例：对1~100的每一个数求欧拉函数$\phi(n)&#x3D;n\prod_{n|p}(a-\frac{1}{p})$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//to be continued...</span></span><br></pre></td></tr></table></figure></div><h1 id="五、查找"><a href="#五、查找" class="headerlink" title="五、查找"></a>五、查找</h1><h3 id="1-线性查找"><a href="#1-线性查找" class="headerlink" title="1.线性查找"></a>1.线性查找</h3><p>即循环遍历</p><h3 id="2-折半查找-O-log-2-n"><a href="#2-折半查找-O-log-2-n" class="headerlink" title="2.折半查找 $O(log_2 n)$"></a>2.折半查找 $O(log_2 n)$</h3><p>需要先对数组中的元素进行排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> id=<span class="number">-1</span>,low=<span class="number">0</span>,high=<span class="number">9</span>;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        <span class="type">int</span> middle=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==cards[middle])</span><br><span class="line">            id=middle;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;cards[middle])</span><br><span class="line">            low=middle+<span class="number">1</span>;<span class="comment">//通过改这里的和下面的可以将每次的范围控制为前闭后开或前开后闭等等</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            high=middle<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-索引查找"><a href="#3-索引查找" class="headerlink" title="3.索引查找"></a>3.索引查找</h3><p>关键词作为数组下标，直接找到目标。</p><p>但是需要关键字是比较小的数</p><p>so…</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Package pkgs[<span class="number">5</span>];</span><br><span class="line">Package * shelf[<span class="number">10</span>][<span class="number">30</span>];</span><br><span class="line">shelf[<span class="number">1</span>][<span class="number">13</span>]=&amp;pkgs[<span class="number">0</span>]; <span class="comment">//这里还是要用*和&amp;，否则只是传值不传参</span></span><br></pre></td></tr></table></figure><h3 id="4-散列查找（哈希查找）"><a href="#4-散列查找（哈希查找）" class="headerlink" title="4.散列查找（哈希查找）"></a>4.散列查找（哈希查找）</h3><p>通过散列函数，将关键字映射为较小的整数，再将这一整数作为数组下标，完成查找。</p><p>最简单的散列函数：key%p，p为质数</p><h1 id="六、排序"><a href="#六、排序" class="headerlink" title="六、排序"></a>六、排序</h1><h3 id="1-选择排序-O-n-2"><a href="#1-选择排序-O-n-2" class="headerlink" title="1.选择排序 $O(n^2)$"></a>1.选择排序 $O(n^2)$</h3><p>每次选择剩余元素中最大的放在后面</p><p>思路：从后往前枚举每个位置i，找到位置i之前的最大的数，将最大的数交换到位置i处</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="type">int</span> max=cards[<span class="number">0</span>],maxid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cards[j]&gt;max)&#123;</span><br><span class="line">            max=cards[j];</span><br><span class="line">            maxid=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cards[maxid]=cards[i];</span><br><span class="line">    cards[i]=max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-冒泡排序-O-n-2"><a href="#2-冒泡排序-O-n-2" class="headerlink" title="2.冒泡排序 $O(n^2)$"></a>2.冒泡排序 $O(n^2)$</h3><p>比较相邻的元素，如果顺序不正确就进行交换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">//一个向前，一个向后</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cards[j]&gt;cards[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="type">int</span> tmp=cards[j];</span><br><span class="line">            cards[j]=cards[j+<span class="number">1</span>];</span><br><span class="line">            cards[j+<span class="number">1</span>]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、数组、指针、结构体"><a href="#七、数组、指针、结构体" class="headerlink" title="七、数组、指针、结构体"></a>七、数组、指针、结构体</h1><p>1.数组的动态分配：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a=<span class="keyword">new</span> <span class="type">int</span>[n];</span><br><span class="line"><span class="keyword">delete</span>[] a;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态分配二维数组，需要分成两步进行，如</span></span><br><span class="line"><span class="type">char</span> **a=<span class="keyword">new</span> <span class="type">char</span> *[<span class="number">10</span>];</span><br><span class="line">a[i]=<span class="keyword">new</span> <span class="type">char</span>[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">delete</span>[] a;</span><br><span class="line"><span class="comment">//或者在理解了内存形式的基础上写成：</span></span><br><span class="line"><span class="type">char</span> *a=<span class="keyword">new</span> <span class="type">char</span>[<span class="number">200</span>];</span><br></pre></td></tr></table></figure><p>运用于函数的声明中：</p><p>void BubbleSort(int a[],int n);</p><p>void BubbleSort(int *a,int n);</p><p>2.结构体与指针</p><p>当一个指针指向结构体时，称其为结构体指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Package *<span class="title">linear_search</span><span class="params">(Package p[],<span class="type">int</span> n,<span class="type">char</span> *tgt)</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> &amp;p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Package *p=<span class="built_in">linear_search</span>(pkgs,<span class="number">5</span>,<span class="string">&quot;Wang&quot;</span>);</span><br><span class="line">    cout&lt;&lt;(*p).payment&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    cout&lt;&lt;p-&gt;payment&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.结构变量的赋值</p><p>结构变量的赋值相当于内存拷贝，当结构中包含指针，给结构变量赋值可能不会达到预期的效果（此时拷贝过来的结构体中的指针和原结构体中的指针指向同一块地址）</p><p>结构变量作为函数参数：传值不传参，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">adate</span>&#123;</span><br><span class="line">  <span class="type">int</span> year;</span><br><span class="line">  <span class="type">int</span> month;</span><br><span class="line">  <span class="type">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_today</span><span class="params">(adate today)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_today</span>(today);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>即进入从main函数进入新函数后，新函数会再在内存中创造一个和传进来的结构体一模一样的结构体（地址不同），新函数会在新产生的结构体基础之上对其进行操作，而不会改变原结构体。</strong></p><p>故应运用结构体指针，改为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_today</span><span class="params">(adate *today)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_today</span>(&amp;today);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，写个结构体交换的函数的声明也应该“带星”，运用此函数时也一定要有“&amp;”</p><p>不过我觉得，如果是在main函数中，直接拷贝交换应该也可以。</p><h1 id="八、常见数据结构（扩展）"><a href="#八、常见数据结构（扩展）" class="headerlink" title="八、常见数据结构（扩展）"></a>八、常见数据结构（扩展）</h1><p>队列：先进先出</p><p>栈：先进后出</p><p>链表：一种基于结构的数据结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">linked_node</span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  linked_node *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用链表实现栈：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">linked_node</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    linked_node * next;</span><br><span class="line">&#125;;</span><br><span class="line">linked_node *head=<span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">stack_in</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    linked_node *p=<span class="keyword">new</span> linked_node;</span><br><span class="line">    p-&gt;n=x;</span><br><span class="line">    p-&gt;next=head;</span><br><span class="line">    head=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">stack_out</span><span class="params">(<span class="type">int</span> *px)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    *px=head-&gt;n;</span><br><span class="line">    linked_node *p=head;</span><br><span class="line">    head=head-&gt;next; <span class="comment">//这里是迭代</span></span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、递归改进（存储增强）"><a href="#九、递归改进（存储增强）" class="headerlink" title="九、递归改进（存储增强）"></a>九、递归改进（存储增强）</h1><p>本质是<strong>使用一个数组把已经算了的值储存起来，避免需要调用时重新计算</strong>。</p><p>如改进递归算斐波那契数列算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fib_result[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">    fib_result[i]=<span class="number">-1</span>; <span class="comment">//初始值设为-1，表示还没有计算</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib_improved</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>||n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(fib_result[n]&gt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> fib_result[n];</span><br><span class="line">    fib_result[n]=<span class="built_in">fib_improved</span>(n<span class="number">-1</span>)+<span class="built_in">fib_improved</span>(n<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">return</span> fib_result[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs, base, c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs106l：破晓</title>
      <link href="/2022/09/23/cs106l/"/>
      <url>/2022/09/23/cs106l/</url>
      
        <content type="html"><![CDATA[<h1 id="ReadMe"><a href="#ReadMe" class="headerlink" title="ReadMe"></a>ReadMe</h1><p>看这学期能不能挤时间学一门新的课程，把我的C++的coding水平提一提，为以后上数据结构做准备。</p><blockquote><p>我从大一开始一直都是写的 C++ 代码，直到学完这门课我才意识到，我写的 C++ 代码大概只是 C 语言 + <code>cin</code>&#x2F;<code>cout</code> 而已。</p><p>这门课会深入到很多标准 C++ 的特性和语法，让你编写出高质量的 C++ 代码。例如 auto binding, uniform initialization, lambda function, move semantics，RAII 等技巧都在我此后的代码生涯中被反复用到，非常实用。</p><p>值得一提的是，这门课的作业里你会实现一个 HashMap（类似于 STL 中的 <code>unordered_map</code>), 这个作业几乎把整个课程串联了起来，非常考验代码能力。特别是 <code>iterator</code> 的实现，做完这个作业我开始理解为什么 Linus 对 C&#x2F;C++ 嗤之以鼻了，因为真的很难写对。</p><p>总的来讲这门课并不难，但是信息量很大，需要你在之后的开发实践中反复巩固。Stanford 之所以单开一门 C++ 的编程课，是因为它后续的很多 CS 课程 Project 都是基于 C++的。例如 CS144 计算机网络和 CS143 编译器。这两门课在本书中均有收录。</p></blockquote><p>就选这门cs106l了。<del>如果这学期鸽掉，那就寒假再学吧。</del></p><p>课程网址：<a href="http://web.stanford.edu/class/cs106l/">CS 106L: Standard C++ Programming (stanford.edu)</a></p><p>版本：2022spring</p><p>Exercises and assignments：</p><h1 id="Types-and-Structs"><a href="#Types-and-Structs" class="headerlink" title="Types and Structs"></a>Types and Structs</h1><blockquote><p>We won’t use “using namespace std” most of the time. It’s not good style!</p></blockquote><h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>即int, char, float, double等</p><p>C++是一种静态语言（statically typed language）</p><blockquote><p>statically typed：everything with a name is given a type <strong>before runtime</strong>.</p></blockquote><p>type1 function_name(type 2 variable);</p><p>​type2—&gt;type1</p><p>If we want two versions of a function for two different types, we can use polymorphism（多态）.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">half</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x/<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> <span class="built_in">half</span>(<span class="type">double</span> x)&#123;</span><br><span class="line">    <span class="keyword">return</span> x/<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h2><p>struct: a group of names variables each with their own type. A way to bundle different types together.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">string name; <span class="comment">//these are called firlds</span></span><br><span class="line">    string state;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To initial a struct:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Student s;</span><br><span class="line">s.name=<span class="string">&quot;Frankie&quot;</span>;</span><br><span class="line">s.state=<span class="string">&quot;MN&quot;</span>;</span><br><span class="line">s.age=<span class="number">21</span>;</span><br><span class="line"><span class="comment">//is the same as...</span></span><br><span class="line">Student s=&#123;<span class="string">&quot;Frankie&quot;</span>,<span class="string">&#x27;MN&#x27;</span>,<span class="number">21</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h2><blockquote><p>std::pair   An STL built-in <strong>struct</strong> with two fields of any type.</p></blockquote><p>A template: You specify the types of the fields inside &lt;&gt; for each pair object you make.</p><p>The fields in  std::pairs are named <strong>first</strong> and <strong>second</strong>.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;<span class="type">int</span>,string&gt; numSuffix=&#123;<span class="number">1</span>,<span class="string">&quot;st&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//or you can write the code like in another way:</span></span><br><span class="line"><span class="comment">//struct Pair&#123;</span></span><br><span class="line"><span class="comment">//fill_in_type first;</span></span><br><span class="line"><span class="comment">//fill_in_type second;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line">cout&lt;&lt;numSuffix.first&lt;&lt;numSuffix.second;</span><br><span class="line"><span class="comment">//prints 1st</span></span><br></pre></td></tr></table></figure><p>You can also use <strong>std::pair</strong> to write a function. For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;<span class="type">bool</span>, Student&gt;<span class="built_in">lookupStudent</span>(string name)&#123;</span><br><span class="line">Student blank;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">found</span>(name))</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_pair</span>(<span class="literal">false</span>,blank);</span><br><span class="line">Student result =<span class="built_in">getStudentWithName</span>(name);</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">make_pair</span>(<span class="literal">true</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//to use the function</span></span><br><span class="line">std::pair&lt;<span class="type">bool</span>,Student&gt;output=<span class="built_in">lookupStudent</span>(<span class="string">&quot;Keith&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="Type-Deduction（类型推断）-with-auto"><a href="#Type-Deduction（类型推断）-with-auto" class="headerlink" title="Type Deduction（类型推断） with auto"></a>Type Deduction（类型推断） with auto</h2><blockquote><p>auto：Keyword used in lieu of type when declaring a variable（当申明一个变量时用来代替类型的关键词）, tells the compiler to deducethe type.</p></blockquote><p><strong>auto</strong> does not mean that the variable doesn’t have a type. It means that the type is <strong>deduced</strong> by the compiler.</p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">auto</span> b=<span class="number">4.3</span>;</span><br><span class="line"><span class="keyword">auto</span> e=std::<span class="built_in">make_pair</span>(<span class="number">3</span>,<span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2022/09/23/cs106l/a1.jpg"></p><h1 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a>Streams</h1><p>Pay attention! Here thinks out the streams, so the single cin or cout is out of  our discussion.</p><blockquote><p>stream：an abstraction for input&#x2F;output. Streams convert between data and the string representation of data.</p></blockquote><p><strong>std::cout</strong> is an output stream. It has type <strong>std::ostream</strong></p><ul><li><p><strong>output streams：</strong></p><ul><li>have type <strong>std::ostream</strong></li><li>can only send data using the &lt;&lt; operator.（converts any type into string and sends it to the stream.）</li></ul></li><li><p><strong>output file streams：</strong></p><ul><li>have type <strong>std::ofstream</strong></li></ul></li><li><p>can only send data using the &lt;&lt; operator.（converts data of any type into string and sends it to the file stream.）</p><ul><li>must initialize your own ofstream object linked to your file.</li></ul></li><li><p>std::ofstream out(“out.txt”);<br>  out&lt;&lt;5&lt;&lt;std::endl;</p></li></ul><h2 id="Input-streams"><a href="#Input-streams" class="headerlink" title="Input streams"></a>Input streams</h2><h3 id="Input-Streams"><a href="#Input-Streams" class="headerlink" title="Input Streams:"></a>Input Streams:</h3><ul><li>have type <strong>std::istream</strong></li><li>can only reveive strings using the &gt;&gt; operator</li><li>receives a string from the stream and converts it to data</li></ul><blockquote><p>each &gt;&gt; ONLY reads util the next <em>whitespace</em></p><p>-whitespace&#x3D;tab, space, newline</p><p>whilespace is eaten: it won’t show up in output.</p></blockquote><p>Reading using &gt;&gt; extracts a single “word” or type including for strings.</p><p>To read a whole line, use <strong>std::getline(istream&amp;stream, string&amp;line);</strong></p><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::string line;</span><br><span class="line">std::<span class="built_in">getline</span>(cin,line);</span><br></pre></td></tr></table></figure><div class="note info modern"><p><strong>Don’t mix &gt;&gt; with getline!</strong></p><ul><li>&gt;&gt; reads up to the next whitespace character and does not go past that whitespace character</li><li>getline reads up to the next delimiter (by default, ‘\n’), and does go past that delimiter.</li></ul></div><h3 id="Input-File-Streams"><a href="#Input-File-Streams" class="headerlink" title="Input File Streams"></a>Input File Streams</h3><ul><li>have type std::ifstream</li><li>only receives strings using the &gt;&gt; operator</li><li>receives strings from a file and converts it to data of any type</li></ul><h2 id="Stringstreams"><a href="#Stringstreams" class="headerlink" title="Stringstreams"></a>Stringstreams</h2><ul><li>Input stream: std::istringstream<ul><li>Give any data type to the istringstream, it’ll store it as a string!</li></ul></li><li>Output stream: std::ostringstream<ul><li>Make an ostringstream out of a string, read from it word&#x2F;type by word&#x2F;type!</li></ul></li></ul><p><strong>The same as the other i&#x2F;ostreams you’ve seen!</strong></p><p><img src="/2022/09/23/cs106l/a2.jpg"></p><h1 id="Initialization-and-References"><a href="#Initialization-and-References" class="headerlink" title="Initialization and References"></a>Initialization and References</h1><h2 id="InitializationHow-we-provide-initial-values-to-variables"><a href="#InitializationHow-we-provide-initial-values-to-variables" class="headerlink" title="InitializationHow we provide initial values to variables."></a><strong>Initialization</strong>How we provide initial values to variables.</h2><p>two ways to intial a struct：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> Student s;</span><br><span class="line"> s.name = <span class="string">&quot;Frankie&quot;</span>; </span><br><span class="line"> s.state = <span class="string">&quot;MN&quot;</span>;</span><br><span class="line"> s.age = <span class="number">21</span>; </span><br><span class="line"> <span class="comment">//is the same as ...</span></span><br><span class="line">Student s = &#123;<span class="string">&quot;Frankie&quot;</span>, <span class="string">&quot;MN&quot;</span>, <span class="number">21</span>&#125;;</span><br></pre></td></tr></table></figure><p>multiple ways to initial a pair：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix1 = &#123;<span class="number">1</span>,<span class="string">&quot;st&quot;</span>&#125;;</span><br><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix2;</span><br><span class="line">numSuffix2.first = <span class="number">2</span>;</span><br><span class="line">numSuffix2.second = <span class="string">&quot;nd&quot;</span>;</span><br><span class="line">std::pair&lt;<span class="type">int</span>, string&gt; numSuffix2 = std::<span class="built_in">make_pair</span>(<span class="number">3</span>, <span class="string">&quot;rd&quot;</span>);</span><br></pre></td></tr></table></figure><p>initialization of vectors：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">vec1</span><span class="params">(<span class="number">3</span>,<span class="number">5</span>)</span></span>; </span><br><span class="line"><span class="comment">// makes &#123;5, 5, 5&#125;, not &#123;3, 5&#125;!</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; vec2;</span><br><span class="line">vec2 = &#123;<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// initialize vec2 to &#123;3, 5&#125; after its declared</span></span><br></pre></td></tr></table></figure><p><strong>Uniform initialization：</strong>curly bracket initialization（花括号）.Available for all types, immediate initialization on declaration.</p><p>$$less common&#x2F;nice for primitive types, but possible.</p><p><strong>P.S.</strong> about vector initialization</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">vec1</span><span class="params">(<span class="number">3</span>,<span class="number">5</span>)</span>;</span><br><span class="line"><span class="comment">//makes &#123;5,5,5&#125;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; vec2&#123;<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//makes &#123;3,5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="using-auto-to-reduce-long-type-names"><a href="#using-auto-to-reduce-long-type-names" class="headerlink" title="using auto to reduce long type names"></a>using auto to reduce long type names</h2><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::pair&lt;<span class="type">bool</span>, std::pair&lt;<span class="type">double</span>,<span class="type">double</span>&gt;&gt;result=<span class="built_in">quadratic</span>(a,b,c);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">quadratic</span><span class="params">(a,b,c)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><strong>Reference：</strong>An alias (another name) for a names variable.</p><p>reference vs copy：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeX</span><span class="params">(<span class="type">int</span>&amp; x)</span></span>&#123; <span class="comment">//changes to x will persist</span></span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">keepX</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">changeX</span>(a); <span class="comment">//a becomes a reference to x</span></span><br><span class="line"><span class="built_in">keepX</span>(b); <span class="comment">//b becomes a copy of x</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">//0</span></span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl; <span class="comment">//100</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; original&#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; copy = original;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;&amp; ref = original;</span><br></pre></td></tr></table></figure><p>“&#x3D;” automatically makes a copy! Must use &amp; to avoid this.</p><p><strong>const and const references</strong></p><p>const indicates a variable can’t be modified!</p><p>can’t declare non-const reference to const variable! For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; bad_ref=c_rec;</span><br><span class="line"><span class="comment">//fixed</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; bad_ref=c_vec;</span><br></pre></td></tr></table></figure><blockquote><p>use references to have multiple aliases to the same thing</p><p>use const references to avoid making copies whenever possible</p></blockquote><h1 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h1><p><strong>Standard Template Library（STL）</strong> contains：</p><p>containers，iterators，functions，algorithms.</p><p><strong>How to use STL?</strong></p><p>two steps:</p><ol><li>Import the relevant STL feature</li><li>Use it with “std::<STL feature name here>“”</STL></li></ol><p>For example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/09/23/cs106l/a3.jpg"></p><h2 id="Sequence-Containers"><a href="#Sequence-Containers" class="headerlink" title="Sequence Containers"></a>Sequence Containers</h2><h3 id="Simple"><a href="#Simple" class="headerlink" title="Simple"></a>Simple</h3><ul><li><p>&lt;&gt;vector  (adding + removing elements at end)</p></li><li><p>⇅ deque  (adding + removing elements anywhere but end)：</p><ul><li>先把现有的填满，超出的可以向前向后延申。</li></ul></li><li><p>↓ list  (adding + removing elements anywhere, but no random access)</p></li><li><p>() tuple  (different data types, but immutable)</p></li></ul><p><img src="/2022/09/23/cs106l/a4.jpg"></p><p><img src="/2022/09/23/cs106l/a5.jpg"></p><ul><li><strong>size</strong>：number of elements in a vector</li><li><strong>capacity：</strong>amount of space saved for a vector（开的空间大小）</li></ul><p><strong>summary</strong>：</p><p><img src="/2022/09/23/cs106l/a6.jpg"></p><ul><li>std::vector: use for almost everything</li><li>std::deque: use if you are frequently inserting&#x2F;removing at front</li><li>std::list: use very rarely, and only if you need to split&#x2F;join multiple lists</li></ul><h3 id="container-adaptors"><a href="#container-adaptors" class="headerlink" title="container adaptors"></a>container adaptors</h3><ul><li>stack（栈）：adding&#x2F;removing elements from the front<ul><li>LIFO(last-in, first-out)</li></ul></li><li>queue：adding elements from the front, removing from the back<ul><li>FIFO(first-in, first-out)</li></ul></li><li>priority_queue：adding elements with a priority, always removing the highest priority-element</li></ul><p>Container adaptors are wrappers in C++. </p><p>It provides a different interface（接口） for sequence containers. We can choose what the underlying container is. For instance, let’s choose a deque as our underlying container, and let’s implement a queue.</p><p><img src="/2022/09/23/cs106l/a7.jpg"></p><p><strong>Concrete examples with std::queue</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::queue&lt;<span class="type">int</span>&gt;stack_deque;            <span class="comment">//Container=std::deque</span></span><br><span class="line">std::queue&lt;<span class="type">int</span>,std::list&lt;<span class="type">int</span>&gt;&gt;stack_list;  <span class="comment">//Container=std::list</span></span><br></pre></td></tr></table></figure><p><img src="/2022/09/23/cs106l/a8.jpg"></p><h2 id="Associative-Containers"><a href="#Associative-Containers" class="headerlink" title="Associative Containers"></a>Associative Containers</h2><h3 id="Ordered"><a href="#Ordered" class="headerlink" title="Ordered"></a>Ordered</h3><ul><li>{} set  (unique elements)</li><li>{:} map  (key value pairs)</li></ul><p><img src="/2022/09/23/cs106l/a9.jpg"></p><p><img src="/2022/09/23/cs106l/a10.jpg"></p><p>Every <strong>std::map&lt;K,V&gt;</strong> is actually backed by: <strong>std::pair&lt;const K, V&gt;</strong></p><p>hint: std::pair’s are just two-element tuples!</p><h3 id="Unordered"><a href="#Unordered" class="headerlink" title="Unordered"></a>Unordered</h3><ul><li>{} unordered_set</li><li>{:} unordered_map</li></ul><p>if using simple data types&#x2F;you’re familiar with hash functions, use unordered associative containers.</p><p><strong>the difference from the unordered and the ordered</strong>：</p><p>Each STL set&#x2F;map comes with an unordered sibling. They’re almost the same, except：</p><ul><li>Instead of a comparison operator, the set&#x2F;map type must have a <strong>hash function</strong> defined for it.</li><li>unordered_map&#x2F;unordered_set are generally faster than map&#x2F;set.</li></ul><h1 id="Iterators-and-Pointers"><a href="#Iterators-and-Pointers" class="headerlink" title="Iterators and Pointers"></a>Iterators and Pointers</h1><h2 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h2><p>Iterations allow iterating over any container** whether ordered, unordered, sequence, or associative!</p><p>An iterator is like a “claw”, it has an “ordering” over elements.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::set&lt;type&gt; s=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">std::set::iterator iter =s.<span class="built_in">begin</span>();  <span class="comment">//at 0</span></span><br><span class="line">++iter;  <span class="comment">//at 1</span></span><br><span class="line">*iter;  <span class="comment">//to access the element pointed at by the iterator(dereference)</span></span><br><span class="line">(iter != s.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">auto</span> second_iter=iter;  <span class="comment">//&quot;copy construction&quot;</span></span><br></pre></td></tr></table></figure><p>There are a few different types of iterators, since containers are different.</p><ul><li>input iterators can be on the RHS (right hand side) of an &#x3D;sign:<ul><li>auto elem &#x3D;*it;</li></ul></li><li>output iterators can be on the LHS of &#x3D;:<ul><li>*elem &#x3D; value;</li></ul></li></ul><table><thead><tr><th>Container</th><th>Type of iterator</th></tr></thead><tbody><tr><td>Vector</td><td>Random-Access</td></tr><tr><td>Deque</td><td>Random-Access</td></tr><tr><td>List</td><td>Bidirectional</td></tr><tr><td>Map</td><td>Bidirectional</td></tr><tr><td>Set</td><td>Bidirectional</td></tr><tr><td>Stack</td><td>No iterator</td></tr><tr><td>Queue</td><td>No iterator</td></tr><tr><td>Priority Queue</td><td>No iterator</td></tr></tbody></table><p>P.S. Random access iterators <strong>support indexing</strong> by integers!</p><p>These are equivalent :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> key = (* iter).first;</span><br><span class="line"><span class="keyword">auto</span> key =iter-&gt;first;</span><br></pre></td></tr></table></figure><h2 id="Pointers（指针）"><a href="#Pointers（指针）" class="headerlink" title="Pointers（指针）"></a>Pointers（指针）</h2><p>Pointers are objects that store an <strong>address and type</strong> of a variable.</p><p>Iterators are a form of pointers. </p><p>Pointers are more generic iterators. (can point to any object, not just elements in a container)</p><h1 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h1><h1 id="Template-Classes-and-Const-Correctness"><a href="#Template-Classes-and-Const-Correctness" class="headerlink" title="Template Classes and Const Correctness"></a>Template Classes and Const Correctness</h1><h1 id="Template-Functions"><a href="#Template-Functions" class="headerlink" title="Template Functions"></a>Template Functions</h1><h1 id="Functions-and-Lambdas"><a href="#Functions-and-Lambdas" class="headerlink" title="Functions and Lambdas"></a>Functions and Lambdas</h1><h1 id="Midquarter-Review"><a href="#Midquarter-Review" class="headerlink" title="Midquarter Review"></a>Midquarter Review</h1><h1 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h1><h1 id="Special-Member-Functions"><a href="#Special-Member-Functions" class="headerlink" title="Special Member Functions"></a>Special Member Functions</h1><h1 id="Move-Semantics"><a href="#Move-Semantics" class="headerlink" title="Move Semantics"></a>Move Semantics</h1><h1 id="std-optional-and-Type-Safety"><a href="#std-optional-and-Type-Safety" class="headerlink" title="std::optional and Type Safety"></a>std::optional and Type Safety</h1><h1 id="RALL-Smart-Pointers-and-Building-C-Projects"><a href="#RALL-Smart-Pointers-and-Building-C-Projects" class="headerlink" title="RALL, Smart Pointers, and Building C++ Projects"></a>RALL, Smart Pointers, and Building C++ Projects</h1><h1 id="Class-Review"><a href="#Class-Review" class="headerlink" title="Class Review"></a>Class Review</h1><h1 id="Guest-Lecture-from-Ethan-Chi-C-for-Data-Science-and-ML"><a href="#Guest-Lecture-from-Ethan-Chi-C-for-Data-Science-and-ML" class="headerlink" title="Guest Lecture from Ethan Chi: C++ for Data Science and ML"></a>Guest Lecture from Ethan Chi: C++ for Data Science and ML</h1>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++, restore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sheetaの摸鱼日记（二）</title>
      <link href="/2022/09/12/moyu2/"/>
      <url>/2022/09/12/moyu2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>世上只有一种真正的英雄主义，那就是在认清生活的本质后依然热爱生活。</p></blockquote><p>新学期开始啦！争取这学期把绩点再往上提一点！</p><h1 id="2022-x2F-9-x2F-13"><a href="#2022-x2F-9-x2F-13" class="headerlink" title="2022&#x2F;9&#x2F;13"></a>2022&#x2F;9&#x2F;13</h1><p>新学期第一天，学堂路上的车、食堂里的人都巨多。看来大家第一周还是习惯循规蹈矩地去教室上课、食堂吃饭（误</p><p>第一天上课就有早八orz</p><p>不过是杨大伯的复变。</p><p>杨大伯真是太好了呜呜，讲得又好人也很有趣，我还是喜欢这种写板书的老师（主要是看ppt一会就犯困了、、</p><p>这是一门好课（确信，原因是我很久没有这样专注地听一门课并且觉得上课时间过的很快了。</p><p>杨大伯说他的课A-及以上高达70%+，A+数量高达30%+，49分就及格。还可爱地说“我的资历比较老，教务处的很多老师都是我的学生，他们管不了我的优秀率。”</p><p>“我这门课只要你努力一点就很容易得A+，也许在清华的绩点里A+和A还有A-都是4.0，但是如果你申请国外的学校，你有一门数学课是A+，那绝对比10个A还管用。”</p><p>哈哈哈哈哈，杨大伯yyds！</p><p>今天还做了一件勇敢的事——去人文楼将成绩复议表交到了之前邮件里教务说的地方。</p><p>希望能复议成功吧呜呜呜，一门通识选修课，我真的不能忍受只有3.0，明明写得那么认真了🥀</p><p>如果复议不成功，我也没有办法，只能接受了😔</p><p>——————————</p><p>一天的课上下来，有一种入土为安的感觉……</p><p>好累好累好累</p><p>初概上到最后真的有点撑不住了，不过婉璐姐姐是我想象中的样子🤭</p><p>上初概的感觉是死去的高中数学又开始攻击我，并且让我有一种欠债未还的感觉（都怪当时古典概型啥的没有学好</p><p>不过虽然累，但我很喜欢这种感觉</p><p>上课不觉得无聊，能够学到新的或者意想不到的知识，课后有东西需要整理……</p><p>果然我还是最喜欢数学，要不是数学太难了我就润数学系了😔</p><p>相比之下，工程热力学就显得十分无聊&#x2F;&#x2F;&#x2F;</p><p>希望这学期不要过多地陷入精神内耗，而是应该一步步地、勇敢地走下去</p><p>溜了（复变和初概都需要整理呢呜呜</p><h1 id="2022-x2F-9-x2F-14"><a href="#2022-x2F-9-x2F-14" class="headerlink" title="2022&#x2F;9&#x2F;14"></a>2022&#x2F;9&#x2F;14</h1><p>本学期第一次出校，大成功~~~</p><p>以“就医”为理由，去打了九价第二针（真疼，比第一针疼多了），然后精准卡点回来，去一点点买了杯四季奶青，然后去剪了个头发（毕竟实在不敢相信学校理发店 的理发水平）。感觉剪的很好，头发短了脑袋都轻松了不少。</p><p>下午上体育课，居然恰好和曾经一起打过校内赛的人组队扔盘！！！</p><p>晚上上老毕的大物英，不得不说，老毕讲的挺好的，讲的不算快（尽管到后面我还是没有跟上&#x2F;&#x2F;&#x2F;，还有就是我时不时地要查一下字典</p><p>等周五上午再去听听王向斌老师的大物，不过我还挺喜欢老毕讲的大物，当初选这门课的一个重要原因就是它能找到往年题，比起上学期物理期中考砸后喜提退课好多了。</p><p>宿舍里居然有跳蚤😓，我还以为我脚腕上那一圈红点点是蚊子咬的呢。等明天宿舍消杀后我再买点喷的药，把宿舍喷一遍。</p><p>感觉每天晚上都有课的感觉还挺不错的，就是现在做核酸只能在晚上，还挺不方便的。</p><p>明天还有早八，睡咯。</p><h1 id="2022-x2F-9-x2F-16"><a href="#2022-x2F-9-x2F-16" class="headerlink" title="2022&#x2F;9&#x2F;16"></a>2022&#x2F;9&#x2F;16</h1><p>今晚接到了人文学院的电话，复议没有成功😔</p><p>我早该知道，如果那么简单就能复议成功的话那么华大学生就不会那么在意gpa了</p><blockquote><p>徒劳之举，你为何继续呢？</p></blockquote><p>说实话，还是很有点难过的，一门通识课成绩却要记入必限（成为我成绩最低的课，希望以后不要有更低的💧</p><p>这学期的实验好多，不想干（雨杭姐说航院的实验都很有点麻烦</p><p>无所谓了，我也不想退课，只希望期中不要先教我认清自己的平凡就好，毕竟我现在还有那么一点点自信心。</p><p>第一周就这么忙，后面简直不敢想。思来想去还是决定把老毕的大物英给退掉，上wxb老师的大物，据说王老师量子那一块讲的特别好，貌似期中的时候何老师也会调分（但愿，这学期我真的不想再退大物了。</p><p>其实老毕讲的挺好的，可能是英语本身的原因，我目前听过的几门英语课感觉结合ppt都能听得懂。退掉大物英可能也有老毕人还在美国的原因吧（毕竟线下课还是有趣一点点，尽管我决定这学期大物课后倍速播放雨课堂的回播，试一下下。上学期每节课都去上，结果喜提期中退课，这学期换种方法试试。</p><p>不能再被中学时那种“要好好听课”的成规影响，大学还是要摆脱高中生思维。我觉得我上学期好几门大学分的课都在这点上吃了亏😔</p><p>下午第一节课是马原，龙老师好有趣，上课前还给我们播放B站的鬼畜视频😂</p><p>龙老师说：</p><p>清华同学，很多人不是资本家，但觉得自己能成为资本家</p><p>因此他不维护自己当下的利益</p><p>反而去维护自己未来的利益。</p><p>晚上上心智探秘时刘嘉老师也说：</p><p>在物理世界中，现实只是一个不存在的点。而在心理世界中，现实才是真实存在的，它同时还包括一点点对过去的记忆和对未来的憧憬。</p><p>但如果过于怀念过去，就可能发展为抑郁症；反过来，过度纠结未来，人就可能焦虑。</p><p>2022年5月算是我人生的又一个转点，直到经过了一整个暑假的自我疗伤，我才慢慢明白一些道理：</p><p>必须活在当下，专注手中的事，想尽办法把它们做好，能够问心无愧。至于结果怎样，谁知道呢？</p><blockquote><p>每一道失去，都是醇厚的赠予。</p></blockquote><p>这周末事好多：考四级、国赛（重在参与）、刷大物前两节课视频（是的，我两节都没听hhh）、一堆整理、作业…</p><p>这样忙碌的生活，我倒挺喜欢。</p><p>忙里偷闲，闲时吃紧。</p><p>荒草丛生的青春，倒也过得安稳。</p><h1 id="2022-x2F-9-x2F-18"><a href="#2022-x2F-9-x2F-18" class="headerlink" title="2022&#x2F;9&#x2F;18"></a>2022&#x2F;9&#x2F;18</h1><p>今天高强度工作7小时，赶在截止前把论文交了上去，着实称得上一段难忘的经历。</p><p>但也实在不想再来一遍了哈哈哈哈哈。</p><p>这几天真的就是头疼眼睛疼，感觉脑袋和电脑都快要爆炸了，不过弄出来还是很有成就感的。</p><p>希望能符合“成功参赛”的标准（在写题的过程中目标就从重在参与争取拿个小奖变成了一定要写完交上去拿回报名费😂</p><p>可惜的是因为这个建模大赛，我堆积了好多作业都没有写（是谁开学第一周就忙的飞起啊，早知道我就不选这么多课了🥀</p><p>想简单写写目前对恋爱的看法。</p><p>起因是看了一个月的小说，以及这学期一位室友脱单了，还有一位室友复合了。</p><p>小说里的故事过于美好（我也只喜欢看甜文，青梅竹马、破镜重圆、坚定选择……一看就很少或者压根不会在现实生活中发生。现实生活里的爱情过于脆弱，每个人都有自己的心思，两个人在一起需要磨合。</p><p>说实话，我根本想不到自己和一个人建立亲密关系，我也想不通他们为什么都会谈恋爱，我甚至很胆怯，不敢奉献出自己的真心，怕被践踏，更怕无法收回。</p><p>所以我选择逃避。</p><p>正如顾城所说的：为了避免结束，我避免了开始。</p><p>又像《人间失格》里写的那样：胆小鬼连幸福都害怕，碰到棉花都能受伤，有时还会被幸福所伤。</p><p>但人是一种奇怪的生物，无法独处却又享受孤独。正如我有时候喜欢一个人呆着，不希望有人找到我或者打扰我，有时候又希望和别人建立一定的联系。</p><p>我一直觉得自己是个矛盾的人，矛盾且拧巴，不希望麻烦别人，有事习惯性自己扛着。我丝毫不怀疑我对待爱情也是这样，何况一瞬间的好感本就来自于身体激素的分泌。如果你走出了99步，可能我才会迈出一步，因为犹豫、因为害怕。</p><p>可惜的是，大多数人走不到99步就放弃了，我能够理解，只是会有点遗憾。</p><p>久而久之，就习惯了伪装自己的心，接受了一个人的生活。</p><p>没什么不好的，只是偶尔会在想出去玩找不到伴、吃饭时只能漫无目的地刷着手机、遇到难事时找不到人倾诉、遇到开心的事也找不到人分享、做什么都自己一个人时，希望有个人出现在我身旁，陪伴着我就好。</p><div class="note info modern"><p>&lt;贴一篇很早之前在知乎上看过的文章&gt;</p><p>你为什么一直不谈恋爱？</p><p>看到这个问题的时候，我恰好出门拿外卖</p><p>九月初秋的天气，傍晚五六点的光景，正是云霞最好看的时候，夕阳遥遥悬在天边，飘着几朵碎云，被染成金红金红的，金得璀璨夺目，红得明艳动人</p><p>但这是一种，没有意义的美</p><p>没有意义在哪？</p><p>没有意义在，我既没有值得分享的人，也不想驻足拍下来把这一刻留住</p><p>这样的，没有意义的时刻，还有很多</p><p>隔壁书店养了一只猫，每次我过去的时候，它都会跑过来，竖起尾巴弓着身子蹭我的腿，喵喵地叫着看着我让我撸它两下</p><p>坐高铁的时候穿越了一片雨云，豆大的雨珠突然就下来了，噼里啪啦地击打着窗户，高铁的速度很快，水珠在玻璃上划出了几乎是横线的轨迹</p><p>去野外踏秋的时候迷了路，树木林立，地上被枯枝落叶覆盖着，四下望去的时候其实挺绝望的，最后终于走出来，看到马路的时候，畅快地大喊了出来</p><p>这些片刻构成了我生活的方方面面，给了我长足的快乐和感动</p><p>但它们都是，没有意义的</p><p>我其实是有女朋友的</p><p>但在我打开手机，试图给她分享这种心情的时候</p><p>看到的聊天界面，还是昨晚的那句晚安</p><p>于是我就放弃了</p><p>她并非是不喜欢我，相反，她对我很好</p><p>只是她向来都是，有特别的事时才会找我</p><p>初秋傍晚的晚霞，算一件特别的事吗？</p><p>一年有三百六十五天，秋天占了四分之一，初秋占了一半</p><p>除去阴天、雨天…这样的日子也不在少数</p><p>更何况，人人都能见到的东西</p><p>又有什么特别的呢？</p><p>那么，我对她来说，特别吗？</p><p>其实并不</p><p>如果发生了什么紧急情况，最先联系的人应该是父母</p><p>工作或者学习上的事，找同事和同学就行了</p><p>好看的衣服、电影、电视剧，跟闺蜜和姐妹的品味不是更合吗</p><p>只有一些，不大不小的事，驳杂的生活碎片，在需要倾诉的时候，最好有一个人能听听</p><p>并非是这样的事最适合跟我说，其实不说也无所谓，只是我恰好在这里</p><p>恰好是我，罢了</p><p>我以为的恋爱是，互相交流灵魂</p><p>从鸡毛蒜皮的碎屑，起床啦好困啊不想上班领导好烦食堂的菜盐又放多了…</p><p>到天马行空的胡说八道，想要的超能力丧尸爆发该怎么办太空里有外星人吗…</p><p>但我历任女朋友都告诉我</p><p>恋爱是体贴，是包容，是成长</p><p>是一些你不能和家人朋友一起做又不想一个人做的事</p><p>而这些事，其实一个人也完全能做</p><p>她们反复地告诉我生活的重心该是工作和学习，不要放弃个人的成长，要有私人空间和自己的事………</p><p>反反复复就只有四个字</p><p>“你不重要”</p><p>是啊，我既不特别，也不重要</p><p>好像就只有我在认认真真地喜欢，试图把一半生活分给对方</p><p>像个长不大的孩子，交到了个好朋友就固执地想分享自己一半的玩具</p><p>我没有一直不谈恋爱，可到了此刻，我突然就，不想再谈了</p><p>人总是会长大的，对吧？</p><p>你看，我就学会把这些片刻写下来，而不是再去试图告诉你</p><p>尽管在我喜欢你的时候，我真的很想让你知道</p><p>今天的晚霞很美，虽然它跟昨天前天，明天后天，或者无数个以前以后并没有什么不同</p><p>它一点都不特别</p><p>只是我吹着晚风，迎着人潮汹涌，孤零零走在街上，转头看向那晚霞的时候</p><p>突然就很想你</p></div><p>+++事实证明，人在夜晚时容易感时伤怀。毕竟是周末（尽管也要过去了，还是不那么苛责自己，花点时间写点自己喜欢的文字吧。</p><h1 id="2022-x2F-9-x2F-19"><a href="#2022-x2F-9-x2F-19" class="headerlink" title="2022&#x2F;9&#x2F;19"></a>2022&#x2F;9&#x2F;19</h1><p>😭😭😭</p><p>怎么有人开学第一周就写不完作业啊？</p><p>没有想到我有一天会为初等概率论破防。课程太密了，上的快，内容多，作业多（总结下来就是我太菜了，wljj讲的挺好的，但我消化+写作业的时间太长了呜呜</p><p>上周的大物还没有补起来，理力也需要整理（今天的课最后一点点内容听的不是特别懂。但是目前我个人感觉理力比上学期的大物友好多了。上学期的大物讲的我有点云里雾里，而理力我可以在课上大致跟上老师的进度。</p><p>明天还有杨大伯的复变。尽管可以通过考前背题来获得好成绩，但我还是想学点新知识，而不是疲于应试。</p><p>明天一定要把大物搞完啊呜呜（不然后天又要上大物了</p><p>学不完了学不完了学不完了</p><p>我就不该报名那个数模比赛，欠了一堆作业和整理…</p><p>挺过这一段时间，希望会好一点…</p><h1 id="2022-x2F-9-x2F-20"><a href="#2022-x2F-9-x2F-20" class="headerlink" title="2022&#x2F;9&#x2F;20"></a>2022&#x2F;9&#x2F;20</h1><div class="note info modern"><p>今天的小确幸：</p><p>今天买了一杯瑞幸新出的青森苹果丝绒拿铁。</p><p>青苹果的清香冲淡了咖啡的腻味，丝绒拿铁的口感一如既往的香醇，咽下去后嘴里还残留着淡淡的清甜。</p><p>咖啡入口的时候满脑子都在播放嵩嵩的《青》：</p><p>“可是那层彩虹始终无法透彻，我们来到了青色的隔阂。”</p><p>“黄与绿的混合是青苹果的苦涩”<br>……</p></div><p>好消息是今天在ddl前完成了初概的作业，除了初概和复变以外上过的课程都看完&#x2F;整理完了。</p><p>坏消息是作业都没开始写，而且大物和理力的作业可能不会写🥀</p><p>估计又要花费很久的时间来啃这两门的作业了（sigh</p><p>感觉这学期的状态和大一上的状态比较像，不同的是任务更多了，但我似乎也多了一份从容。</p><p>只要对一切都抱着“无所谓”“尽力就行”“能学到什么就好”的态度，知道自己想要干什么，就不会被他人影响，也不会很长时间陷入焦虑or内耗的状态（不过有时候还是会emo</p><div class="note info modern"><p>你越功利，世界对你越神秘</p></div><h1 id="2022-x2F-9-x2F-21"><a href="#2022-x2F-9-x2F-21" class="headerlink" title="2022&#x2F;9&#x2F;21"></a>2022&#x2F;9&#x2F;21</h1><div class="note info modern"><p>🎵🎶🎶🎶</p><p>Oublie-le</p><p>好几次我告诉我自己</p><p>越想努力赶上光的影</p><p>越无法抽离 而已</p><p>Je t’aimais</p><p>刻骨铭心只有我自己</p><p>好不容易交出真心的勇气</p><p>你沉默的回应 是善意</p></div><p>我爱周三！</p><p>翘了大物后全天只有一节体育课，还是我喜欢的飞盘，而且强度远低于系队训练哈哈哈哈哈😊</p><p>感觉这学期周三宛如一把斧头，把一周的忙碌劈开，留给了我一点点短暂的喘息时间…</p><p>白天的空闲时间在写第一周的理力作业，惊奇地发现那些内容自己居然都掌握了。</p><p>看来至少目前为止，理力比上学期的大物善良多了，我上课的时候也能跟上老师所讲的内容</p><p>（要是大物也像理力一样就好了，那我上学期就不会“喜提”退课了😔</p><p>这学期转变一下学习大物的方法，前半学期就自己看ppt，反正在上课的时间内也不能完全消化老师讲的内容，回来还是得过n遍ppt，倒不如节约那点上课的时间</p><div class="note info modern"><p>毕竟我也只有这点时间用来挥霍。</p></div><p>今天看完了《世界尽头的咖啡馆》</p><p>说实话，这本书的内容没有别人推荐的那么震撼，但还是能启发人一定的思考。</p><blockquote><ul><li><p>一个人要是知道了自己存在的意义，他就会为了实现这个意义做一切想做的事。</p></li><li><p>转变心态的重点在于，你要清楚，某样东西是否能让你的生活更圆满，由你自己说了算，和别人告诉你它圆不圆满无关。（这句颇有《无声告白》那句话的味道）</p></li><li><p>既然你现在就能做想做的事，为什么要等呢？</p></li><li><p>当自己为实现存在意义而努力时，幸运的巧合就会自然出现，他们管这个叫顺其自然。</p></li><li><p>人不能刚迈出第一步，就站在原地等待。如果有人真想知道他为什么存在，他就得为自己找出答案。</p></li><li><p><strong>生活本来就很精彩。只不过有人没发现自己是作者，没发现他们可以按自己的想法创作。</strong></p></li></ul></blockquote><p>我印象最深的是关于那个渔夫的故事。</p><div class="note info modern"><p>既然现在就能做自己想做的事，那么为什么非要等到退休后呢？</p></div><p>尽管有点不现实，但确实是一种很幸福的活法。</p><p>毕竟我只有一生这么长。</p><h1 id="2022-x2F-9-x2F-22"><a href="#2022-x2F-9-x2F-22" class="headerlink" title="2022&#x2F;9&#x2F;22"></a>2022&#x2F;9&#x2F;22</h1><p>今天吃到了热干面！</p><p>虽然味道和家乡那边的还有点区别，不过已经很接近了</p><p>第一次在北京吃到热干面呜呜呜😭</p><p>感谢荆楚协会</p><p>又刮大风了，八九级的大风</p><p>北京的妖风果然名不虚传（冒着大风骑车真的要命</p><p>天气转凉了，骤降近十度</p><p>这两天身体有点疲惫，可能是因为没有午睡，晚上总是会很困</p><p>初概有点跟不上节奏了，sad</p><p>明天周五，虽然课也很多，但是相比之下较为轻松（工热、马原、心智探秘</p><p>需要给自己放点假</p><p>让身体稍稍休息一下</p><h1 id="2022-x2F-9-x2F-23"><a href="#2022-x2F-9-x2F-23" class="headerlink" title="2022&#x2F;9&#x2F;23"></a>2022&#x2F;9&#x2F;23</h1><p>今天一天除了下午都很困qwq</p><p>很喜欢我这学期排在周五晚上的那门通识，有种不是专业硬课且恰逢周末来临的轻松感（决定以后我都这样排课</p><p>由于选课原因忙碌了两周，<del>并且还将忙碌整整一学期</del>。</p><p>有一种久违的充实感，繁重的课业任务让我无心想别的事。</p><p>尽管我知道这只是一种充实，而不是一种真实。</p><p>但我这学期就想用这来麻痹自己。</p><div class="note info modern"><p>用一直在前进来让自己忽略正确性</p><p>能不能说是一种清醒地沉沦呢？</p></div><p>不管怎么说，美好的周末开始了。</p><h1 id="2022-x2F-9-x2F-24"><a href="#2022-x2F-9-x2F-24" class="headerlink" title="2022&#x2F;9&#x2F;24"></a>2022&#x2F;9&#x2F;24</h1><div class="note info modern"><p>我终于明白</p><p>行动、爱和受苦</p><p>其实就是活着</p><p>但活要活得透明澄澈</p><p>并接受自己的命运不过是</p><p>由各色喜悦和热情所造成的单一折射</p><p>——Albert Camus</p></div><div class="note info modern"><p>爱谁都好，只要能接受最坏的结局，并且有勇气撑过去，就好。</p></div><p>周末就是应该用来睡觉的！一觉睡到九点多真的很舒服（尽管醒得很早，但是不想起床</p><p>本来以为今天晚上能源认知实践的总结会不用去，结果老师说随机点名，不在的直接挂掉😓（1学分的pf课还这么离谱</p><p>本来准备晚上把大物作业写完然后整理下初概课上的离散随机变量和连续性随机变量，由于耽搁，只写完了大物作业（幸好还写完了大物作业</p><p>明天再整理下初概吧，还有初概作业。希望晚上之前能把任务完成的差不多，然后晚上出去玩。</p><h1 id="2022-x2F-9-x2F-25"><a href="#2022-x2F-9-x2F-25" class="headerlink" title="2022&#x2F;9&#x2F;25"></a>2022&#x2F;9&#x2F;25</h1><p>周末从晚上六点二十开始（因为不可抗的摸鱼因素，导致这个点我才把剩下的作业写完&#x2F;&#x2F;&#x2F;</p><p>晚上吃完饭后去逛了西单，自由的感觉真好。</p><p>西单没有上次来的人多，从一楼一直通往六楼的大电梯也停了。由于对逛衣服不感兴趣，所以这种商场对于我来说能逛的部分比较少。</p><p>逛番茄口袋的时候驻足于一面便利贴墙，以前遇到明信片墙或者便利贴墙时我也喜欢看，看一个个陌生人的愿望，一张张便利贴上写着人们最真切的心愿。</p><p>这次我被一张便利贴打动了，如果没猜错，应该是一对情侣写的。上面写道：</p><blockquote><p>亲爱的藤井树小姐</p><p>今天我在富士山</p><p>山顶为你飘落了一片雪</p><p>而此刻我正喜欢着你</p><p>喜欢得全世界的森林一起倒下</p><p>那么喜欢</p></blockquote><p><img src="/2022/09/12/moyu2/a1.jpg"></p><p>以前看《情书》的时候没法get到它的点，不明白人们推荐这部电影的原因。也许日本人和中国人一样含蓄，这种少有的直白就显得弥足珍贵了。</p><p>回校的路上走过了一架天桥。</p><p>临近夜深的北京空气里都弥漫着一丝冷气。</p><p>天桥适合拥抱、接吻。</p><p>人们在冷风中相互取暖、用行动倾诉着自己热烈的爱意。</p><h1 id="2022-x2F-9-x2F-26"><a href="#2022-x2F-9-x2F-26" class="headerlink" title="2022&#x2F;9&#x2F;26"></a>2022&#x2F;9&#x2F;26</h1><p>今天尝试给博客配置图库，原因是markdown如果用绝对路径插入图片的话太不方便。</p><p>可惜配了半天都没有配置好，不过发现了之前文章中有的图片裂了的原因：我放图片的那个文件夹中本应该插入的那张图片消失了。</p><p>我的图图呢？？？</p><p>实在不行就保存在本地算了，以后要迁移的话再说吧。</p><p>——————</p><p>晚上听了小华的九周年音乐会！</p><p>我哭死😭😭😭（是谁错过了直播只能看回放呜呜呜）</p><p>尽管有几首歌改编成交响乐的版本听上去有点奇怪（可能是没听习惯？，但大部分都好好听！</p><p>有一种灵魂颤动的感觉。</p><p>不一样的改编让人耳目一新。</p><p>果然，我爱他的才华胜过他的人。毕竟他的音乐总能引起我灵魂的共鸣，无论是两年多前，还是四个月前，他的歌都给了我那份独一无二的救赎。</p><div class="note info modern"><ul><li><p>若你伤悲，让我钟声给你安慰。       ——《卡西莫多的礼物》</p></li><li><p>是不是成了佛，世间便没了魔。谁来告诉我。   ——《齐天》</p></li><li><p>为何表情要让这世界安排。   ——《烟火里的尘埃》</p></li><li><p>梦却了无影踪，梦仍不曾改动。   ——《Here we are》</p></li><li><p>爱到最后究竟还剩什么。   ——《国王与乞丐》</p></li><li><p>将有一天你会拥有美好的生活，感谢在那每一次跌倒了以后，又重新来过。  ——《花落时相遇》</p><p>……</p></li></ul></div><p><img src="/2022/09/12/moyu2/a2.jpg"></p><p>（就是华华说话的时候声音好沙哑，还要和我们聊天，好心疼</p><p>两个小时的线上音乐会，感觉时间过的好快。</p><p>什么时候我才能去现场听一场真正的演唱会啊</p><p>还挺想亲口听他说那句“欢迎回家”。</p><h1 id="2022-x2F-9-x2F-27"><a href="#2022-x2F-9-x2F-27" class="headerlink" title="2022&#x2F;9&#x2F;27"></a>2022&#x2F;9&#x2F;27</h1><p>总感觉周二相当的疲惫，尽管它并不是我一周中课最多的一天。</p><p>仔细想来，可能是因为我每逢周二就会点一杯瑞幸咖啡。</p><p>以此来省掉午睡，所以到晚上总会头昏脑胀。</p><p>以前我是不喝咖啡的，直到高中毕业前，我都没喝过一次咖啡，连那种速溶的咖啡都没有。</p><p>咖啡没有奶茶甜，甚至有时候刚入口时有一种奇怪的味道，要过一会才能适应。</p><p>而我喜欢甜的东西。</p><p>终于知道越越之前说的喝咖啡是什么感受了：</p><div class="note info modern"><p>那种感觉很痛苦，你的身体已经很疲惫想要休息了，但你的大脑没有休息。</p></div><p>今天看《那不勒斯四部曲》的时候感觉很难受，不知是书中的文字让我难受还是因为今天没得到足够的休息。</p><blockquote><p>莱农，我这一辈子，除了躲开那样的时刻，没做过别的事儿。马尔切洛让我害怕，我通过斯特凡诺保护自己，斯特凡诺让我害怕，我通过米凯莱保护自己。米凯莱让我害怕，我通过尼诺保护自己。尼诺让我害怕，我通过恩佐保护自己。‘保护’这个词儿意味着什么？我要给你列举一个详细的单子，所有我构建的那些大大小小的藏身之所，但后来都没有用。</p></blockquote><p>看到这段时，莉拉在我心中的形象一下子回到小时候，那个聪明伶俐为自家的鞋店画设计图的莉拉。</p><p>而不是后来那个濒临破碎的莉拉。</p><p>说实话，我不太喜欢这本书，总觉得它太过拖拉，字里行间给我一种黏糊糊的感觉，让人读上去很不舒服。</p><p>但我还是想看到结局，<del>毕竟都看到最后一部了，丢下来有点不划算。</del>我想看看最终引发莱农的那根导火索。</p><div class="note info modern"><details>    <summary>其实今天在思考一个问题，或者说是一个一直堵在心中的问题。</summary>    computer science or math?<br>    我很喜欢数学，但我看到培养方案上的一堆四学分的课，什么抽代、实分析...就头疼。<br>    我一点也不觉得我能很快乐地把它们学好，或者说我心里就认为我学不好它们。<br>    但cs的课程据说设置很不合理，并且竞争压力肯定比数学大得多。<br>    选数学是因为我发现自己很早之前就喜欢给自己留一些能够自由支配、随便学学的时间。<br>    高中每周五的晚上业余搞搞数学竞赛也好，大学空闲时间学一点cs的课程也好<br>    我喜欢留一点空白<br>    这让我感到一切还在我的控制之下。<br>    我其实很担心如果之前转系真的成功了，我能不能适应cs系的学习进度和朋辈压力。<br>    可能这种不为什么结果的学习才是我所希望的吧<br>    唉，愁啊<br>    是不是我一开始就做错了呢<br>    走了一条错误的道路，悔相道之不察兮。<p>​    </p></details></div><p>——————</p><p>今天终于鼓起勇气问了辅导员成绩排名，比我想的要差一点，看来奖学金也没必要申请了</p><p>没办法，运气差了一点，踩雷了一门通识，错误地估计了自己微积分的能力，又没有抓住记pf和退课的机会。</p><p>今晚逛小红书的时候发现了一个好<a href="https://csmsapp.github.io/">网站</a>，评估了许多cs master项目，maybe以后可以作为参考。</p><h1 id="2022-x2F-9-x2F-28"><a href="#2022-x2F-9-x2F-28" class="headerlink" title="2022&#x2F;9&#x2F;28"></a>2022&#x2F;9&#x2F;28</h1><blockquote><p>不属于你的就不要，快乐不在拥有多少。</p></blockquote><p>What an awful day.</p><p>感觉今天的运气差到了极点，可能人在心情郁闷的时候什么都做不好吧。</p><p>早上尝试用vscode运行C++，顺便写了写C++，发现有好几处的语法我都跟python弄混了，搞了半天vscode也跑不起来，等什么时候有时间再看看😠</p><p>工热作业不会、初概作业也写的云里雾里，感觉这两门上次课上的内容我还没有完全理解，处于一种明白课上讲过的内容，但是不知道怎么做题的状态。</p><p>感觉今天什么都没做成，唯一一个有收获的地方就是弄懂了电像法。</p><p>有点emo</p><p>不由得想到了知乎上的那个问题“xx系大一一年一事无成怎么办”</p><p>今天是保研出结果日，沔中上一届毕业的已经大三了，他们已经站在了保研的最前列。</p><p>尽管目前我心中离开的想法远远大于留下，但如果到时候两条路都能走，我会选择哪条呢？</p><p>不过这应该是后话了。</p><h1 id="2022-x2F-9-x2F-29"><a href="#2022-x2F-9-x2F-29" class="headerlink" title="2022&#x2F;9&#x2F;29"></a>2022&#x2F;9&#x2F;29</h1><blockquote><p>If I can’t fall in love, let me fall asleep.</p></blockquote><p>今天好困😴，又累又困。大物实验挤占掉了原本用来修正的周四下午，下午还去了飞盘训练（毕竟要打马杯了，相当于今天一天早八晚十课程排的满满当当。</p><p>是谁开学一个月就有一门课要考期中了啊</p><p>初概这个时间安排的太阴间了</p><p>不知为何，九月份开始，或者说自从正式开始上课后，我就睡不了懒觉了，除非是没什么事的周末。</p><p>早上一定会在七点半之前下床，偶尔会在五六点被室友的闹钟吵醒（我也不知道她为什么要定个六点的闹钟，而我对声音极其敏感，每次她还没醒关掉闹钟前，我就已经醒了半天了…</p><p>maybe还是压力过大吧</p><p>这学期尝试用各种各样的事情麻痹自己，这样就没空去想东想西了…</p><p>等到十月底，那时北京的秋意应该很浓了，到时候争取每周都出去一趟，去见见北平的秋色，就像春季时一个人逛遍各种公园去赏花一样。</p><p>尽管时过境迁，但不变的是，我仍是一个人。</p><h1 id="2022-x2F-9-x2F-30"><a href="#2022-x2F-9-x2F-30" class="headerlink" title="2022&#x2F;9&#x2F;30"></a>2022&#x2F;9&#x2F;30</h1><p>放弃了某件东西后，心中一片释然。</p><p>人生无处不青山。</p><p>明天是十一，按理说放假我会开心的，但这假也放的太短了。和高中生放的时间一样长，要写的作业要干的活可多多了。</p><p>下周不仅有初概的期中考试，还有工热测验，而我这周两次工热作业都没有写，甚至上课的内容都还没有完全弄懂</p><p>😔</p><p>总感觉我陷入了情绪和事情的循环中，什么时候才能跳出来？</p><p>离70周年国庆已经过了三年了，而这世界发生了这么大的变化，真令人感叹。</p><p>三年前外婆的身体还很好，三年前我刚高二，刚逛完交大复旦，三年前我交到了一个特别好的朋友，三年前还没有疫情……</p><p>三年后，物不是人也非，欲语泪先流。</p><h1 id="2022-x2F-10-x2F-1"><a href="#2022-x2F-10-x2F-1" class="headerlink" title="2022&#x2F;10&#x2F;1"></a>2022&#x2F;10&#x2F;1</h1><p>今天尽管很累，但很快乐。</p><p>不想在欢度国庆的日子感时伤怀，只想带着那转瞬即逝的激动入睡，而不去管那激动逝去后的空洞寂寥。</p><h1 id="2022-x2F-10-x2F-2"><a href="#2022-x2F-10-x2F-2" class="headerlink" title="2022&#x2F;10&#x2F;2"></a>2022&#x2F;10&#x2F;2</h1><p>最近看到的很有感触的文字：</p><div class="note info modern"><p>惯写金樽美酒、千古风流，块垒浇灭在少年胸口。</p><p>写他起高楼，写他烈火烹油，大刀阔斧，长歌不休。</p><p>偏没写那不见底的回廊深秋，兜兜转转啼啼笑笑，英雄就白了头。这世上多的是庸诗碌酒、刘备的荆州，多的是西风独瘦、将死未死的夏商周。</p><p>“可叹我命如蜉蝣，竟也曾妄攀春昼。”</p></div><p>感觉近几年驾驭文字的能力弱了不少，偶尔需要思考半天才能找到自己想要表达的词汇。</p><p>无论是美的表达，还是严谨的、朴实的、含蓄地……</p><p>似乎我现在欣赏这些文字的时间都少了不少。</p><p>高中时写日记的时候（准确的说是杂记），会摘抄一些自己喜欢的片段、词汇、表达，每天记录生活片段的寥寥数语穿插着我喜欢的文字，不需要从明显的情绪外露中感受，就可以察觉到我当时的心情。</p><p>高考完的那个暑假某天下午我把高中记的好几个本子从头到尾翻了一遍，恍惚间，思绪又飘回到提笔写下这些文字的时刻，好像从未离开一样。</p><p>人应该往前走、向前看，而不应该沉沦于过去。</p><p>但当情绪无法发泄的时候，可以用文字把曾经经历过的、想到过的、遗憾过的、反思过的……全都封存下来，既可以给大脑减负，又为日后的回忆保留了一份可能。</p><p>————————————</p><p>国庆放三天实在太少了呜呜，作业都写不完，今天除去摸鱼时间几乎干了一天的活，还有大物作业、理力作业、两篇实验报告……没有完成😩</p><p>放的时间和高中生一样，要干的活比高中生多多了。</p><h1 id="2022-x2F-10-x2F-3"><a href="#2022-x2F-10-x2F-3" class="headerlink" title="2022&#x2F;10&#x2F;3"></a>2022&#x2F;10&#x2F;3</h1><p>今天好冷🤧在路上骑车人都快被风送走。</p><p>就是不想写实验报告，数据处理后和理论相差好大，好烦。</p><p>国庆太短了，明天又要上课了。</p><p>今天和cwt请clj和zzy吃饭，从cwt口中得知书院的保研可能要和我们一起排名。</p><p><del>所以说强基就是一场骗局。</del></p><p>无妨，如果一直盯着那个保研名额，盯着绩点和奖学金，那样太累了。</p><p>这学期给自己找了好多活，希望能让自己不要闲下来emo，毕竟选择都是自己做的，所以无论什么样的结果我都接受。</p><div class="note info modern"><p><strong>什么是真正的遇见</strong></p><p>林徽因说过：很多人喜欢你，因为你漂亮好看，会说机灵话，有趣好玩，这些喜欢都暗含着很多期望。</p><p>而有的人喜欢你，是看见你哭和狼狈，知道你辛苦和平凡，允许你不美又不乖，还想把肩膀和糖塞给你。</p><p>人与人之间，若灵魂不能共振，交流不能同频，仅仅只是浅浅的相遇，终究会成为陌路，可贵的是遇到理解与发自内心的爱。</p></div><div class="note info modern"><p>人类处于神与禽兽之间，时而倾向一类，时而倾向另一类；</p><p>有些人日益神圣，有些人变成野兽，而生活中的大部分人保持中庸。</p><p>——普罗泰戈拉</p></div><h1 id="2022-x2F-10-x2F-4"><a href="#2022-x2F-10-x2F-4" class="headerlink" title="2022&#x2F;10&#x2F;4"></a>2022&#x2F;10&#x2F;4</h1><p>今天从早困到晚😴，而且眼睛特别疼，脑袋像浆糊一样…</p><p>难道是因为天气太冷了我需要冬眠了吗（</p><p>明天一天都用来复习初概好了，后天晚上就考期中（死到临头才开始女娲补天</p><p>今天终于把物理实验的实验报告搞完了，然后开始写理力的实验报告。惊讶地发现我做的这两个实验居然研究的是同一种东西，都是阻尼振动和受迫振动…</p><p>有点无语，我最不喜欢重复劳动了。</p><h1 id="2022-x2F-10-x2F-6"><a href="#2022-x2F-10-x2F-6" class="headerlink" title="2022&#x2F;10&#x2F;6"></a>2022&#x2F;10&#x2F;6</h1><p>自从周二开始每天都特别困😴</p><p>真的真的需要冬眠了（为什么人类不需要冬眠啊</p><p>感觉最近数学瘾上来了……不知道为什么，感觉力学学的没意思极了。</p><p>但是令我犹豫的原因是我怕自己学不好数学。</p><p>初中数学能在老师刚把题目抄在黑板上时就迅速地解出来，连续好几次月考都是满分；高中数学尽管有时很折磨人，但还是让我倾心不已，就算胡老师出的题写了半天也没写出来也绞尽脑汁地去思考，月考时也考过满分也考过很多140+，可惜高考在一道单选题上失误。</p><p>没想到我也有今天……</p><p>数学是很纯粹的，学习数学不应该掺有那么多杂念，不然是学不好数学的。</p><p>有时候我也想问自己，计算机系的那么多硬件课我真的会喜欢吗？我觉得这个答案应该是否定的。</p><p>但每次转数想法冒出来的时候我都会看一下数学系的培养方案，然后被吓退。</p><p>我这样是不适合学数学的吧…</p><p>决定改天跟zrjj聊聊🤦</p><p>不过现在最大的难题是这个排名让我很尴尬，如果我明年想跑路的话这个排名不太有利。</p><p>如果跑不成，就沉下心来学统辅吧🤦‍</p><p>反正我现在更倾向于出国，再者就算成功保研，学一个自己不喜欢的方向我觉得我是不会开心的。</p><p>————————</p><p>晚上考完了初概期中……</p><p>好累，写的时候就觉得好累。有一个男生在还有一个小时的时候就提前交卷了，nb。</p><p>回宿舍后不想干活（在我看来考完试后还能静下心来搞学习的都是神仙，看了会书。</p><h1 id="2022-x2F-10-x2F-7"><a href="#2022-x2F-10-x2F-7" class="headerlink" title="2022&#x2F;10&#x2F;7"></a>2022&#x2F;10&#x2F;7</h1><p>早上在学堂路骑行的时候，风很冷，没戴手套，刚刚被捂热的双手一下子变得冰凉和僵硬。</p><p>穿梭在学堂路的车流中，听着室友讲六教前的两颗银杏。它们结果，然后落下，果子被来往的车辆碾过，以另一种方式回到了银杏的怀抱中。</p><p>我眯着眼睛，可能是天太冷的原因，明明是早秋，却有一种深秋的寂寥。</p><p>脑子里不知为何浮现了一句诗词“寂寞梧桐深院锁清秋”。</p><p>当北京盛秋的时候，是否有机会去校外看看呢？</p><p>——————</p><p>有点无语……</p><p>刚和辅导员请假129动员会后准备填出校申请，结果发现健康宝弹窗了……</p><p>我也没有去什么风险区啊…</p><p>也不知道明天出不出得去，唉</p><h1 id="2022-x2F-10-x2F-8"><a href="#2022-x2F-10-x2F-8" class="headerlink" title="2022&#x2F;10&#x2F;8"></a>2022&#x2F;10&#x2F;8</h1><p>今天写初概作业写了5h+……</p><p>人都写麻了，明天再肝其他作业吧，希望能把这周的作业写完💔</p><p>学校出了密接，又进行核酸大筛查。</p><p>接到了音乐会取消的通知，好消息是健康宝弹窗终于消失了，紫荆码也恢复了正常。</p><p>似乎疫情以来，人们就应该习惯这种任何安排都可能会打破的事实。</p><p>感觉最近又处于一种被ddl推着走的状态，什么时候我才能控制它啊？有时候想学点自己感兴趣的东西，或者做点自己想做的事都很难抽出时间。</p><p>果然，还是我太菜了。</p><p>最近想明白了一个道理，我们不能因为这段日子过的糟糕就把希望寄托于下一段日子，觉得一旦这段时间过去了一切就会好起来。</p><p>其实这是不对的，毕竟我们不能把这段日子从生命中抹去，它也属于构成现在的我们的一部分。不应该抛下无望的现在，而单纯地期待着未来。</p><p>而应该始终专注于当下，兵来将挡，水来土掩，遇到问题解决问题。</p><h1 id="2022-x2F-10-x2F-9"><a href="#2022-x2F-10-x2F-9" class="headerlink" title="2022&#x2F;10&#x2F;9"></a>2022&#x2F;10&#x2F;9</h1><p>今天理力作业写的很顺，比预计时间早了很多写完了。</p><p>于是我就寻思着配置一下一直以来想搞的博客评论，结果一直搞到下午…因为几个低级错误搞了好几个小时……</p><ul><li>看到“URI”自动地认为是“URL”</li><li>搞好了之后一直没有显示，结果发现是config文件里最上面，在一群绿色的注释包围里面，我没有选择用哪个评论系统（严重怀疑当初想用valine搭建评论系统的时候也是因为这个原因没有显示</li><li>想像别人一样魔改（用微信接收新的评论消息，结果没有配置好，反而之前已经测试成功的又无法评论了。无奈之下只好重来，从新建一个仓库开始……</li></ul><p>好在最后还是搭起来了，就是被自己蠢哭了இ௰இ</p><h1 id="2022-x2F-10-x2F-10"><a href="#2022-x2F-10-x2F-10" class="headerlink" title="2022&#x2F;10&#x2F;10"></a>2022&#x2F;10&#x2F;10</h1><p>上午睡到了快九点才起床……</p><p>异常的舒服，好久没有一觉睡到这个点了，感觉身心都得到了很好的放松。</p><p>上程设的时候很开心，可能是因为刚开始的原因，我边上课边写它的作业，偶尔听听课，也能受到很大的启发，作业也编写的差不多。</p><div class="note info modern"><details>    <summary>今日程设课有感</summary>    今天程设课上学有关位运算符时深受启发。<br><p>上学期尽管myc老师也讲了位运算的规则，但我对怎样使用以及为什么要使用始终存有疑惑。而wyp老师把它可能的应用讲的十分清楚简单列如下：<br></p><p>1.将a左移b位：左移一位相当于乘2，故可由此计算2的n次方。<br></p><p>2.位与&amp;和位或|：将数字转化为二进制后在每一位上与or或，其他的位运算符同理。<br></p><p>3.进行复杂运算时记得把括号加全。<br></p></details></div><p>晚上终于把理力中角速度的方向想清楚了，然后写与今天内容相关的作业，居然最后答案全都不对……</p><p>虽然其中有一题我认为应该是答案算错了，但是其他的几道题答案选的动系以及列的加速度方向都特别离谱…一时不知道该怎么办，遂暂时搁浅。</p><p>这不禁让我有点担心下周一的理力小测了，一个小时，考到今天学的内容（有种高中月考的感觉了……</p><p>此外，按照邓老师的提示算出了上周二晚初概作业的一道概率积分，好恶心的积分，积分主体列如下：</p><p>$\int_{-∞}^{+∞}e^{-\frac{z^2}{2y^2}-\frac{y^2}{2}}dy&#x3D;?$</p><p>Hint：换元比较巧妙，对于形如$e^{-a^2t^2-\frac{b^2}{t^2}}$的积分可以配方换元。注意还原后的变量范围。</p><p><del>如果你碰巧能看到这，感兴趣的话可以尝试算一下这个积分哈哈哈。</del></p><p>由于算出了这个恶心的积分，有点激动，于是去网络学堂查看了一下初概的期中成绩。说实话，有点失望，那种茫然的无力感又涌了上来。</p><p>就有一种感觉自己无论怎样做也无法改变现状的无力感，无论付出了多少，成绩都只能这样，甚至会更低，直至退课结局。</p><p>可以说直到我来清华之前，我都没有这种无力感，至少它不常出现。这不是其他同学的原因，大佬们无论多强，我只要把我自己的做好，最后的结局都会不错。</p><p>但是在清华，我总是被各种量化的东西提醒：不是这样的。</p><p>那是怎样的呢？我要怎么做呢？我能怎么做呢？</p><h1 id="2022-x2F-10-x2F-11"><a href="#2022-x2F-10-x2F-11" class="headerlink" title="2022&#x2F;10&#x2F;11"></a>2022&#x2F;10&#x2F;11</h1><p>今早发了邮件约了邓老师明天上午查卷，感觉预约制真是个好东西，之前我无论考的怎样都不想去查卷，而“预约”让这个请求变得合情合理起来（社恐人实锤了。</p><p>今天花了一点时间把马原的思考题写了写，看了一点资本论，虽然没太看懂。不过就我看的那一小部分，感觉马克思能够把日常生活中人们习以为常的东西的道理讲清楚，等什么时候有时间把全部的看一遍。</p><div class="note info modern"><details>    <summary>马原第一次思考题</summary>    思考题1:从事非生产性劳动的工人属于剥削阶级吗？<br>    马克思在《资本论》第一卷第13章中科学地预言：“最后，大工业领域内生产力的极度提高，以及随之而来的所有其他生产部门对劳动力的剥削在内涵和外延两方面的加强，使工人阶级中越来越大的部分有可能被用于非生产劳动，特别是使旧式家庭奴隶在"仆役阶级"(如仆人、使女、侍从等等)的名称下越来越大规模地被再生产出来。<br>    现代社会中越来越多的劳动者并不直接从事生产性劳动，而是从事非生产性劳动的工作，如企业管理人员、警察、律师、医生、会计、保姆、销售、店员、中介、公务员等第三产业的职业。那么这些职业的劳动并不直接形成价值，因此也就也不创造剩余价值，那么他们属于剥削阶级吗？<br>    因此，何祚庥院士指责我从事的不是生产劳动，属于剥削者，从而提出想要修改马克思的劳动价值论，主张知识也创造价值（这样修改之后，资本也就创造价值了）<br>    ※提示：《资本论》第三卷第17章：“这些店员的无酬劳动，虽然不创造剩余价值，但能使他占有剩余价值；这对这个资本来说，就结果而言是完全一样的”<br>    “正如工人的无酬劳动为生产资本直接创造剩余价值一样，商业雇佣工人的无酬劳动，也为商业资本在那个剩余价值中创造出一个份额。<br></details></div><div class="note info modern"><details>    <summary>my answer</summary>    马克思认为，生产劳动和非生产劳动的概念是同社会生产关系联系在一起的。就劳动的一般性质来说，生产出物质产品的劳动就是生产劳动。而在商品经济下，社会的物质财富表现为价值形式。 也就是说，在商品经济的条件下，生产劳动不仅要生产出使用价值，还要生产出价值.<br>    资本论第三卷第327页阐述了商业资本通过雇佣工人来占有剩余价值：<br>    1.产业资本通过直接占有无酬的他人劳动来生产剩余价值。而商人资本使这个剩余价值的一部分从产业资本手里转移到自己手里，从而占有这部分剩余价值。<br>    2.商业资本家会把他的货币借以成为资本的职能本身，大部分交给他的工人去承担。这些店员的无酬劳动，虽然不创造剩余价值，但能使他占有剩余价值；这对这个资本来说，就结果而言是完全一样的；因此，这种劳动对商业资本来说是利润的源泉。<br>    3.正如工人的无酬劳动为生产资本直接创造剩余价值一样，商业雇佣工人的无酬劳动，也为商业资本在那个剩余价值中创造出一个份额。<br>    由此可以看出，题目中所列的这些第三产业的职业尽管不直接形成价值，也没有创造剩余价值，但他们的劳动使资本家占有了剩余价值，与直接进行生产劳动的结果一样。<br>    故从事非生产性劳动的工人不属于剥削阶级，而是使资本间接获得剩余价值的被剥削阶级。<br>    而何院士提出想要修改马克思劳动价值论，关于“知识也创造价值”的主张也不正确。教师的服务劳动直接作用于生活消费的需要，如通过传授知识，满足了听众的精神需求。服务产品仍是通过市场交换使其价值和使用价值得以实现，只不过价值的实现是和使用价值的实现同时完成的。<br>    除此之外，提供服务的投资者也必然要求赚得剩余价值或者利润，也就是净收入。个人理解，教师所属的第三产业服务业的劳动通过商品交换使投资者占有了剩余价值，这里的“商品交换”既可以是实体的物质，比如用来满足人的饿或渴的需要，也可以是精神的物质，比如教师传授的知识等等。商业资本通过不对等的支付来获取利润，如教师的雇佣者为教师的劳动支付了一定的工资，而这些工资并不能完全覆盖教师的劳动，故资本从中占有了剩余价值。<br>    所以知识并不能创造价值，传授知识的教师等人本质上也是被剥削者。<br>    而关于《资本论》中主要研究的是物质生产领域的劳动和资本，可能是因为受限制于当时的生产力发展水平，第三产业并不发达，马克思从当时无产阶级革命运动的理论需求出发，更关注工人阶级的利益，但他提出的劳动价值论在当下仍具有普遍性。<br. < details></br.></details></div><p>感觉工热越听越无聊，sl老师的语音语调时常让我走神（我的问题，说不定哪次课后我就不去教室了，自己看ppt或者开倍速把老师上课讲的内容听一遍。</p><p>查看网络学堂大物文件时，发现老师居然已经把第19章的ppt传上来了，而我才把第16章的ppt学完，甚至还没有整理。</p><p>怎么讲的这么快啊，远超过我的进度和布置作业的进度。</p><p>——————</p><p>今天和zrjj聊了聊，基本上否定了转数的想法（出师未捷身先死啊</p><p>主要是如果转的话要补数分高代，有点得不偿失。</p><p>感觉他的话挺有道理的，我以前也是这样想的，可惜现在的我把那张文凭看的太重了。</p><div class="note info modern"><p>其实如果想学一点数学的话</p><p>可以试着选点课但不转过去，这样也不坏</p><p>因为你可以pf，防止获得很低的成绩或者挂掉</p><p>这样的话可能就是系统性稍微差一点</p><p>但是你可以挑自己最感兴趣的东西看，不用被培养方案缠着</p></div><p>最后那句话简直说到我心里去了，我不喜欢被束缚，我喜欢肆无忌惮地学自己感兴趣的东西，它能给我这个世界的另一种可能性。</p><h1 id="2022-x2F-10-x2F-12"><a href="#2022-x2F-10-x2F-12" class="headerlink" title="2022&#x2F;10&#x2F;12"></a>2022&#x2F;10&#x2F;12</h1><p>好了，上次写理力的时候一题都不对的原因被我找到了。我把相对运动和牵连运动搞混了，本来记混了后去翻笔记，结果发现笔记记错了……例如下，以示警醒：</p><blockquote><p>相对运动：动点相对于动系的运动</p><p>牵连运动：动系相对于定系的运动（刚体的运动</p></blockquote><p>上午去找了邓老师查卷，发现扣了好几分在数学规范性以及做题的严谨性上，比如没有写变量的范围，比如没有考虑端点的跳跃从而没有在最终结果中列出来……</p><p>还有好几分扣在了一个知识漏洞上：当已知的CDF跳跃时，也就是F(x)不连续时应该怎样求端点的概率或者x大于等于某个值这个区间的概率。</p><div class="note info modern"><details>    <summary>考试小结</summary>    1.CDF可以完整描述随机变量的特征（可以求某点的概率或者某区间的概率<br>    2.连续性随机变量在某点或者某线上的概率确实为0，但还要看题目所给的条件，比如如果题目已经告诉了X=Y，则它们恒等，故P(X=Y)=1，而不是0<br>    3.如果CDF连续（即F(x)连续，则可以通过直接积分来求概率密度f(x)。但如果CDF有跳跃点，则应该通过定义辅以极限来求某点的概率。如本来有P(X≤x)=对F(x)在-∞到x的积分，当F(x)在x=1处跳跃时，P(x=1)=F(1)-limF(x) （这里存疑，有点点忘了<br>    而算利用P(x≥2)=1-P(x≤2)+P(x=2)<br>    4.主要问题是忽略了有跳跃的CDF，本质是CDF还没有学透彻呜呜<br></details></div><p>今天训练的时候和求真一起，他们平均年龄似乎不超过17岁……甚至还有一个15岁的……</p><p>回想起我的15岁，在被大佬的打击下充满着对未来的迷茫。</p><p>真令人感叹。</p><h1 id="2022-x2F-10-x2F-13"><a href="#2022-x2F-10-x2F-13" class="headerlink" title="2022&#x2F;10&#x2F;13"></a>2022&#x2F;10&#x2F;13</h1><p>今天好累，一整天的课，还做了一下午的实验。</p><p>给龙老师发了个邮件，问他有关马克思关于生产劳动与非生产劳动的论述，看了他的回信后我觉得马克思主义真是一个值得好好揣摩的东西，希望以后有机会能够深入学习一点点。</p><p>上美术英语的时候随意地翻了翻info，发现srt开始报名了，于是一整节课都在看项目信息。因为我现在的科研经历为0，以后想要出国的话十分不利，但是最大的问题就是我报信息类的srt项目不如信息类专业的学生有优势，要是当初转系成功了就好了……</p><p>希望我报的这个项目能够接收我，感觉我已经不走运好久了……</p><p>唉，感觉最近诸多不顺。作业写不完，下周的理力小测还没有开始复习，初概上课的时候有点没跟上，大物看完了ppt后作业不太会写……</p><p>就不能给我个好消息吗呜呜呜</p><div class="note info modern"><p>是谁轻狂年少不忘</p><p>谁给我个信仰</p></div><h1 id="2022-x2F-10-x2F-14"><a href="#2022-x2F-10-x2F-14" class="headerlink" title="2022&#x2F;10&#x2F;14"></a>2022&#x2F;10&#x2F;14</h1><p>今天最大的收获就是刷小红书的时候刷到了一个以前我不知道的信息，像是突然间有了新的目标。</p><h1 id="2022-x2F-10-x2F-15"><a href="#2022-x2F-10-x2F-15" class="headerlink" title="2022&#x2F;10&#x2F;15"></a>2022&#x2F;10&#x2F;15</h1><p>麻了，初概和大物好难。这次的大物作业真令人破防，我的写作业过程：</p><p>过一遍ppt-&gt;写作业-&gt;发现不会-&gt;翻ppt+看学堂在线网课-&gt;觉得会了，继续写作业-&gt;仍然不会，并且连答案都看不懂……</p><p>初概也是，不过稍微好一点，只是有几个地方不是很清楚（但愿是这样的）</p><p>在考虑把初概记pf了</p><p>今天打马杯，和公管打。打的异常轻松（可能是因为对方刚建队甚至连规则都不太懂的原因），不过下周还要和苏世民打，那可是一场硬战。</p><p>晚上129合唱排练，感觉唱的嗓子好累。</p><p>有时候我觉得这些都在浪费我的时间</p><p>因为我本身还有好多作业没有写</p><p>但是转头一想，大学不就是应该丰富多彩多多尝试的吗？如果没有了这些运动、合唱等等活动，只是为了学习、为了考试，那和中学又有什么区别呢？甚至还不如中学呢。</p><h1 id="2022-x2F-10-x2F-16"><a href="#2022-x2F-10-x2F-16" class="headerlink" title="2022&#x2F;10&#x2F;16"></a>2022&#x2F;10&#x2F;16</h1><p>昨晚看了一篇很悲伤的小说，但我看到最美好的位置就没有看而是睡觉去了，因为有点不敢看。今早还是忍不住把它看完了，还是觉得好悲伤。</p><p>最怕的就是这种平平淡淡地述说着现实的无奈，像是在心上划了一道口子，不算大，但疼、难受。</p><p>也许过几天我就会忘记，也许它留给我的记忆会在某个瞬间突然被带起，让人唏嘘不已。</p><p>经常苦恼于共情能力太强，很容易被代入别人的故事之中，对别人的情绪变化过于敏锐</p><p>这样不好</p><p>“老是考虑别人 是没法实现梦想的”</p><p><img src="/2022/09/12/moyu2/a3.jpeg"></p><p>——————</p><p>发现博客图片不显示的原因了，应该在路径前面加个”.”</p><p>于是把所有文章中图片的插入方式都更新了一遍。</p><p>——————</p><p>在周末的末尾拥有了一小段什么都不用做的时间</p><p>希望下个周末或者下下个周末能空些时间出来，我可想去香山看红叶、去地坛公园看银杏了</p><div class="note info modern"><details>    <summary>今日摘抄</summary>    我已经分不清我到底是需要一个拥抱，喝十瓶碳酸饮料，看心理医生，一觉睡六个月，还是被车撞死。<br>    我搞砸过很多段本该圆满的关系，烂尾了很多个虎头蛇尾的故事。对于那些明显的暗示与讨好，我选择置若罔闻，对于我钟意的人，却常常爱得用力过猛。<br>    后来我开始明白，一个人一生中被极致喜欢的时刻，甚至都不会有碰到的巧合来得多。<br>    爱人是常态，被爱才是偶然。<br>    我时常怀疑世人对爱情的歌颂是不是有些夸大其词，他们拍电影他们写诗，他们不信命他们意难平，他们理想的国度里会有一人为另一人翻千山越万岭。<br>    所以之后我不再逢人便掏空自己，小心包裹好我的脆弱、敏感和多疑。它们生长在灵魂的那些缝隙里，不够大方，也不够敞亮，但它们构筑成一个完整而真实的自己。<br>    这样的自己，可能没有糖衣，甚至长出了迟钝的外壳，但一定会有人愿意融化我，正如他有朝一日愿意走出我隐藏的相册。</details></div><p>又过去了一周呢。</p><h1 id="2022-x2F-10-x2F-17"><a href="#2022-x2F-10-x2F-17" class="headerlink" title="2022&#x2F;10&#x2F;17"></a>2022&#x2F;10&#x2F;17</h1><p>看来周一比周末更适合睡觉（确信</p><p>有时候周末早上醒的较早就睡不着了，但周一就可以一直睡🤦‍</p><p>这次程设的oj题明显比上周的难，不过我写的时候很兴奋，尽管有个题debug了一个多小时都没改出来（我怀疑是模的用法不对，但我实在是不知道怎么改了</p><p>但是我可以很明确地感受到写程设题时我是快乐的，就算写不出来，就算oj过不了</p><p>这种写不出来和大物or理力写不出来的绝望不一样，我能够感受到心里的那份雀跃（可能也与每周的第一天休息的不错有关</p><p>和老杜约好了30号晚上出去玩，希望那个周末事不要太多，也希望不要因为疫情而泡汤。</p><p>时间过得真快呀，20年的网课竟然都已经是两年前的事了。</p><p>恍惚间我还能看到当时卧室窗外的阳光，照在我身上，晃得我眯起了眼睛。</p><p><img src="/2022/09/12/moyu2/a3.jpg"></p><p>跟风玩了一下，路过的省我没有算，感觉还是有好多地方都没去过。如果没有疫情，我本来可以周末去天津玩的……</p><p>还有西北，我可想去了，可惜一直没有机会。</p><p>在想明年去哪玩呢？只不过是河山大好啊。</p><h1 id="2022-x2F-10-x2F-18"><a href="#2022-x2F-10-x2F-18" class="headerlink" title="2022&#x2F;10&#x2F;18"></a>2022&#x2F;10&#x2F;18</h1><p>根据上学期在记pf上的惨痛经历，决定把初概记为pf了，本来期中就没考好，也不想那么push自己。至于后面的统推，再努力学吧。</p><p>感觉来清华最大的愿望就是期中能过平均分，这样相当于成功了一半。</p><p>可惜这么个小小的愿望都很难实现。</p><p>今天给孙教授发了邮件，希望他捞捞我的srt申请。然后发现报名人数涨到9人了……</p><p>我发了一大段话，还把我申请里面的话改了一段，结果教授就回答两个字“收到”，甚至都不带标点。也不知道同没同意，显得我十分🤡</p><p><img src="/2022/09/12/moyu2/a4.jpg"></p><p>晚上跑了这学期第一次长跑，结果没有点“做作业”，导致没有上传到阳光长跑的次数上去。算了算了，就当复健吧。简直退步了不少，2000米跑了11分55秒…….</p><p>决定以后尽量每天都抽一点时间出来跑步，不然体育真的会寄啊呜呜呜。</p><p>我讨厌阳光长跑，讨厌1500。</p><p>在小红书上刷到了秋天的圆明园，疯狂心动。然后在明天就去和写作业中纠结。</p><p>唉，人生而自由，却无时不在枷锁之中。</p><p>真想去感受下北平的秋啊。</p><h1 id="2022-x2F-10-x2F-19"><a href="#2022-x2F-10-x2F-19" class="headerlink" title="2022&#x2F;10&#x2F;19"></a>2022&#x2F;10&#x2F;19</h1><div class="note info modern"><details>    <summary>记录10.17程设课上指针的一点点知识</summary>    是谁，直到现在都不太会用指针<br>    int *p=NULL;<br>    int n=1;<br>    int *p=&n;<br>    *p=2;<br>    即p会输出n的地址，而*p会输出n的值<br>    int *a为指针，而int &a就是单纯地引用<br></details></div><p>以前的我什么都想要，什么都想去争。</p><p>现在的我什么都不想要了</p><p>时间可真残酷啊</p><p>它在我身上留下了不可磨灭的印记</p><p>可这过程却宛如大火烧身</p><p>疼的让人发不出任何声音</p><p>…………</p><p>最近越发体会到高中看到的一句话的正确性：</p><blockquote><p>曾经的我想要靠近月亮</p><p>后来失败了</p><p>月亮依旧遥远</p><p>可我却变成了看过光的人</p></blockquote><p>不管怎样，还是不能停止探索的脚步啊</p><p>对什么感兴趣就去试试，如果不适合就及时止损</p><p>“脚印会旧而梦还在走”</p><p>————————</p><p>决定明天下午去圆明园逛逛，实在是太美了，美到我失语</p><p>如果有人一起就好了</p><p>翻看以前的照片的时候，我觉得还是不应该只拍风景</p><p>还是应该留下些包含自己的照片，这样才会留下更深刻的回忆</p><h1 id="2022-x2F-10-x2F-20"><a href="#2022-x2F-10-x2F-20" class="headerlink" title="2022&#x2F;10&#x2F;20"></a>2022&#x2F;10&#x2F;20</h1><p>下午一个人去了圆明园，因为没打算去太久，也只奔着那一个景点去的。人果然多，哪怕是工作日的下午。</p><p>看到了画画的叔叔阿姨，画的可真好，基本上一年四季的景色都画出来了一份。我决定等我老了，就和大妈大爷一样去公园拍照、画画😁</p><p>忙里偷闲，不想写作业复习考试，尽管期中考试马上就要到了。越发觉得很多课无聊且没意义，或许是我太菜了，体会不到真正懂那门课的知识的快感。</p><p>不过今天心智探秘的小组讨论，好笑的是助教居然就约在我们旁边的研讨间哈哈哈哈。感觉挺有意思，每个人陈述自己的观点，然后可以在别人陈述的时候提出疑问或者反对，一来一回之间就算没能找到最后的答案，思维也清晰了不少。</p><p>似乎我已经好久都没有找到这种热忱了，看来以后应该多选一点偏文偏社科的课，不然我就要被理工科的严谨给淹没了（不是说这种严谨不好的意思。</p><div class="note info modern"><details>    <summary>今日摘抄</summary>    他们说，年少时遇见的人别太过惊艳<br>    可他们还说，真诚是冲锋陷阵的利剑<br>    于是我捧着真诚，一次次抹去底线<br>    就为了留住那一眼惊艳<br>    后来才发现，真诚也低廉<br></details></div><h1 id="2022-x2F-10-x2F-21"><a href="#2022-x2F-10-x2F-21" class="headerlink" title="2022&#x2F;10&#x2F;21"></a>2022&#x2F;10&#x2F;21</h1><p>爱死加缪了，等什么时候有时间把加缪的书好好地读一遍（flag又多了一个</p><div class="note info modern"><p>只要我还一直读书，我就能够一直理解自己的痛苦，一直与自己的无知狭隘、偏见、阴暗，见招拆招。</p><p>很多人说要和自己握手言和，我不要做这样的人，我要拿石头打磨我这块石头。</p><p>会一直读书，一直痛苦，一直爱着从痛苦荒芜里生出来的喜悦。</p><p>趁兴而来，尽兴而归，在一生中，这是很难得很难得一件事。</p><p>​                                                                                    ——加缪 《置身于苦难与阳光之间》</p></div><p>——————————</p><p>奖学金评选结果出来了，说实话看到结果时内心还挺平静的，只不过有点惆怅。</p><p>也许我应该放下对这些虚名的追求，而是去寻找自己真正喜欢、想要奉献一生的东西。</p><p>但是看到名单上没有自己的名字多少还是有点难过（有种历史重演的感觉……</p><p>算了，也无所谓，反正我觉得我现在一直生活在虚无之中，已经很少有那种“能触摸到地”的真实感了。</p><p>总感觉眼前的一切都披上了一层浓雾，让我看不清楚。</p><p>——————————</p><p>上马原课的时候感觉很难受，可能是因为教室里人太多了，很闷。上午上工热时状态也不太好。还有一周多就要考期中了，但我似乎没有以前的那种焦虑感，更多的是失措感。</p><p>什么时候开始，现实生活有点失去控制了呢？</p><p>——————————</p><p>晚上上心智探秘的时候觉得刘嘉老师讲的几个观点挺好的，恰好反映了我的现状。</p><p>习得性无助、胜利者效应…</p><p>“失败不是成功之母，失败是失败之母。”</p><p>“失败不能带来成功，只有小的成功才能带来更大的成功”</p><p>“你来到清华，发现你各方面都被别人打压，这时候你会怎样做呢？你应该去寻找并做一些能让你取得小的成功的事，慢慢积累”</p><p>……</p><h1 id="2022-x2F-10-x2F-22"><a href="#2022-x2F-10-x2F-22" class="headerlink" title="2022&#x2F;10&#x2F;22"></a>2022&#x2F;10&#x2F;22</h1><p>今天上午体测，可能是因为感冒比较重的原因，也或许是因为没有吃早餐有点低血糖，800刚跑完100米就有一点双手发麻，跑完了更是十分难受，心脏疼。</p><p>让我开始担忧几周后体育课上要测的1500了😥</p><p>下午打马杯，对抗苏世民。因为身体原因我没有上场。不过让我很高兴的是看了一场很精彩的比赛，并且在circle部分被拍下了一张很有灵气的照片！让我想起了高中运动会被拍下的那几张😭</p><p>这一年两年的，我到底经历了什么啊orz</p><p>感觉灵气散了不少，人也“憔悴”了很多，眼里的光也消了不少</p><p>希望这几年，或者过几年，能让我找回失去的这部分灵气吧。</p><h1 id="2022-x2F-10-x2F-23"><a href="#2022-x2F-10-x2F-23" class="headerlink" title="2022&#x2F;10&#x2F;23"></a>2022&#x2F;10&#x2F;23</h1><p>在pyq里看到zrjj发的一段话：</p><blockquote><p>生活在你清就像溺水一般，短暂的快乐就是浮出水面呼吸一口新鲜空气，随即就被浪潮一般的悲伤和压抑淹没。</p></blockquote><p>深有共鸣，我也想要逃离，这里真不是人待的地方，可能也与我太菜有关。</p><p>“清华就像是一袭华美的袍子，上面爬满了一事无成的芸芸众生。”</p><p>不过这学期还没有那么破防过，毕竟开始的时候就对自己说好了，遇到问题就想办法去解决，不要破防，不要逃避。</p><p>就算清华和我曾想象不一样（或许真正的大学都与高中生心里的大学不一样），好好利用它的资源就行了，毕竟它一直在这里，而我终将离开。</p><p>————————</p><p>srt报名的最后一天，老师还是没有通过我的申请🙃如果都是未审核状态倒还好，关键是报名的9个人中有一个已经被接收了……</p><p>又有点焦虑了，明明发了邮件，该不会到时候不通过我吧（（（</p><p>不要啊</p><p>有亿点点社恐人只能靠这种官方报名项目来接近科研了☹</p><p>————————</p><p>从五教的窗外看去，学堂东边的那条路上栽的树居然已经被染成了橙色、黄色。还有点惊讶，因为在我的印象里它一直是绿油油的。不过我的印象也只是上学期，快到夏天的时候。</p><p>今天是霜降，秋天的最后一个节气，没想到我最喜欢的秋天也要过去了啊。</p><p>我还没去看那金灿的银杏、火红的枫叶呢</p><p>要期中了，尽管我一点也不想复习。不知道第九周后出校还能看到晚秋的景色吗？</p><p>————————</p><p>老妈说“看到好的就想帮你买”</p><p>老爸说“喜欢什么就买什么，不要亏欠了自己”</p><p>也许我一直都在被爱着，只是这些爱太过朴实无华，让我差点忽略了它们。</p><h1 id="2022-x2F-10-x2F-24"><a href="#2022-x2F-10-x2F-24" class="headerlink" title="2022&#x2F;10&#x2F;24"></a>2022&#x2F;10&#x2F;24</h1><p>孙老师的这个srt项目是真的卷，感觉和面试一样：由他的一位博士生学长给每个同学通过邮件发了个问卷，上面除了填写基本信息外居然还要填项目经历、为什么参加项目等等。</p><p>算了，佛了。如果不能被选上我就再想想别的方法吧，最近真的为科研焦虑的很。</p><p>——————————</p><p>晚上跟老杜心血来潮地去吃了韩料，本来我们已经约好了周五晚上出来吃饭，结果她今天心血来潮在美团上抢了一张秒杀券，而我刚好周一较闲晚上没课，故我俩一拍即合。</p><p>不封校的好处就是可以随时随地的出去吃个饭，顺便散个步，买点东西。有朋友的好处就是有人和你一起对学习对生活吐槽一番，交流一下对未来的想法。</p><p>和朋友在一起的感觉真好。</p><p>——————————</p><p>晚上刷推送时看到计算机系出了一个学术新星计划，本来想点进去看看的，结果需要它们内部ID密码，真羡慕，上次有个选课的指导也是需要内部密码才能看。</p><p>感觉清华不同系之间的隔阂真的好大。</p><h1 id="2022-x2F-10-x2F-25"><a href="#2022-x2F-10-x2F-25" class="headerlink" title="2022&#x2F;10&#x2F;25"></a>2022&#x2F;10&#x2F;25</h1><p>北京的甜品都好贵，面包都是大几十，几块的甚至十几块的几乎没有，并且之前点过的几家都不太好吃。</p><p>对我这种嗜甜如命的人来说太不友好了😥</p><p>好想念家那边的偏恋、酵醇、里面东西、豆花妈妈……</p><p>真的 有点想家了</p><p>————————</p><p>记录今日写程设作业时的收获：</p><ul><li>string类的每一位为字符类型，比较大小可采用m[i]&gt;’9’;</li><li>若字符串里储存的是数字，则应该减去’0’而不是’a’。如m[i]&#x3D;m[i]+n[i]-‘0’;</li><li>判断时可以把情况少的放在前面，这样&amp;&amp;符号会自动把后面的砍掉</li><li>冒泡排序：遍历所有的数，每一轮遍历中都判断相邻两个数的顺序。故有两个循环，同时要注意第二个循环条件为j&lt;n-1。</li></ul><p>————————</p><p>晚上的初概又只听懂&#x2F;跟上了一部分😭主要是每到这个时候我总会很困，为了不睡着我只能刷手机，然后就有点错过了老师的讲课……</p><p>就算记了pf也不能这么任性啊喂</p><p>今天晚上给cjy打了一个多小时的电话，安慰她。</p><p>不由得感叹，爱情真是个相当玄乎抽象的东西。</p><p>虽然我很忙，虽然要到期中了，但我觉得在朋友上花的时间是值得的，忙和敷衍永远是两回事。</p><p>我要烦心的事情太多了，没有时间分给爱情了。</p><p>只不过有时候也会挺沮丧的，我努力做个善良的人，却总是差点运气，追求的东西总是得不到。不知道什么时候才会转运，如果真的有神明的话，请善待善待我吧😥</p><h1 id="2022-x2F-10-x2F-26"><a href="#2022-x2F-10-x2F-26" class="headerlink" title="2022&#x2F;10&#x2F;26"></a>2022&#x2F;10&#x2F;26</h1><p>昨晚刷v+的时候明明记下来零点发新歌，结果赶due忘记了……</p><p>导致我今早吃早餐的时候才听</p><p>不得不说，这词很有许嵩的风格，一看就是他写的。</p><p>曲调也好听，配合上词有一种美到凄凉的感觉。</p><div class="note info modern"><p>叹一帘疏雨，</p><p>不如弹一曲抚心。</p></div><p>不知为何想到了《千古》中的“若流芳千古，爱的人却反目”。</p><p>————————</p><p>早上改程设那道生日相同题改了好久，还是有3个测试点过不了，极度怀疑是输出时候换行的问题（但是我改不出来，sigh</p><p>剩下的时间把上次搜集的心智探秘的观点整合了一下，画出了思维导图。</p><p>任老师约我明天见面聊聊天，其实我是觉得没什么可聊的，况且我明天的课很满，还有小组讨论，只能硬挤出来一点时间。</p><p>说实话，我不太希望辅导员或者老师来找我，到底是不希望让快要好了的伤疤再次裂开。毕竟可能我已经放下了，他们却逮住不放。</p><p>孙教授还没有同意我的srt申请，估计是没戏了，看来我得另谋出路了唉。</p><p>—————————</p><p>在四教自习的时候听着歌，突然就很想哭。</p><p>我一向不喜欢迟来的东西，没有在我最喜欢最需要的时候给我，而是过后好久才有别的补偿或者就算得到原本的那样东西，我也不稀罕了。</p><p>翻了翻最近写的日记，发现有好多隔断。说实话，我觉得隔断越多，感觉我写的就越意识流、情感的波动就越强烈。</p><p>可能是要期中了，还是有点心神不宁吧。</p><p>明天还要去和任老师聊天，唉，烦。</p><p>心情不太好的时候就喜欢一个人藏起来，不想和任何人交谈。</p><h1 id="2022-x2F-10-x2F-27"><a href="#2022-x2F-10-x2F-27" class="headerlink" title="2022&#x2F;10&#x2F;27"></a>2022&#x2F;10&#x2F;27</h1><p>今天的分光计实验好难</p><p>调试器材就调了半天，最后找谱线又找了半天</p><p>心态真的有点崩</p><p>——————————</p><p>任老师问我在哪个老师手下做科研，我说我没报哈哈哈</p><p>她问我为什么没有报，我拿成绩随便搪塞了一下，因为说不出不报是为了跑路这句话。</p><p>也不想在她问我以后是考虑直博还是读硕的时候说我其实是想出国而不是保研。</p><p>感觉很多事情都没有必要说，说了又能怎么样呢？</p><p>也无法改变我目前的局势吧。</p><p>——————————</p><p>心智探秘小组讨论在我讲述自己的思维导图时突然理清了之前在画思维导图时没想清楚的一个问题。那种感觉是真的好，很久没有过这种自己理着理着或者与别人讨论着就顺了、突然明白的感觉了。</p><p>那瞬间似乎就明白了刘嘉老师让我们进行刻意训练的目的。顺便夸夸我小组的组员，这次抽盲盒的体验是真的不错，大家都很认真，往往每个人的思维导图都做的很好，讲解自己观点时所花的时间也会远远超过5分钟（第一次讨论了1h10min，第二次讨论了1h30min……，和他们交流时我也能学到不少东西。</p><h1 id="2022-x2F-10-x2F-28"><a href="#2022-x2F-10-x2F-28" class="headerlink" title="2022&#x2F;10&#x2F;28"></a>2022&#x2F;10&#x2F;28</h1><p>好不容易鼓起勇气报个科研项目，结果被学长委婉地拒绝了。</p><p>说实话，我其实一开始就觉得他不是想语音交流了解下我的情况，而是为了找理由拒绝我😞</p><p>尽管他没有把话说死，而是说不能在srt报名上接受我，因为审批名额有限，但我也可以跟着做，只不过要先完成入门的三个项目。他给我发了文档，说我想清楚了可以微信跟他说。</p><p>我看了文档，那一瞬间其实是有点退缩的，我不知道能不能做出来（能不能做好另说），不知道我有没有时间，而且现在又正值期中考试的节点。</p><p>到底还是不太相信自己的能力😞</p><p>————————</p><p>晚饭和老杜一起去吃了小吊梨汤！</p><p>太幸福了😭有朋友、有美食，回去路上的风似乎都温柔了不少。</p><p>和老杜认识快8年，一起过了5个生日，一起旅游了5次。</p><p>愿我们还有岁岁年年。</p><h1 id="2022-x2F-10-x2F-29"><a href="#2022-x2F-10-x2F-29" class="headerlink" title="2022&#x2F;10&#x2F;29"></a>2022&#x2F;10&#x2F;29</h1><p>早上看了一下今年特奖候选人的材料，又一次真切认识到了自己的菜。</p><p>迄今为止什么成果都没做出来，甚至都没有开始做。没有奖项，连gpa和排名都拿不出手</p><p>感觉自己好失败啊呜呜呜</p><p>可能偏轨太久了，不知道是继续前进，还是回到开始的轨道上了。</p><h1 id="2022-x2F-10-x2F-30"><a href="#2022-x2F-10-x2F-30" class="headerlink" title="2022&#x2F;10&#x2F;30"></a>2022&#x2F;10&#x2F;30</h1><p>今天终于把程设的第一题最后三个点过了，最后用了一个十分不优雅的方法。</p><p>不过看到accepted的瞬间还是很开心的</p><p>这题我至少写+debug了4小时，其中大部分时间都在debug😩</p><p>今早又鼓起勇气给学长发了消息想加入，同时问他入门任务有没有完成时间限制，毕竟那些东西对我来说太新了，我要新学好多东西才算刚入门。</p><p>我不知道其他人是不是这样，还是因为我太菜的缘故呢？</p><p>不过学长还没有回复我ww</p><p>既希望他回复，又害怕看到他回复。</p><p>我真是个矛盾的人啊。</p><p>————————</p><p>A new start！！！</p><p>放上姜甜写给我的那句话：</p><div class="note info modern"><p>就算重来一次，我还是会伸手去捞水中的碎月。</p><p>一切都是虚的，</p><p>但是没关系。</p></div><p>学长说去年有同学做入门任务用了半年，于是我就放心大胆地冲了。</p><p>大不了寒假多干点活（</p><p>我感觉我还挺满意我现在的状态的，尽管也会焦虑、也会emo、也会浪费时间甚至还不少</p><p>但是我能明显体会到以前不具有的那种松弛感。</p><p>这个词是我最近刷到的，我挺喜欢这个表述。</p><p>相比大一，现在的我更多了一点点从容。</p><p>明天好好复习工热，我就不信了明明觉得学的还行复习的也不错就是考不好呢。</p><p>等工热一考完就开始复习初概，同时其他作业也不能漏，不然周末又要复习大物又要赶due会很惨的。</p><h1 id="2022-x2F-10-x2F-31"><a href="#2022-x2F-10-x2F-31" class="headerlink" title="2022&#x2F;10&#x2F;31"></a>2022&#x2F;10&#x2F;31</h1><p>程设整理：</p><p>筛法复习</p><p>运用：对1~100的每一个数求欧拉函数</p><p>————————</p><p>今天上程设时学到了好多东西，果然C++常用常新。王老师讲程设给我的感觉和马老师是不一样的，虽然两者都讲的很好，但我更喜欢王老师讲的。感觉学到的东西更多，不过也有可能是学分多1分的原因。</p><p>今天对数组与指针又有了新的认识，等有时间整理一下。</p><p>理力一上完就一直复习工热，感觉课本上的作业题都还好，但一旦写试卷上的题就总有一点知识漏洞，难度不是一个量级的。</p><p>明天下午就要考了，看在我复习的这么认真这么全面的情况下保佑我不要犯低级错误拿个高分吧。</p><p>下午去了系馆那条路看银杏，阳光很好，有好多人在那拍照，无论拿着手机还是相机。果真的像老舍先生所说的“北平之秋，便是天堂。”</p><p>在纠结付相机尾款的事，还没告诉爸妈，虽然这一年通过各种途径攒了点钱，但是与我想买的那款相机相比还差很多，真的会肉疼😥</p><h1 id="2022-x2F-11-x2F-2"><a href="#2022-x2F-11-x2F-2" class="headerlink" title="2022&#x2F;11&#x2F;2"></a>2022&#x2F;11&#x2F;2</h1><p>最近被各种考试复习和作业ddl打的晕头转向🤒</p><p>今晚复习初概的时候发现我把分数分布记错了，只要期末考30分我就可以p了哈哈哈哈，顿时就没那么慌了。可以多留点时间复习大物、理力和美术英语。</p><p>说实话，我已经不太关注别的事了，因为我自己的事都有点应接不暇，没有多余的精力给其他事物了。</p><p>希望期中能够考好一点呜呜呜，尽管工热已经寄了，第一次理力小测也寄了，我感觉我不擅长考试了。期中考好一点期末的压力就没那么大了。</p><p>下周三体育课还要试测1500，鲨了我吧。这学期迄今为止长跑我就跑过3次😅</p><p>恰巧今天喝了咖啡，感觉这东西不适合我，每次喝完感觉身体很难受。</p><p>今天体育课扔飞盘的时候发现上周末练出来的正手手感又没了，扔的几个盘都很烂，看来以后打比赛还是做什么之前要多扔扔，把手感先扔出来。</p><p>不管怎么说，还是希望，能有一点点好运吧。</p><h1 id="2022-x2F-11-x2F-5"><a href="#2022-x2F-11-x2F-5" class="headerlink" title="2022&#x2F;11&#x2F;5"></a>2022&#x2F;11&#x2F;5</h1><p>11月3日晚考完初概后，觉得自己将它记为pf真是一个正确的选择。</p><p>果然人还是不能对自己太过自信。</p><p>11月4日晚比较可怕，不知为何，我像是突然间被抽去了所有能量。不是力气，是能量。</p><p>我似乎突然失去了对一切的兴致，觉得双脚发麻，手在颤抖、疲软无力。</p><p>那种不知为何很想流泪的感觉又来了，sigh</p><p>明明我已经很久都没有这种感觉了，自从暑假以来我的情绪总体很平静，也许是和朋友待在一起的时间比较多的缘故。</p><p>应该是期中压力太大了，下周考试更多而且更重要，不能摆烂啊啊啊啊！</p><p>今天上午起床后继续写程设剩下的那道题，还是没写出来，后5个点超时了，改了半天还没有改好，有种从心底涌出来的荒凉感。</p><p>——————————</p><p>今天跟阳阳聊了半天（虽然她让我叫她乔乔，不过在这应该没事哈哈哈哈</p><p>再一次感受到了她身上的那种能量，每次跟她聊完都重新充满了干劲😄</p><p>让我对最近刚看完的《那不勒斯四部曲》有了新的感悟，就像莱农从莉拉身上汲取的那种能量一样</p><p>既然可以往前走，就应该往前走</p><p>不可以因为这点事停下来</p><h1 id="2022-x2F-11-x2F-6"><a href="#2022-x2F-11-x2F-6" class="headerlink" title="2022&#x2F;11&#x2F;6"></a>2022&#x2F;11&#x2F;6</h1><p>今天破了早上起床时间的记录…</p><p>剩下的时间都在复习大物，大物课本看的我困得眼皮都抬不起来，不过好歹是把考试范围全都过了一遍，感觉梳理一遍后对那些公式记得更清楚了，之前写作业的时候总是不知道用什么公式，或者大致知道要用哪个公式但是需要翻PPT才能把它写出来。</p><p>好累😩回到宿舍什么都不想干，只想听听歌看看小说。</p><p>说实话，我一直都坚信人不是活一辈子，而是活几个瞬间。</p><p>所以我一直都很珍惜那可能的瞬间，也拼命地想把它们记录下来。</p><p>可惜浮光掠影，仓促地抓不住。</p><p>想快点考完期中了，想和老杜洋子约饭出去玩</p><p>想k歌，想用摄影记录下秋天</p><p>想摆脱期中复习的束缚，去做点自己想做的事。</p><h1 id="2022-x2F-11-x2F-8"><a href="#2022-x2F-11-x2F-8" class="headerlink" title="2022&#x2F;11&#x2F;8"></a>2022&#x2F;11&#x2F;8</h1><p>晚上上课，真的好容易犯困…</p><p>统推老师说由于这学期只有15周，所以我们要3周上完考期中，再上完三周考期末…</p><p>着实有点难蚌。</p><p>今天突然有了一个新思路，决定不报名英华学者的申请了，虽然费用全免对我来说十分具有吸引力，但是毕竟我想去的是美国不是英国。之前想着如果申请交换的话至少一年，一学期感觉体验不到什么，今天突然想到可以申请春季学期的交换，顺便留在那把暑研做了再回来，这样至少可以节省一学期的学费和生活费（）。不过目前这只是个想法，还不知道可行度。</p><p>尽管我觉得，我现在应该多关注眼前的事，比如考试…</p><p>工热考的很烂，但我并不打算退课😂而是决定把期中比例降低到10%，头铁，想试一试。</p><p>希望明天的大物考的顺利，不然我真的会觉得我学不会物理了……</p><p>等期中考完就开始学习新东西。</p><p>应该在赶完眼前的这波ddl后能有一段短暂的喘息时间。</p><p>我是真的，需要好好休息一下了，好想一觉睡到中午，或者睡一下午。</p><p>好想睡觉。</p><h1 id="2022-x2F-11-x2F-9"><a href="#2022-x2F-11-x2F-9" class="headerlink" title="2022&#x2F;11&#x2F;9"></a>2022&#x2F;11&#x2F;9</h1><p>因为身体原因今天的1500不用跑了😊管它呢，后面再说吧。</p><p>考完大物了，感觉不太好，如果老师不调分的话我就又只能退课了…</p><p>考了好多后面的电磁感应麦克斯韦方程的知识，而这部分我恰好复习的比较少，属实是不太幸运了。</p><p>可能后半学期的大物都要跟着去上了，wxb老师提前发了作业让我们感受一下，我看完后觉得如果我不去听课我应该不会写😂</p><p>本来因为要跑1500，这星期都限制了咖啡因的摄入，因为每次我一喝咖啡就会手脚发软，全身都不对劲。结果现在暂时不用跑了，直接点了一杯奶茶哈哈哈，虽然本来就准备跑完了晚上点的。</p><p>真的，非常不喜欢1500，回想起初中跑800我都觉得十分痛苦，虽然跑的很快，但是很痛苦，现在居然要测1500，要跑2000，简直无法想象。</p><p>不知不觉间，我的下限被拉高了，也不知道是不是一件好事。</p><p>明天还有理力小测，美术英语的听写今晚再背背，我倒不是很担心。自从初中开始，我就不害怕报听写了。</p><p>————————</p><p>被工热助教找上门来了😥微信加我问我有没有什么困难需要帮助。</p><p>唉，感觉没什么困难，结果一考试就出问题，不仅是工热，其他科目也一样。</p><p>上大学后，我似乎不适合考试了。</p><p>大清又封了，改报备为审批了。还想着等明天考完期中出去玩玩呢。</p><p>就是这么不幸。</p><p>明天的理力小测，希望…</p><p>算了，希望是无所谓有无所谓无的。</p><h1 id="2022-x2F-11-x2F-10"><a href="#2022-x2F-11-x2F-10" class="headerlink" title="2022&#x2F;11&#x2F;10"></a>2022&#x2F;11&#x2F;10</h1><p>考完期中了（死掉了</p><p>烦心事就不说了，记录下开心的事：</p><p>心智探秘小组讨论时被助教夸了，助教说应该选我们上去讲，我们比他选的上一组讲的好多了。在我们每一个人讲完后问了我们的名字，说这次作业一定是A（希望是这样。还直接说下次我们组参与有助教的讨论时直接为内定上台pre人选。</p><p>这种乐在其中并且被人认可的感觉真好。</p><p>晚上打开了知乎，居然刷到了张益唐张老师的回答，文字朴实，字里行间充满了他对数学的热爱，原来真正热爱数学是这个样子，不为名利，只是热爱。</p><p>“庾信平生最萧瑟，暮年诗赋动江关。”</p><p>突然被打动了，“最萧瑟”，“暮年”，“动江关”。</p><p>人生这么长，不要太焦急。</p><p>但人生又这么短，希望我也能早日找到自己真正喜欢的事物。</p><h1 id="2022-x2F-11-x2F-13"><a href="#2022-x2F-11-x2F-13" class="headerlink" title="2022&#x2F;11&#x2F;13"></a>2022&#x2F;11&#x2F;13</h1><p>昨晚看了几篇喜欢的作者写的小说，喜欢她细腻的文笔，人物的心理描写的很好，情节也很好，尽管最后的结局是好的，过程却让人流泪，看的时候有一种心被扎了的疼痛，看完后也是久久缓不过来。</p><p>也许是，某个心理描写，或者某个情节、某句话，让我联想到自己了吧。</p><p>比如：</p><div class="note info modern"><p>这世上的每一个人，除了自我救赎外，把其他任何人当成救赎，都是无耻的。</p></div><p>果真是，带刀子的糖更让人刻骨铭心。</p><p>——————</p><p>最近压力好大，明明考完了期中，但一想到有那么多作业，就挺窒息的。</p><p>想退课，但又觉得应该坚持下去。</p><p>不知道应该怎么办。</p><p>感觉现在的我是一个外表看起来挺正常，但其实状态很不对劲的人（大学生哪有不疯的hhhh。</p><p>——————</p><p>这个周末没怎么写作业，尽管每天睡觉前都会焦虑自己还有多少作业没写，却真的不想写作业。考（陪跑）数学竞赛、两场马杯飞盘比赛、学生会系领导接待日问卷整理、班级聚餐、飞盘队外卖局+酒局（but我全程喝AD钙奶🤪……</p><p>还是很开心的</p><p>在考虑适当地退课了，综合了后期的一些大作业还有作业的难度等情况，感觉有点顶不住了。还是先在你清活下来再说吧。</p><h1 id="2022-x2F-11-x2F-14"><a href="#2022-x2F-11-x2F-14" class="headerlink" title="2022&#x2F;11&#x2F;14"></a>2022&#x2F;11&#x2F;14</h1><div class="note info modern"><p>1.结构变量赋值相当于内存拷贝。</p><p>to be continued…</p></div><p>——————————</p><p>看来我真的不适合学物理</p><p>不想挣扎了</p><p>随便吧，无所谓了</p><p>后期好好听课，毕竟我觉得王老师讲的真的是挺好的，不太想退课，尽管这个决定可能会让我本就不高的绩点雪上加霜</p><p>不过说真的，我不知道我到底能学会哪门课了，好难过，怎样才能实现我的目标啊（sigh</p><h1 id="2022-x2F-11-x2F-15"><a href="#2022-x2F-11-x2F-15" class="headerlink" title="2022&#x2F;11&#x2F;15"></a>2022&#x2F;11&#x2F;15</h1><p>意外地发现清华有wps的会员，直接登info账号就可以了。</p><p>同时发现wps比office好看（</p><p>今天考虑再三，还是把统推给退了，从心里对它的作业就有点抵触，课是好课，可惜我没有那么多时间。好几门课都有大作业，感觉我需要从现在开始push几门课的大作业进度了。</p><p>明天体育课还要测1500…</p><p>妈耶，一想到这事我就好痛苦，每次一站上跑道我的腿就有点发软。</p><p>希望，不要比去年的差太多吧。</p><p>——————————</p><p>今天下午到东操跑了跑步，8分钟左右……都没有及格，虽然去年平时练习的时候我也是这个水平，但一想到要跑步还是特别发怵。</p><p>最近意识到了一件事：</p><p>和别人交流可以让我获得能量，并且这种交流如果是我主动去找对方的话更有效。</p><p>我既可以输出，也可以输入。而不是像大多数时候想着敷衍。</p><p>感觉上个大学，到现在，我体内的能量都要耗完了🥀</p><p>这种能量的消耗从疫情刚开始，也就是2020年初的时候开始的，高三除八省联考那段时间都很好，直到大一的期中考试，考完机图后我就隐隐约约感受到体内能量的流逝。</p><p>这是一种特别无奈特别茫然的感觉。</p><p>就像一直充不了电的手机一样，无力、痛苦。</p><p>忘了是哪位名人说过的一句话：人的痛苦，本质是对自己无能的愤怒。</p><p>如今看来是很对的。</p><p>没有了能量，我似乎也失去了以前和雪雪坐公交跨越大半个城区去看多肉的兴致。</p><h1 id="2022-x2F-11-x2F-16"><a href="#2022-x2F-11-x2F-16" class="headerlink" title="2022&#x2F;11&#x2F;16"></a>2022&#x2F;11&#x2F;16</h1><p>长跑跑了7分23秒…比去年退步了半分钟😂</p><p>本来第一圈跑的还挺轻松我还以为会好一点，应该是最后一圈实在跑不动了速度没有提起来。算了算了，开始阳光骑行（）</p><p>体育课上打比赛，我们队是冠军！只有在这种水平的比赛中我才可以当handle哈哈哈哈</p><p>晚上写程设题的时候，第三题我觉得我写的没问题，但样例输出不对，放到oj上跑一遍，居然过了哈哈哈哈哈</p><p>还有这种好事，想当初上学期的离散实验题我的常态可是样例能过但oj一个点都过不了的那种。</p><p>相机终于到了！昨天催了一下人工客服今天就到了……那我等的那两星期是在干什么……</p><p>早知道早一点问老妈京东怎么与人工客服对话了</p><p>等周末或者什么时候有时间的时候好好研究一下说明书</p><p>今天跑完1500只想躺着，不想动脑子，所以也没有写什么作业</p><p>退掉统推之后顿时感觉压力小了不少</p><p>第十周都已经过了一半了，大作业必须要开始了，工热大作业我就自己一个人自由摆烂算了，不想卷也没必要卷。程设大作业还没有找到组队的，二缺一，唉，希望有人来找我。</p><p>美术英语的ppt我已经做好了，多熟悉几遍后争取下周找老师把pre做掉。剩下的马原、心智探秘的论文再找时间吧。</p><p>祝我好运。</p><h1 id="2022-x2F-11-x2F-17"><a href="#2022-x2F-11-x2F-17" class="headerlink" title="2022&#x2F;11&#x2F;17"></a>2022&#x2F;11&#x2F;17</h1><div class="note info modern"><p>我们闭着眼睛拥抱。</p><p>黑暗里有一条红色的路，路上全是对方的影子。</p><p>影子说，礼成。</p></div><p>今早七点多同意了一个同学组队的好友申请，结果他回复我的时候说一个小时前他已经组好队了？？？</p><p>他昨晚12：30跟我发的……</p><p>还好傍晚的时候又有同学来找我组队了，程设大作业队伍终于组起来了orz</p><p>等周六上课的时候开个小会分下锅</p><p>——————————</p><p>这周程设第四题debug了一个多小时，从40分变成了50分……</p><p>有点心累</p><p>——————————</p><p>今天的小组讨论比较仓促，不过本身题目出的也比较敷衍。</p><p>理力听的懵懵懂懂，想睡又因为穿少了冷加上跑完1500后鼻子的刺激感而睡不着。</p><p>美术英语课倒还听的可以，老师居然没有看出来我上次听写的一个错误，还得到了老师送的一本书。</p><p>没有实验的周四下午真好。</p><p>退了统推之后晚上没有课，在那耐心地debug以及写理力作业。</p><p>中午回宿舍把攒下来的衣服都洗了，换了床单被套，然后睡了一个多小时，准确地说睡着的时间只有半小时，剩下的时间就在床上躺着。</p><p>晚上自习完回宿舍洗了头，吃的苹果很甜。</p><p>今天跟两位很好的朋友交谈甚欢。</p><p>我想，我还是爱着这泥泞且破碎的人间。</p><h1 id="2022-x2F-11-x2F-18"><a href="#2022-x2F-11-x2F-18" class="headerlink" title="2022&#x2F;11&#x2F;18"></a>2022&#x2F;11&#x2F;18</h1><p>今天的开心事：换了一种方法，一下子把程设第四题写出来了，十分舒畅。</p><p>明天周六，但是调休…干脆以后别放国庆假了吧，调休又麻烦，还容易让人心情不好。</p><div class="note info modern"><details>    <summary>今天看到很有感触的话</summary>    鲜衣怒马少年时最让人心动，也最难忘。<br>    很多人说年少的欢喜就应该留在年少，破镜重圆不过是梦一场。<br>    分离的岁月，改变的自己，只会让纯粹的美好变得不堪回首。<br>    但我们又会有多少可以回头的机会？<br>    长大的人啊变得畏手畏脚，不去追逐没有结果的爱情，害怕付出得不到回报。<br>    但我们为什么不纯粹一点呢？<br>    在可以选择的时候尊重我们的内心，不论结果，只求不悔。<br>    没准年少和你牵手的少年，也能在暮年与你共看夕阳。<br>    ......</details></div><h1 id="2022-x2F-11-x2F-19"><a href="#2022-x2F-11-x2F-19" class="headerlink" title="2022&#x2F;11&#x2F;19"></a>2022&#x2F;11&#x2F;19</h1><p>九点多起床去上程设，老师讲文件，我基本没听进去什么，课后还要花点时间整理整理，感觉已经欠了三节程设课的整理了orz</p><p>程设课上还有理力课前我都在捣鼓给博客加入个人简历页，成果还不错，见<a href="https://liuydd.github.io/html/Site/Resume.html">RESUME</a></p><p>也算不上简历，毕竟看上去就不太常规，并且亮点很少（几乎没有</p><p>只能说是先挖个坑，待以后慢慢填。</p><p>————————</p><p>花了大半天把欠下来的程设整理完了，发现居然够开一篇新文了</p><p>C++果然常学常新，直到现在我感觉我对C++的掌握还十分浅显</p><p>晚上面了一个乡村振兴社会实践的招募，感觉和我一组的学长学姐都好强呜呜呜</p><p>算了，别太在意结果，如果这个凉了我再看看能不能报别的</p><p>实在不行的话我就自己出去放放风吧，毕竟寒假还要备考托福</p><p>摘抄一个昨天《心智探秘》课上听到的：</p><blockquote><p>“’何为不朽？”</p><p>“太上有立德，其次有立功，其次有立言。虽久不废，此之谓不朽。”</p><p>——《左传》</p></blockquote><p>我要的，从来不是不朽。人这一生，活的尽兴，已十分不容易。</p><p>人生而自由，却无时无刻不在枷锁之中。</p><h1 id="2022-x2F-11-x2F-20"><a href="#2022-x2F-11-x2F-20" class="headerlink" title="2022&#x2F;11&#x2F;20"></a>2022&#x2F;11&#x2F;20</h1><p>记录一下昨天实践面试前准备的自我介绍：</p><div class="note info modern"><details>    <summary>实践自我介绍</summary>    大家好！我叫刘雅迪，来自清华大学能源与动力工程系。<br>    爱好摄影、听音乐、弹钢琴、玩飞盘等<br>    报名本次实践既是出于对苏州的喜爱，也是因为想为乡村振兴做点什么<br>    所以十分希望能够通过本次面试<br>    和大家一起快乐实践<br>    想法：我主要是对分析乡村中小学教育的发展现状比较有想法，<br>    因为我本身是我们学校教育公平促进协会的一员<br>    所以我觉得我们可以多调研几所学校，然后将这些学校相互对比，<br>    同时与教育资源相对丰富的城镇学校对比<br>    不仅需要调研当地的硬件设施，还应该关注如师资水平等的软件部分<br>    同时需要关注当地青少年的精神状况<br>    为他们提供我们力所能及的帮助<br>    由于以前没有参加过乡村振兴的实践，所以不太清楚别的工作的要求<br>    但我觉得我能够胜任本次实践的宣传工作。<br>    我平时就很喜欢摄影，也拍出了不少自己满意的照片，<br>    会剪辑视频，上传B站的视频播放量最高的超过2000<br>    十分熟悉公众号推送及排版工作，因为基本每隔两三周就会做一次推送<br>    也做过几篇关于活动预告或者活动总结的推送<br>    所以我宣传的相关经验很丰富<br>    此外，暑假曾参与系里的实践，负责采访部分，<br>    所以如果本次实践需要访谈的话<br>    我也能够负责<br>    至于实践时间的话我整个寒假应该都有空，所以应该都行<br></details></div><p>————————</p><p>收到的第一个好消息：乡村振兴的实践过了！不枉我熬夜做作品集简历，花大力气准备面试的自我介绍。</p><p>今天上午开班会后顺便和赵导谈了谈话，起因是入党谈话，然后聊着聊着就聊到学习生活上去了，等有时间写一写，我觉得这是迄今为止我最受启发的一次谈话。感觉赵导的眼光真是毒辣，一下子就把我看的很透。</p><p>下午飞盘马杯决赛，打到universal后还是以一分惜败苏世民了，很遗憾。</p><p>晚上聚餐的时候艺姐说了一句话我很有感触：</p><p><strong>胜利会掩盖很多不足，但失败不会。</strong></p><p><strong>失败会逼着我们成长。</strong></p><p>也许不光竞技体育是这样，人生不也是吗？</p><p>失败了又如何呢？至少我曾努力过，也会一直朝着我心中的月亮的方向努力。</p><p>谁说在追逐月亮的道路上自己不会闪闪发光呢？</p><p>人生何处不青山。</p><p>顺便说一嘴，20：40左右我太无聊了，就和安妮还有syy提前走了，结果21：40的时候得知李兆基被封了，因为之前有一个教职工进去了，结果他的核酸复核阳性。</p><p>属实幸运极了。</p><p>就是不知道会不会因此被隔离，不过次密接应该也没事吧…而且这两天正好是工热实验的时间，就我们几个学工热的班级就有一百多人进去了李兆基，这每天的人流量得有多大啊……</p><p>我还是很希望学校能给pf的机会，上学期就是没有把握好机会，被狠狠地上了一课，gpa也掉了几个点。</p><p>不过如果不给，我也只能放弃幻想准备战斗了。</p><h1 id="2022-x2F-11-x2F-21"><a href="#2022-x2F-11-x2F-21" class="headerlink" title="2022&#x2F;11&#x2F;21"></a>2022&#x2F;11&#x2F;21</h1><p>一觉醒来，在五教坐着准备上课前，突然得知有七栋宿舍楼被封了</p><p>原因是核酸检测出了混管阳性</p><p>这一天天的，我都觉得无所谓了。</p><p>从害怕到厌烦再到无所谓。</p><p>只要我的日常生活没受到太大的影响，无论怎样我都能接受。最不能接受的就是封寝，那样我确信我的精神会崩溃的。</p><p>晚上lr给我发了一张古早合照，我发现总是可以在任何时刻，怀念起过去。等到记忆只剩精华，仍念着的是过去的那些美好瞬间。</p><p>近来越发觉得我不喜欢做实验了，老师讲的原理我听不懂也听不进去，操作的话我也需要看别人怎样做才能自己动手（没错，我指的就是物理实验），实验完后写报告也很烦。</p><p>什么时候才能不做实验啊。</p><p>感觉虽然退掉了统推，还是被各种ddl追的喘不过气，平时作业、大作业、小测、pre…</p><p>总觉得前面有东西压着，让人无法平静下来做事情。</p><h1 id="2022-x2F-11-x2F-22"><a href="#2022-x2F-11-x2F-22" class="headerlink" title="2022&#x2F;11&#x2F;22"></a>2022&#x2F;11&#x2F;22</h1><p>今日有感：</p><p><strong>攒够了六便士就去看月亮</strong></p><p>————————————</p><p>加急写完了与赵导谈话的感想，我怕再拖我就不记得那份触动了。</p><p>今天写程设的时候回顾了一下我已经记不太清的数论知识（）</p><p>回想起高中每周五晚上去听听竞赛的时候简直是每周最放松的时光之一</p><p>天越来越冷了</p><p>起床也变得更加困难</p><p>心态倒是越来越稳了，希望状态能越来越好</p><h1 id="2022-x2F-11-x2F-23"><a href="#2022-x2F-11-x2F-23" class="headerlink" title="2022&#x2F;11&#x2F;23"></a>2022&#x2F;11&#x2F;23</h1><p>今天看到了一句与昨天那句话相对应的话：</p><p><strong>一直在攒六便士，从未见过月亮。</strong></p><p>——————————</p><p>早上在学堂路骑车的时候，哈出的热气转瞬被凝结成了小水滴，挂在眼睫毛上</p><p>像泪水一样，湿漉漉的</p><p>——————————</p><p>写心智探秘思维导图的时候在PPT上看到了这样一句话，觉得挺有道理的：</p><blockquote><p>人们为了艺术、信仰，可以选择独身、禁欲，甚至牺牲自我，这就是模因的驱动力。</p></blockquote><p>其实对我来说，讨论基因和环境哪个对人的影响更大就相当于讨论天赋和努力一样</p><p>——————————</p><p>我挺喜欢体育课打比赛的时候，因为我可以当handle🤣</p><p>而在系队里，我只是个cutter，甚至是那种可能无法上场的cutter</p><p>自从开始准备马杯后，比赛的参与感就减少了，所以上体育课我还是挺开心的</p><p>——————————</p><p>晚上复习理力有感：</p><p>吾不能究物理</p><p>尽管我觉得理力很有趣，因为它相比大学物理来说讲的很透，高老师讲的也特别好</p><p>但这不影响它很难🤣</p><p>只能说慢慢来了</p><p>此外，感觉今天写的几个片段都有一种戛然而止的感觉，让人以为后面应该还有内容，但突然间没了。可能是我写表达的东西写不出来，干脆就不写了。感觉这种东西这么复杂，无法轻易用语言表达出来。</p><p>适可而止，倒也不是不好。</p><h1 id="2022-x2F-11-x2F-24"><a href="#2022-x2F-11-x2F-24" class="headerlink" title="2022&#x2F;11&#x2F;24"></a>2022&#x2F;11&#x2F;24</h1><p>今天早上的理力小测只有两道题，还挺简单的，算是勉强handle住了。</p><p>每周四下午心智探秘小组讨论的时间是我唯二感到很开心很期待的时刻（另一个是打飞盘的时候，属于是身体和精神都很放松的那种。</p><p>下午的物理实验在syy和祖传实验报告的帮助下，所有数据都一遍过了，老师在看我测的数据的时候我真的提心吊胆，深怕哪个部分她把我打回去重测，直到最后她终于签了字，我才长舒一口气。</p><p>物理实验的目的是什么呢？感觉我只是个无情的测数据机器，原理听不懂，太难的操作要么不会要么做的很慢，实在不明白这课存在的意义。</p><p>晚上“长途跋涉”，从宿舍去了明理楼找沈老师做pre，感觉还行，希望这门课能给我个高分吧求求了，毕竟我每节课都举手发言，没有功劳也有苦劳。就算不能给高分也别给我那种特低分，我已经吃了一个了，再吃绩点就没有了🥀本来物理就学不好</p><p>晚上剩下的时间在复习明天的工热小测+处理工热实验的数据，不知不觉就转钟了</p><p>晚安咯</p><h1 id="2022-x2F-11-x2F-25"><a href="#2022-x2F-11-x2F-25" class="headerlink" title="2022&#x2F;11&#x2F;25"></a>2022&#x2F;11&#x2F;25</h1><p>今天北京又刮大风了，在xhs上刷到关于一个朝霞的帖子，突然想起燕姿《银泰》里的那句话：“北京起了风，就有蓝天白云”</p><p>原来这句话是写实的。</p><p>后一句是“但愿这城市，能带给你自信”。</p><p>北京很好，疫情让这座城市的美蒙上了一层薄雾，让接近它的人在无法窥探它的全貌后心灰意冷，继而离开。</p><p>最近北京的疫情又很严重了，人心惶惶，活在后疫情时代，是人的悲哀。</p><h1 id="2022-x2F-11-x2F-26"><a href="#2022-x2F-11-x2F-26" class="headerlink" title="2022&#x2F;11&#x2F;26"></a>2022&#x2F;11&#x2F;26</h1><p>昨天下午一直到今天中午（今天上午不算，应该睡到十点半才起床），肝完了三份实验报告，其中物理实验报告应该占了一半的时间，早知道就手写了，那些数学公式太难打了，哪怕我用markdown还是觉得好麻烦。</p><p>又全部改为网课了😥返乡的通知也出了，尽管我并不打算回去。</p><p>希望这学期不要像上学期一样惨烈</p><p>最近又有很多事情吸引着人们的眼球，赢得了人们的愤怒</p><p>是事实，所以才令人悲哀</p><p>但情绪被别人牵着走是一件很可怕的事，无论什么时候都应该保持冷静</p><p>可以愤怒，但更需要静下心来想想解决方法</p><p>————————————</p><p>“兴也苦，亡也苦，青史总让人无奈”。</p><p>————————————</p><p>今天本来准备写程设大作业的，结果发现有点无从下手🚬可能是因为合作的原因，不知道用哪些函数，唉。</p><p>开始有点担心了。</p><p>于是转向了工热大作业，一天（除去上午）下来，进度60%。还是高估自己了，以为今天能够搞定的，主要是很多东西不能直接抄，还需要绞尽脑汁地找出可以热力学计算的地方，来满足老师的大作业要求，而建模对我来说是一件比较困难的事。</p><p>明天再推进一下进度，然后把其他作业搞完，如果有多的时间再来看看程设大作业吧。</p><p>不知怎么的，想到了开学时学长学姐在文档上写的对于“大作业”的描述：</p><p>一种十分可怕的东西，等你遇到你就知道了。</p><p>现在我还真的深刻体会到了，估计过段时间体会的更加深刻。</p><p>最近的消息告诉我，不管怎样，还是应该静下心来，去做你目前应该做的事情。我也改变不了什么，还不如把自己的事情做好。</p><p>毕竟比起疫情、新闻、返乡与否……我还是更加关心我的大作业，我的ddl，我的期末考试，更加关心北京什么时候下雪。</p><h1 id="2022-x2F-11-x2F-27"><a href="#2022-x2F-11-x2F-27" class="headerlink" title="2022&#x2F;11&#x2F;27"></a>2022&#x2F;11&#x2F;27</h1><p>“白纸无字不言而喻，紫荆有眼一目了然。”</p><p>为他们的勇敢点赞，但还是觉得我们学生太容易被煽动情绪了，好在今天的事件有了一个比较好一点的处理方式。</p><p>我一直觉得国家的政策是好的，坚持清零也是为了保护我们人民。只不过在一层层地往下执行中，就变味了。</p><p>希望能一直做一个冷静的人。</p><p>————————————</p><p>今天终于搞完了工热大作业，14页，6118字，这还是我“自由摆烂”的结果（这就是大作业吗？爱了爱了</p><p>这个周末光用来肝工热大作业了，其他好多作业都没写，明天要花点时间把最近的ddl搞定。</p><p>马上要开始搞程设大作业了，还有心智探秘的论文和马原的读书笔记。</p><p>想来如果我不退统推的话两天后就要考统推期中了，现在还是觉得退的好。</p><p>今晚最后一点时间de了会bug，找同学要了他AC的代码，不由得感叹浮点数的精度真玄乎，将log(a)&#x2F;lg*b改为b*log10(a)后，最后两个点就能过了……</p><p>找出这个bug花了我好几个小时……</p><p>有一种无语的感觉。</p><h1 id="2022-x2F-11-x2F-28"><a href="#2022-x2F-11-x2F-28" class="headerlink" title="2022&#x2F;11&#x2F;28"></a>2022&#x2F;11&#x2F;28</h1><p>今天主要用来赶离的近的几个ddl了</p><p>顺便做了一个社工的活，还挤时间做了一个给朋友庆生的网页</p><p>校内阳了一个，这次终于是真的了</p><p>希望能被控制住，像之前北大一样</p><p>还是不太希望正常生活受太大影响，本来我的要求就已经很低了</p><h1 id="2022-x2F-11-x2F-29"><a href="#2022-x2F-11-x2F-29" class="headerlink" title="2022&#x2F;11&#x2F;29"></a>2022&#x2F;11&#x2F;29</h1><p>今早起来又有宿舍楼被封了</p><p>学校里的人少了不少，有一个室友甚至早上拖着箱子跑路了，明明前几天她还说回去不太方便的</p><p>一下子降温了十多度，直接零下了，我也立即换上了羽绒服</p><p>骑车在路上好冷，锁车的时候才发现短短一个晚上车锁已经被冻得僵硬了</p><p>路上没什么人，可能是因为网课大家都在宿舍，可能是因为已经离校了</p><p>只有被大风刮下来的落叶提醒着我这还是冬天</p><p>颇有一种山雨欲来风满楼的感觉。</p><p>————————————</p><p>中午一觉醒来，发现可以记pf了</p><p>不过这次要经过院系的同意，而不是像上次一样想记什么就记什么</p><p>希望教务能让我记工热的pf，还有大物，也在考虑中</p><p>尽管我之前下定决心后半学期好好学</p><p>但是经过上学期的惨痛教训</p><p>我觉得人还是不能对自己饱太大期望</p><p>何况我以后也不打算走这条路呢🤣（这才是重要原因</p><p>比如我就不会傻到给程设记pf，尽管我觉得它有点难，并且大作业目前我是一筹莫展</p><p>————————————</p><p>有两个傻子，零下6度大风天去紫操扔盘，我不说是谁</p><p>要不是为了明天的考核，谁会临时抱这个佛脚</p><p>扔盘挺快乐，但是很冷，风也很大</p><p>晚上就直接呆宿舍了，宿舍还是有点冷，却书桌一隅不适合我发挥</p><p>一晚上心浮气躁，只是把大物剩下来的作业写完了</p><p>两个小时，一道程设题都没搞出来</p><p>有点烦</p><h1 id="2022-x2F-11-x2F-30"><a href="#2022-x2F-11-x2F-30" class="headerlink" title="2022&#x2F;11&#x2F;30"></a>2022&#x2F;11&#x2F;30</h1><p>今天接连4管混阳，紫八中午也封了，幸好我早上就出来了，果然网课期间不能太放纵自己呆在宿舍摆烂</p><p>我本来是坚定地不润党，但是现在校内形势有点复杂，不知道能不能坚守住</p><p>回家太麻烦了，还要居家隔离，网课效率肯定也没有在学校里面高</p><p>主要是怕它把我拉出去隔离</p><p>唉，情况怎么突然变成这样了呢</p><p>我不想离开，我还没有看过今年北京的初雪呢，尽管这并不重要。</p><p>————————————</p><p>今日封五楼，明日封十楼，然后得一夕安寝🤣</p><p>明天上午起床不被封控就是万幸</p><p>今天接收的消息感觉要爆炸了，疫情通报（1）（2）（3）（4）…还有楼群消息、1911星球平台、info…</p><p>写作业都有点心神不宁的，当然，这不是我程设作业写不出来的借口</p><p>只能告诉自己：慢慢来，一点一点来</p><p>争取能自己解决</p><p>尽管痛苦，但也有趣</p><p><strong>苦中作乐，犹如刀剑跳舞，美丽且破碎</strong></p><h1 id="2022-x2F-12-x2F-1"><a href="#2022-x2F-12-x2F-1" class="headerlink" title="2022&#x2F;12&#x2F;1"></a>2022&#x2F;12&#x2F;1</h1><p>居然一下子都到12月了，11月整个月北京的疫情形势，或者说全国的疫情形势发生了很大变化，上次出校还是10月28号和老杜一起吃饭顺便帮她庆祝生日呢🥀</p><p>今天上午时隔很久再次去了清芬吃早餐，发现早餐已经帮你打包好了直接带走就行了</p><p>于是我买了根油条，再配碗花生浆，我的习惯，带到了四教边听理力网课边吃，仿佛一下子回到了2020年初，我起来的早，老妈常常是八九点起床后再跟我做早餐，而我也是边吃边听课。后来疫情好点了后早上六点还约着人在小区里跑步，跑步完回来早读，然后接着后面的课。</p><p>都快过去三年了啊</p><p>尤其感觉第三年，什么都没好起来</p><p>我现在已经很少回忆过去了，因为没意义，也许是昨晚做了一个过去的梦，也许是今天这个特殊的“纪念日”，让我难得地追忆下过去的时光吧。</p><p>——————————————</p><p>今天宿舍楼又被封了…</p><p>而且被精准打击了，涉及混阳的那管就在我宿舍旁边两个，无奈，只能下午从四教回来在篮球场做个核酸，然后就回宿舍了</p><p>今天的心智探秘讨论前上次那个助教居然就已经钦定了我们小组上去汇报，本来这次也不是我们小组参加有助教在的讨论的时间，这是对我们有多信任啊哈哈哈哈</p><p>晚上没干什么活，本来准备把工热作业写掉，因为就三题，但眼睛疼的要死，一定是因为昨天看了一天的电脑屏幕</p><p>写coding哪有眼睛不瞎的（</p><p>最近确实因为疫情的影响有点心神不宁，无法安心下来学习</p><p>希望明天会好一点吧，也只能这样希望了</p><h1 id="2022-x2F-12-x2F-2"><a href="#2022-x2F-12-x2F-2" class="headerlink" title="2022&#x2F;12&#x2F;2"></a>2022&#x2F;12&#x2F;2</h1><p>十二月的开端，真魔幻。</p><p>班上有人确诊了，而恰巧周三的时候我们都在四教四楼的公共区域自习，所以我被判定了密接，紫荆码也灰了，显示处于健康监测中。</p><p>（幸好当时没和他们几个坐在一起</p><p>今天一整天都有点心神不宁，基本什么都没干，只是焦虑地刷着手机，看有没有新的消息。</p><p>还是把大物记为pf了，这样好歹后续能轻松一点。</p><p>学校的免费盒饭只供应到12月5日，而12月5日起北京规定不再限制核酸证明超过48小时人员坐公交地铁。</p><p>目前的形势只能说是瞬息万变，而我处在疫情漩涡中，逐渐深谙“覆巢之下岂有完卵”的道理。</p><p>明天又到周末了，再来尝试尝试肝一下程设大作业吧，总要面对的。</p><h1 id="2022-x2F-12-x2F-3"><a href="#2022-x2F-12-x2F-3" class="headerlink" title="2022&#x2F;12&#x2F;3"></a>2022&#x2F;12&#x2F;3</h1><p>电子系开始劝返了，态度似乎挺坚决的，不知道我们系会不会劝返，如果劝的话，那我还是回去算了。</p><p>今晚突然受到明天下午RA开会的消息……</p><p>这一个月来我可以说是什么都没干，虽然我也不是正式地通过srt或学术新星计划加入，但还是很慌，况且学长说还有简单地自我介绍环节。</p><p>突然理解研究生开组会前的焦虑了（</p><p>今天尝试写了写程设的大作业，当然，是边摸鱼边写的</p><p>现在这种情况下完全静不下心来搞学习😥</p><p>可惜了我的零食，如果回家的话估计只能明年回来吃了，也不知道会不会过期。</p><h1 id="2022-x2F-12-x2F-4"><a href="#2022-x2F-12-x2F-4" class="headerlink" title="2022&#x2F;12&#x2F;4"></a>2022&#x2F;12&#x2F;4</h1><p>今天依旧睡到了十点半才起（毕竟是周末嘛</p><p>下午摸了会程设大作业，把几个函数都写完了，只需要根据其他模块完成的接口函数改一改就行了，可能到时候又要花很多时间。</p><p>过几天我去push一下我的组员🤣</p><p>今天下午召开了RA见面会，上次拉群还是一个月前，回想这一个月，我什么都没干sigh</p><p>学长说要我们每周都写一下自己的进度，好慌啊ww，主要是平时太忙了，并且我还会忙里偷闲地看小说。看来还是我对这件事不太重视🥀后面看看能不能每周多花点时间，要不然我可能还没能入门就被淘汰劝退了😥</p><p>这显然不是我想要的结果，所以要努力一点www</p><p>自我介绍的时候表面坦然介绍我的班级，实际内心慌得很。没关系，只要我不尴尬，尴尬的就是别人🤣</p><p>晚上开了线上主题团日，然后接着开班会。</p><p>还是决定润了，毕竟期末考试都改线上了，留下来也没有什么意义。</p><p>还有一周，希望不要出什么意外。</p><p>在这周的最后，附上我近期看到的很喜欢的一段话：</p><div class="note info modern"><p>这天我看到他发了一条动态：“你头发乱了哦。”配了一张日落暖洋洋的图片。</p><p>这句话的原话大概是村上春树说，</p><p>如果我爱你，而你正巧也爱我，当你头发乱了时，我会笑着替你拨一拨，然后，手还会留恋地多停留几秒。</p><p>但是，如果我爱你，而你不巧地不爱我，你头发乱了，我只会轻轻地告诉你，你头发乱了哦。</p></div>]]></content>
      
      
      <categories>
          
          <category> 浮光掠影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫&amp;数据库</title>
      <link href="/2022/09/06/pc/"/>
      <url>/2022/09/06/pc/</url>
      
        <content type="html"><![CDATA[<h1 id="ReadMe"><a href="#ReadMe" class="headerlink" title="ReadMe"></a>ReadMe</h1><p>前半部分内容基于清华大学计算机系2022年暑培，简单介绍了一下html知识。</p><p>后半部分详细地介绍了爬虫的实现，配套练习请参考<a href="https://github.com/liuydd/crawl-exercises">liuydd&#x2F;crawl-exercises (github.com)</a></p><h1 id="HTML语言基础"><a href="#HTML语言基础" class="headerlink" title="HTML语言基础"></a>HTML语言基础</h1><p>在web开发中，HTML通常用于描述网页的内容。</p><h2 id="HTML基本格式"><a href="#HTML基本格式" class="headerlink" title="HTML基本格式"></a>HTML基本格式</h2><p>HTML文本由层级结构组成，格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;标签&gt;内容&lt;/标签&gt;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        这是标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        这是段落</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="常用HTML元素"><a href="#常用HTML元素" class="headerlink" title="常用HTML元素"></a>常用HTML元素</h2><ul><li>&lt;body&gt;：网页主体内容，用来容纳网页上所有可见的HTML元素</li><li>&lt;h1&gt;：一级标题</li><li>&lt;p&gt;：段落</li><li>&lt;ul&gt;…&lt;&#x2F;ul&gt;：无序列表</li><li>&lt;ol&gt;…&lt;&#x2F;ol&gt;：有序列表</li><li>&lt;b&gt;…&lt;&#x2F;b&gt;：加粗</li><li>&lt;i&gt;…&lt;&#x2F;i&gt;：斜体</li><li>&lt;del&gt;…&lt;&#x2F;del&gt;：删除</li><li>&lt;a href&#x3D;’网址’&gt;字&lt;&#x2F;a&gt;：在“字”上添加网址链接</li><li>&lt;img src&#x3D;”图片地址” alt&#x3D;”Loading…” &#x2F;&gt;：在HTML文本中添加</li><li>&lt;table&gt;：表格</li></ul><h1 id="HTTP基本知识"><a href="#HTTP基本知识" class="headerlink" title="HTTP基本知识"></a>HTTP基本知识</h1><h2 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h2><p>参考<a href="https://www.ruanyifeng.com/blog/2016/08/http.html">https://www.ruanyifeng.com/blog/2016/08/http.html</a></p><h2 id="HTML方法"><a href="#HTML方法" class="headerlink" title="HTML方法"></a>HTML方法</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>GET is used to request data from a specified resource</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>POST is used to send data to a server to create&#x2F;update a resource.</p><h2 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h2><p>HTTP响应状态码用来表明特定HTTP请求是否成功完成</p><p>包括：</p><ul><li>信息响应（100-199）</li><li>成功响应（200-299）</li><li>重定向消息（300-399）</li><li>客户端错误响应（400-499）</li><li>服务端错误响应（500-599）</li></ul><p>若收到的响应不在此列表中，则它为非标准响应，可能是服务器软件的自定义响应</p><h2 id="HTTP-Cookie"><a href="#HTTP-Cookie" class="headerlink" title="HTTP Cookie"></a>HTTP Cookie</h2><p>HTTP Cookie是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><p>Cookie主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>进入方式：</p><p>win+R+cmd进入命令窗口，输入mysql -u root -p</p><p>创建用户时要用小写的create user…</p><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create user &#x27;Sheeta&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Ydlx0207&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on *.* to `Sheeta`@&#x27;localhost&#x27;;   #赋予权限</span><br></pre></td></tr></table></figure><h1 id="视频（好随意的命名"><a href="#视频（好随意的命名" class="headerlink" title="视频（好随意的命名"></a>视频（好随意的命名</h1><p>按ctrl+shift+i进入网页控制台</p><p>一般爬的时候带上Cookie和User-Agent，因为很多网站的反爬机制比较严格</p><p>SQL</p><p>登录创建好的用户账号：输入mysql -u xxx（username） -p</p><p>Linux下的MYSQL默认区分表名大小写的，而在windows下表名不区分大小写</p><p>爬数据时要关闭代理</p><p>re.compile函数用于编译正则表达式，生成一个正则表达式对象供match()和search()这两个函数使用</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.<span class="built_in">compile</span>(pattern[,flags])</span><br></pre></td></tr></table></figure><p>pattern：一个字符串形式的正则表达式</p><p>flags：可选，表示匹配模式，比如忽略大小写，多行模式等。如re.I（忽略大小写），re.M（多行模式）</p><p>……</p><p>果然代码还是上手写后才知道自己会不会（sigh</p><h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><p>get请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">resp=requests.get(<span class="string">&quot;xx&quot;</span>,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:xx,<span class="string">&quot;User-Agent&quot;</span>:xx&#125;)</span><br></pre></td></tr></table></figure><h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><h2 id="法一：正则表达式"><a href="#法一：正则表达式" class="headerlink" title="法一：正则表达式"></a>法一：正则表达式</h2><p>可以采用正则表达式过滤得到的信息</p><p>常用的正则表达式：</p><table><thead><tr><th align="center">字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">d</td><td align="center">代表任意数字，就是阿拉伯数字 0-9 这些玩意。</td></tr><tr><td align="center"><code>D</code></td><td align="center">大写的就是和小写的唱反调，d 你代表的是任意数字是吧？那么我 D 就代表不是数字的。</td></tr><tr><td align="center"><code>w</code></td><td align="center">代表字母，数字，下划线。也就是 a-z、A-Z、0-9、_。</td></tr><tr><td align="center"><code>W</code></td><td align="center">跟 w 唱反调，代表不是字母，不是数字，不是下划线的。</td></tr><tr><td align="center">n</td><td align="center">代表一个换行。</td></tr><tr><td align="center"><code>r</code></td><td align="center">代表一个回车。</td></tr><tr><td align="center"><code>f</code></td><td align="center">代表换页。</td></tr><tr><td align="center"><code>t</code></td><td align="center">代表一个 Tab 。</td></tr><tr><td align="center"><code>s</code></td><td align="center">代表所有的空白字符，也就是上面这个：n、r、t、f。</td></tr><tr><td align="center"><code>S</code></td><td align="center">跟 s 唱反调，代表所有不是空白的字符。</td></tr><tr><td align="center"><code>A</code></td><td align="center">代表字符串的开始。</td></tr><tr><td align="center"><code>Z</code></td><td align="center">代表字符串的结束。</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开始的位置。</td></tr><tr><td align="center">$</td><td align="center">匹配字符创结束的位置。</td></tr><tr><td align="center">.</td><td align="center">代表所有的单个字符，除了 n r</td></tr><tr><td align="center"><code>[...]</code></td><td align="center">代表在 [] 范围内的字符，比如 [a-z] 就代表 a到z的字母</td></tr><tr><td align="center"><code>[^...]</code></td><td align="center">跟 […] 唱反调，代表不在 [] 范围内的字符</td></tr><tr><td align="center">{n}</td><td align="center">匹配在 {n} 前面的东西，比如: o{2} 不能匹配 Bob 中的 o ，但是能匹配 food 中的两个o。</td></tr><tr><td align="center"><code>&#123;n,m&#125;</code></td><td align="center">匹配在 {n,m} 前面的东西，比如：o{1,3} 将匹配“fooooood”中的前三个o。</td></tr><tr><td align="center"><code>&#123;n，&#125;</code></td><td align="center">匹配在 {n,} 前面的东西，比如：o{2,} 不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。</td></tr><tr><td align="center"><code>*</code></td><td align="center">和 {0,} 一个样，匹配 * 前面的 0 次或多次。 比如 zo* 能匹配“z”、“zo”以及“zoo”。</td></tr><tr><td align="center"><code>+</code></td><td align="center">和{1，} 一个样，匹配 + 前面 1 次或多次。 比如 zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。</td></tr><tr><td align="center"><code>？</code></td><td align="center">和{0,1} 一个样，匹配 ？前面 0 次或 1 次。</td></tr><tr><td align="center">a|b</td><td align="center">匹配 a 或者 b。</td></tr><tr><td align="center"><code>（）</code></td><td align="center">匹配括号里面的内容。</td></tr></tbody></table><p>**.*?**表示匹配任意字符（对有换行的字符串无效</p><p>用python的re库来使用正则表达式：</p><p>一：</p><p>re.match(匹配规则，需要被过滤的内容，…)，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=<span class="string">&#x27;Xian has 100 bananas&#x27;</span></span><br><span class="line">res=re.match(<span class="string">&#x27;Xi.*(d+)s.*s$&#x27;</span>,content)</span><br><span class="line"><span class="built_in">print</span>(res.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>得到0</p><p>若将res&#x3D;re.match(‘Xi.*(d+)s.*s$’,content)改为res&#x3D;re.match(‘Xi.*?(d+)s.*s$’,content)则可得到100</p><p>二：</p><p>re.search，用法与re.match类似</p><p>扫描字符串，返回匹配成功的<strong>第一个</strong>结果</p><p>三：</p><p>re.findall，用法类似</p><p>返回所有匹配成功的结果</p><p>四：</p><p>re.sub，替换字符串里的字符，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content=re.sub(<span class="string">&#x27;d+&#x27;</span>,<span class="string">&#x27;250&#x27;</span>,content)</span><br></pre></td></tr></table></figure><p>五：</p><p>re.compile，用法类似</p><p>将匹配符封装，便于以后复用</p><h2 id="法二：BeautifulSoup"><a href="#法二：BeautifulSoup" class="headerlink" title="法二：BeautifulSoup"></a>法二：BeautifulSoup</h2><p>给一段HTML代码，如何正则表达式的情况下得到我们想要的内容？</p><p>直接将html的源代码传给BeautifulSoup：soup&#x3D;BeautifulSoup(html_doc,’lxml’)</p><p>此时建立了一个对象soup，我们要做的是从这个对象中直接获取我们要的内容</p><blockquote><p>如果用print(soup.title.string)或print(soup.p.string)等类似内容，获取的是html网页标准标签里的内容</p></blockquote><p>更多参考：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">Beautiful Soup 4.4.0 文档 — Beautiful Soup 4.2.0 documentation (crummy.com)</a></p><p><del>这个参考文档特别好，不知道怎样实现功能时基本看看就知道了\\</del></p><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><blockquote><p>reference：<a href="https://zhuanlan.zhihu.com/p/462460461">https://zhuanlan.zhihu.com/p/462460461</a></p><p><a href="https://selenium-python.readthedocs.io/">Selenium with Python — Selenium Python Bindings 2 documentation (selenium-python.readthedocs.io)</a></p></blockquote><p>首先要安装webdriver</p><table><thead><tr><th><strong>Chrome</strong>:</th><th><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a></th></tr></thead><tbody><tr><td><strong>Edge</strong>:</td><td><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a></td></tr><tr><td><strong>Firefox</strong>:</td><td><a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a></td></tr><tr><td><strong>Safari</strong>:</td><td><a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">https://webkit.org/blog/6900/webdriver-support-in-safari-10/</a></td></tr></tbody></table><p><strong>注意！</strong>：要安装和浏览器版本一样的.exe，否则会报错</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#初始化一个Edge浏览器且指定绝对路径</span></span><br><span class="line">browser=webdriver.Edge(<span class="string">&#x27;D:\edgedriver_win64\msedgedriver.exe&#x27;</span>)</span><br></pre></td></tr></table></figure><p>即现在browser就是一个浏览器，下面通过调用browser来完成各种方法模拟浏览器的操作</p><p>采用get方法，如访问百度首页：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置浏览器全屏</span></span><br><span class="line">browser.maximize_window()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#刷新页面</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前进后退</span></span><br><span class="line">browser.get(<span class="string">&quot;https://www.taobao.com&quot;</span>) <span class="comment">#打开淘宝</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.back()  <span class="comment">#退回到上一页面，即百度</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.forward()  <span class="comment">#前进到淘宝页面</span></span><br></pre></td></tr></table></figure><h2 id="获取页面基础属性"><a href="#获取页面基础属性" class="headerlink" title="获取页面基础属性"></a>获取页面基础属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(browser.title) <span class="comment">#网页标题</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_url) <span class="comment">#当前网址</span></span><br><span class="line"><span class="built_in">print</span>(browser.name) <span class="comment">#浏览器名称</span></span><br><span class="line"><span class="built_in">print</span>(browser.page_source) <span class="comment">#网页源码，可用beautifulsoup来解析</span></span><br></pre></td></tr></table></figure><h2 id="定位页面元素"><a href="#定位页面元素" class="headerlink" title="定位页面元素"></a>定位页面元素</h2><p>即模拟用户进行点击和操作</p><p>检查网页，找到搜索框的html结构</p><p>用find_element_by()定位搜索框，配合send_keys()输入关键词</p><p><strong>常用来定位的属性：id，name，class，tag，link…</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注：find_element(‘属性名’，‘属性值’)</p></blockquote><p>）））模糊定位：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser.find_element(<span class="string">&#x27;partial&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当这些属性不唯一时，可通过xpath或css来定位</p><blockquote><p>也可以先from selenium.webdriver.common.by import By</p><p>再根据find_element(By.ID,’ ‘)来定位</p><p>注：By后要跟大写，如ID，CLASS_NAME等</p></blockquote><h2 id="获取页面元素属性"><a href="#获取页面元素属性" class="headerlink" title="获取页面元素属性"></a>获取页面元素属性</h2><p><strong>获取属性：</strong>get_attribute()</p><p><strong>输入文本：</strong>send_keys()</p><p><strong>点击：</strong>click()</p><blockquote><p>模拟百度进行的搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser=webdriver.Edge(<span class="string">&#x27;D:\edgedriver_win64\msedgedriver.exe&#x27;</span>)</span><br><span class="line">browser.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.find_element(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">button=browser.find_element(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;su&#x27;</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure></blockquote><p><strong>清除文本：</strong>clear()</p><p><strong>回车确认：</strong>submit()</p><p><strong>单选：</strong>先定位需要单选的某个元素，然后点击一下即可</p><p><strong>多选：</strong>依次定位需要选择的元素，点击</p><p><strong>下拉框：</strong>to be continued…</p><h2 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h2><p><strong>frame切换：</strong></p><p>切换到子页面：switch_to.frame()</p><p>回到父页面：switch_to.parent_frame()</p><p><strong>选项卡切换：</strong></p><ul><li>current_window_handle：获得当前窗口句柄</li><li>window_handles：获取所有窗口的句柄到当前会话，返回一个窗口句柄列表</li><li>switch_to.window()：切换窗口句柄</li></ul><blockquote><p>在Windows中，句柄是一个系统内部数据结构的引用。例如当你操作一个窗口时，系统会给你一个该窗口的句柄，通知你，你正在操作142号窗口。</p></blockquote><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取句柄</span></span><br><span class="line">all_handles=browser.window_handles</span><br><span class="line"><span class="comment">#切换窗口,n指切换到哪一个窗口</span></span><br><span class="line">browser.switch_to.window(all_handles[n])</span><br></pre></td></tr></table></figure><p>这样写个循环就可以切换不同窗口了。</p><h2 id="模拟鼠标操作"><a href="#模拟鼠标操作" class="headerlink" title="模拟鼠标操作"></a>模拟鼠标操作</h2><p>先导入ActionChains：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains <span class="keyword">as</span> AC</span><br></pre></td></tr></table></figure><p><strong>左键：</strong>click()</p><p><strong>右键：</strong>context_click()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定位到要右击的元素</span></span><br><span class="line">right_click=browser.find_element(<span class="string">&#x27;link_text&#x27;</span>,<span class="string">&#x27;新闻&#x27;</span>)</span><br><span class="line"><span class="comment">#执行鼠标右键操作</span></span><br><span class="line">ActionChains(browser).context_click(right_click).perform()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>双击：</strong>double_click()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ActionChains(browser).double_click(double_click).perform()</span><br></pre></td></tr></table></figure><p><strong>推拽：</strong>drag_and_drop(source,target)</p><p>常用于滑块类验证码的操作之类，用find_element()指定开始位置source和结束位置target</p><p><strong>悬停：</strong>move_to_element()</p><p>常配合click()使用</p><h2 id="模拟键盘操作"><a href="#模拟键盘操作" class="headerlink" title="模拟键盘操作"></a>模拟键盘操作</h2><p>引入Keys()类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br></pre></td></tr></table></figure><p>先定位到需要操作的元素，然后操作即可</p><p>常见操作：</p><blockquote><p><code>send_keys(Keys.BACK_SPACE)</code>：删除键(BackSpace)</p><p><code>send_keys(Keys.SPACE)</code>：空格键(Space)</p><p><code>send_keys(Keys.TAB)</code>：制表键(TAB)</p><p><code>send_keys(Keys.ESCAPE)</code>：回退键(ESCAPE)</p><p><code>send_keys(Keys.ENTER)</code>：回车键(ENTER)</p><p><code>send_keys(Keys.CONTRL,&#39;a&#39;)</code>：全选(Ctrl+A)</p><p><code>send_keys(Keys.CONTRL,&#39;c&#39;)</code>：复制(Ctrl+C)</p><p><code>send_keys(Keys.CONTRL,&#39;x&#39;)</code>：剪切(Ctrl+X)</p><p><code>send_keys(Keys.CONTRL,&#39;v&#39;)</code>：粘贴(Ctrl+V)</p><p><code>send_keys(Keys.F1)</code>：键盘F1</p><p>…..</p><p><code>send_keys(Keys.F12)</code>：键盘F12</p></blockquote><h2 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h2><p>若遇到使用ajax加载的网页，页面元素可能不是同时加载出来的，如B站。</p><p>此时需要设置延时等待一定时间，确保全部节点都加载出来</p><p><strong>强制等待：</strong>time.sleep(n)，在get操作后执行</p><p><strong>隐式等待：</strong>implicity_wait()设置等待时间，如果到时间后有元素节点没有加载出来，就会抛出异常。在get操作前执行</p><p><strong>显式等待：</strong>设置一个等待时间和一个条件，在规定时间内，每隔一段时间查看下条件是否成立，如果成立那么程序就继续执行，否则就抛出一个超时异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">...</span><br><span class="line">browser.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="comment"># 设置等待时间10s</span></span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># 设置判断条件：等待id=&#x27;kw&#x27;的元素加载完成</span></span><br><span class="line"><span class="built_in">input</span> = wait.until(EC.presence_of_element_located((By.ID, <span class="string">&#x27;kw&#x27;</span>)))</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebDriverWait(driver,timeout,poll_frequency=<span class="number">0.5</span>,ignored_exceptions=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>driver：浏览器</p><p>timeout：最长等待时间</p><p>poll_frequency&#x3D;0.5：每次检测的间隔时间，默认0.5</p><p>ignored_exceptions&#x3D;：超时后抛出的异常信息，默认情况下抛出<code>NoSuchElementException</code>异常</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs, python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sheetaの摸鱼日记</title>
      <link href="/2022/07/31/moyu/"/>
      <url>/2022/07/31/moyu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>世上只有一种英雄主义，那就是在认清生活的本质后依然热爱生活。</p></blockquote><h1 id="2022-x2F-7-x2F-31"><a href="#2022-x2F-7-x2F-31" class="headerlink" title="2022&#x2F;7&#x2F;31"></a>2022&#x2F;7&#x2F;31</h1><p>最近每天上午都要练车，被迫早起。</p><p>但一辆车也不是只有我一个人练啊，等待别人的同时难免浪费时间。</p><p>嘛，相当于没有早起嘛，反正早上也是不干正事x</p><p>下午午睡正常睡2h，今天把科一刷到了700+</p><blockquote><p>感觉每天摸鱼的根本问题是畏难情绪。比如写作业时碰到难题一时半会儿想不出来就想刷一下手机，半天才能放下，继续自己正在干的事情。</p><p>sigh</p><p>初中的时候碰到难的数学题总是特别兴奋，因为所谓的难题不过是比较绕而已；</p><p>高中时碰到难的数学题也是从各个方向尝试攻破它，只有在连续几道导数题都写不出来时才会有点烦躁；</p><p>等到了大学，从刚开始花很长时间去想一道暂时想不出来的题目到一旦被卡5min就会用各种搜题软件去查这道题；coding遇到困难也是第一时间百度Google而不是静下心来思考。</p><p>可能还是比较浮躁</p><p>太希望能有个结局了</p></blockquote><p>p.s. 今天无聊翻他人tape提问箱时有个特殊的发现</p><p>很少有人直白地用那么多美好的词汇形容我，说不高兴是假的</p><p>记得以前有个时间我是有点愧疚的，而这种愧疚感似乎有些莫须有之罪，因为我自认为我没有做过任何对不起他人的事</p><p>不过也有可能从一开始就错了…</p><p>可惜当时不知道怎样处理这件事，不知道怎样回应他人的爱与欣赏</p><p>我不希望自己是个好人，也不这样认为，但我希望自己是个善良的人。</p><h1 id="2022-x2F-8-x2F-4"><a href="#2022-x2F-8-x2F-4" class="headerlink" title="2022&#x2F;8&#x2F;4"></a>2022&#x2F;8&#x2F;4</h1><p>淦</p><p>8月1号与发小一起玩，8月2号稍微干了点活，8月3号参加去年去复读的同学的升学宴，8月4号七夕不想干活</p><p>……</p><p>lyd啊lyd，你怎么能如此摸鱼呢</p><p>不过和朋友在一起的感觉很好，昨天下午和他们玩狼人杀时似乎回到了去年那个盛夏</p><p>天黑请闭眼，狼人请睁眼</p><p>美好的有点不真实，让人恍惚不已</p><p>也许我怀念的不只是当时的那群人</p><p>还有那时候大家在一起欢笑的氛围</p><p>以及当时心中对未来的忐忑与憧憬</p><p>物是人非事事休，欲语泪先流</p><p>——————————————</p><p>写在一天的末尾：</p><p>科一97分过了，那以后练车等待的时候干什么呢（悲</p><p>突然意识到我可以背背单词，尽管四级可以裸考，但六级不行啊，托福雅思GRE更加不行orz</p><p>尽管只是有初步的想法，还没付诸于行动，但是已经和朋友约好一起润美了</p><p>只是不知道如今的约定在到时候的现实面前会有多不堪一击</p><p>七夕的晚上和朋友一起散步，有一搭没一搭的聊天、大笑</p><p>可惜奶茶店送的花已经没有了，一路上也没有碰到卖花的爷爷奶奶，略微有点遗憾</p><p>改一改曾经看刘慈欣作品看过的一句话：</p><p><strong>我们以后还有很多的事情可以谈，但是别再谈论爱情了。在宇宙里，那东西没有意义。</strong></p><h1 id="2022-x2F-8-x2F-6"><a href="#2022-x2F-8-x2F-6" class="headerlink" title="2022&#x2F;8&#x2F;6"></a>2022&#x2F;8&#x2F;6</h1><p>周末不用练车（开心~~</p><p>所以今天的睡眠时间长达12h</p><p>尽管仍像前几天一样一天干活的时间较少，但今天写完了毛概报告（待降重呜呜，排版了一篇推送，还抽空看了一点cs61a的lecture视频</p><p>有时刷知乎上的某些问题时，经常会感叹自己被保护的太好了，自己的童年成长阶段真的太幸福了，各种方面的</p><p>这些成就了我人性中的善良，却也让我无法看清世人的险恶</p><p>不过呢，想了想自己所拥有的一切，再看了看别人所挣扎的东西，突然就感觉没那么焦虑了</p><p>还是希望能够追求一些自己真正想要的东西</p><h1 id="2022-x2F-8-x2F-7"><a href="#2022-x2F-8-x2F-7" class="headerlink" title="2022&#x2F;8&#x2F;7"></a>2022&#x2F;8&#x2F;7</h1><p>意识到摆脱别人视奸的最好方法就是远离一切社交软件，或者使用的不留痕迹</p><p>可能对于我来说，更为珍视的还是现实中的友谊吧</p><p>小时候我们有在楼下喊你下来玩的朋友，有可以不打招呼就出现在你家门口的朋友，有随叫随到的朋友</p><p>长大后什么都没了，约朋友出来玩甚至连个电话都不想打，而依赖于聊天软件的对话框</p><p>小时候道别都是“明天见”，长大后的道别却是“下次再见面就是暑假&#x2F;寒假了吧”</p><p>……</p><p>乱入&gt;&gt;&gt;等老陈回来约她一起吃火锅，上次刷知乎的时候馋死了，还有3天呜呜</p><h1 id="2022-x2F-8-x2F-8"><a href="#2022-x2F-8-x2F-8" class="headerlink" title="2022&#x2F;8&#x2F;8"></a>2022&#x2F;8&#x2F;8</h1><p>感觉每天的干活时间始于晚上七点（汗</p><p>这还是在晚上没有活动的时候</p><p>而且就算每天只学习一个晚上，这一个晚上也是不断地在摸鱼…</p><p>今晚搞完了cs61a的lab09，累</p><p>还是睡觉比较舒服</p><h1 id="2022-x2F-8-x2F-9"><a href="#2022-x2F-8-x2F-9" class="headerlink" title="2022&#x2F;8&#x2F;9"></a>2022&#x2F;8&#x2F;9</h1><p>看了一个博主的视频，决定以后弄个无人机去西藏拍视频和照片，真的太美了！</p><p>北京不允许飞无人机，想玩都不行，唉</p><p>今天跟妈妈开玩笑地聊了聊出国的事，感觉我还是等时机成熟了润回来比较好</p><p>毕竟那边没有家</p><blockquote><p>又被鞭尸了&#x2F;&#x2F;</p><p>放这种长假回同学的消息对于我来说是一种折磨</p><p>尤其是这种消息一般都是派活的或者询问的等等</p><p>就像回家了之后还要回老板的消息一样</p><p>尽最大可能地将要回的消息敷衍过去（指要么甩锅，要么装没看见</p><p>不想让它们占据我休息的时间</p></blockquote><blockquote><p>······</p><p>花了寒假和暑假两个假期，初步认识到躺平才是硬道理。清华就是傻逼。</p></blockquote><h1 id="2022-x2F-8-x2F-10"><a href="#2022-x2F-8-x2F-10" class="headerlink" title="2022&#x2F;8&#x2F;10"></a>2022&#x2F;8&#x2F;10</h1><p>今晚和老陈还有老杜吃了心心念念的火锅，不过最后点多了ww</p><p>重拾儿时活动：在广场画石膏像</p><p>画了好长时间，最后有点懒得画了</p><p>知道了一个好消息：月底去重庆的实践可能要因为疫情改为线上了。本来由于我去过重庆，所以对于实践地点为重庆还是有点郁闷的（更希望能公费旅游去西藏或者新疆），并且同一队的准备早点走然后直接回北京，这样的话暑假就被缩短了</p><p>不过现在就好了，我本来担心我能不能在出发去重庆前把科二考过，现在不用那么急了</p><p>等到把cs61a肝完后就准备一下六级。我妈听说我要准备六级的时候一脸担忧地问我四级能不能过，我…hhh</p><blockquote><p>目前计划（理想情况）：</p><p>2022年9月过四级，12月过六级（如果能考的话）</p><p>2023年把gre考过（最好是寒假备考然后考过，暑假准备雅思（先考一个够申请交换的成绩出来</p><p>不行的话也可以2024年寒假考雅思（此时如果降转的话应该是大二的寒假</p><p>等到大三寒假或者升大四的暑假时再考一遍雅思</p></blockquote><p>最近发现我是个物欲很低的人</p><blockquote><p>若她能避开猛烈的狂喜，自然不会有悲痛的来袭</p></blockquote><p>晚安</p><h1 id="2022-x2F-8-x2F-11"><a href="#2022-x2F-8-x2F-11" class="headerlink" title="2022&#x2F;8&#x2F;11"></a>2022&#x2F;8&#x2F;11</h1><p>最近感觉自己好虚&#x2F;&#x2F;&#x2F;</p><p>特别喜欢睡觉（或许本来就喜欢睡觉，在家神经没有那么紧绷？</p><p>总是一睡就两三个小时…</p><p>以后不想接稿件了呜呜，一个大纲都改了两遍了，还不知道这次能不能过</p><p>大纲不都是差不多就行了吗？大致反映文章的思路，又不是文章你能从大纲里看出什么&#x2F;&#x2F;&#x2F;</p><p>我最喜欢的是像之前几次一样大纲正文一遍过</p><p>改来改去太折磨人了（尤其是审稿的过分较真and和你的思路不一致的时候…</p><p>————————</p><p>晚上妈妈突然提起明天是中元节</p><p>想起了小时候去一个发小家玩的时候她奶奶特意嘱咐我们说“今天早点回家，不要在外面玩的太晚”</p><p>又想起了去年中元节的前一天晚上和他们一起玩剧本杀，还是恐怖本（至今为止玩的唯一一个恐怖本</p><p>导致我晚上回去没睡好，一直等到天亮才睡着&#x2F;&#x2F;&#x2F;</p><p>从小就怕黑，现在稍微好了一点，但还是怕</p><p>都怪我奇特的想象力，总是能脑补出一幅非常恐怖的画面</p><p>算下来爷爷奶奶去世都有十年了吧，这么多年，都没出现在我的梦里，难道怕吓到我吗hhh</p><p>当时年幼，能记得的几幅画面是爷爷戴着草帽在路上等我们回来；过年时一大家子喝着奶奶熬的鸡汤；奶奶卧病的那个房间以及葬礼时的场面</p><p>希望你们在那边过的好吧</p><h1 id="2022-x2F-8-x2F-15"><a href="#2022-x2F-8-x2F-15" class="headerlink" title="2022&#x2F;8&#x2F;15"></a>2022&#x2F;8&#x2F;15</h1><p>昨天晚上和老杜还有xz一起散步，老杜20号就要走了</p><p>我的暑假也要结束了，目前最大的愿望就是能够一次把科二考过，不然这个暑假可能没时间考了呜呜</p><p>感觉学个车都快形成生物钟了，现在每天晚上11点就困了，11：20就准备睡觉了，然后早上6：50或者稍微晚一点起床（之前的金工实习都没让我形成，果然晚上还是早点睡比较好</p><p>昨晚做了一个很清晰的梦，梦见我回去复读了…</p><p>然后前面坐的lpy，老师还点我上去做题目</p><p>在堆在桌子上的那一摞书倒下来的同时我醒了</p><p>整个梦境真实地让人惘然</p><p>——————————————————————</p><p>生命被下了倒计时是什么感受？</p><p>可能大家虽然嘴上都那样说，心里还是会有一点点期待，期待一切都是虚惊一场</p><p>还有半年啊</p><p>可是曾经她明明答应我要看着我结婚的啊，看着我上班然后赚很多钱来孝敬她</p><p>就像个不准的定时炸弹，不知道什么时候就爆炸了，也不知道我到时候能不能赶回来，要不要赶回来</p><p>家家走了的话，爷爷肯定会很难过很难过的吧</p><p>我不愿回忆以前那么多场景，不愿被过去所牵制</p><p>但听到消息还是会愕然，还是希望它不是真的</p><p>也不是没有经历过生死离别，只是没有经历过这样被下了最后通告的离别</p><h1 id="2022-x2F-8-x2F-16"><a href="#2022-x2F-8-x2F-16" class="headerlink" title="2022&#x2F;8&#x2F;16"></a>2022&#x2F;8&#x2F;16</h1><p>很开心的摸鱼的一天：上午练车时和那个刚过科二来学科三灯光的男生聊天，他教了我一些考试的技巧，可能氛围比较轻松，今天练的还不错，希望考试能过、、、下午用来睡觉了，晚上还是和朋友们一起散步，然后在群里发自己小时候照片哈哈哈哈</p><blockquote><p>“当一个人开始怀念过去的时候说明他已经老了”</p><p>”当一个人开始怀念过去的时候说明他现在没有过去过得快乐“</p></blockquote><p>不过最近cs61a的课程变得抽象起来了，有点听不懂了(sigh</p><p>每隔一段时间都要提醒自己：别焦虑，别管别人怎样做，按照自己的节奏来</p><p>心理复健还是要继续，怎么上个大学把好不容易建立起来的一点自信都上没了呢😢</p><h1 id="2022-x2F-8-x2F-17"><a href="#2022-x2F-8-x2F-17" class="headerlink" title="2022&#x2F;8&#x2F;17"></a>2022&#x2F;8&#x2F;17</h1><p>今天去看了家家，感觉她比我上次去看她又瘦了不少，整个人的气色也好差</p><p>我握住她的手，她反过来摩挲我的手背，气若游丝地说：“家家要死了…”</p><p>那一刻感觉安慰的话语直接梗在喉咙，我试图开口，却发不出一个声音，似乎一下子失去了安慰人的能力</p><p>语言在此刻变得贫瘠</p><p>固知一死生为虚诞，齐彭殇为妄作</p><h1 id="2022-x2F-8-x2F-18"><a href="#2022-x2F-8-x2F-18" class="headerlink" title="2022&#x2F;8&#x2F;18"></a>2022&#x2F;8&#x2F;18</h1><p>夏天还是走到了最后</p><p>见面的频率终究从天变为了半年</p><h1 id="2022-x2F-8-x2F-19"><a href="#2022-x2F-8-x2F-19" class="headerlink" title="2022&#x2F;8&#x2F;19"></a>2022&#x2F;8&#x2F;19</h1><p>今天情绪比较反常，可能是生理原因</p><p>不想干活&#x2F;&#x2F;&#x2F;</p><p>只想躺着刷手机</p><p>唉</p><p>人为什么要有那么多忌惮，就不能不受别人影响不管别人看法心无旁骛地做自己想做的事吗？</p><p>被条条框框束缚着，被迫做不喜欢的事情，痛苦极了</p><h1 id="2022-x2F-8-x2F-20"><a href="#2022-x2F-8-x2F-20" class="headerlink" title="2022&#x2F;8&#x2F;20"></a>2022&#x2F;8&#x2F;20</h1><p>翻到了一张19年暑假去上海玩的时候进入复旦大门时被老妈拍下来的照片</p><p>疫情前的最后一年啊</p><p>那时候的梦校还是复旦</p><p>毕竟没有人能够拒绝“日月光华，旦复旦兮”这几个字的美</p><p>（尽管后来一段时间梦校一度变为浙大，再后来变为清华。不过这是后话了</p><p>以后旅游的话还是应该多拍拍照片，不仅是景，还有人</p><p>什么时候才能摆脱口罩、隔离、核酸…呢？</p><p>可能在我的有生之年是不可能了的吧</p><h1 id="2022-x2F-8-x2F-21"><a href="#2022-x2F-8-x2F-21" class="headerlink" title="2022&#x2F;8&#x2F;21"></a>2022&#x2F;8&#x2F;21</h1><p>明天考科二，保佑😭</p><p>今天上午去特训，600r跑六圈。前三圈开的那辆车离合特别松，准备走时放开刹车准备抬离合时总会莫名其妙地溜车（因为这个我被系统判了两次“中途停车”，淦。然后前三圈我挂了两次</p><p>后三圈换了辆车模拟，那辆车的离合稍微紧一点，所以我有一点平时练车的感觉，开得还不错</p><p>希望明天能抽到像4号车这样离合紧一点的车，而且坐垫不要太低</p><details>    <summary>点开前三思</summary>    最近的一点思考    小县城里，或者说整个中国社会，碰到点事人们就喜欢找关系，希望通过送点人情来让自己办得事更加的轻松一点    驾考考场    “特训你交了钱，他就有义务教你”    但事实上是给安全员打了招呼或者递了烟的学员安全员明显话更多，也更认真    反之，则一直刷手机，在你做得不好时打击你的自信心，而对于怎样规避这个风险一带而过。    可怕的是人们默认人情凌驾于义务规则之上，从而默许这种行为的存在    其实换种角度来看，挺正常的。人们都趋利避害，希望通过最小的损失获取最大的收益，或者是通过一点点小手段在灰色地带操作一番，让自己的利益最大化    我能够理解，但不赞同    医院    “你以后xxx，你看上次家家生病住院在医院有关系就很轻松啊”    可是为什么一定要找那一点“关系”呢    ...    思路被打断了    罢了    随便写写吧</details><h1 id="2022-x2F-8-x2F-26"><a href="#2022-x2F-8-x2F-26" class="headerlink" title="2022&#x2F;8&#x2F;26"></a>2022&#x2F;8&#x2F;26</h1><p>科二过了</p><p>返校政策又变严了</p><p>最近又浪费太多时间在小说上面了，一开始就停不下来了…</p><p>我以前怎么没有发现小说这么好看…</p><hr><p>烦闷的时候，总想放纵一下自己，比如做一些略显疯狂的事，一些不像平时的我会做出来的事</p><p>更烦的时候，只想一个人呆着，漫无目的地刷手机，不希望有人打扰</p><p>可能就是从20年疫情开始的时候，我整个人的神经就处于高度紧绷的状态，偶尔会放松下来，但很短暂</p><p>有时候想想，我没必要追求那么多，能去到曾经最想去的学校就已经很幸运了</p><p>尽管它不是我想象中的样子</p><p>能顺利毕业，就很好了</p><p>想要的太多了，会把自己搞得特别累的</p><p>算了，我也不能一直逃避，等过了这段日子我再干活吧</p><p>我觉得大学配不上高中生对它的憧憬，但我也毫无办法。在学校里，我只是一个普普通通的学生，什么都做不了</p><p>希望过几年疫情能稳定下来，如果还是这样的话，还是尽早润比较好</p><h1 id="2022-x2F-9-x2F-8"><a href="#2022-x2F-9-x2F-8" class="headerlink" title="2022&#x2F;9&#x2F;8"></a>2022&#x2F;9&#x2F;8</h1><p>今天get到了jupyter notebook的好用之处</p><p>起因是看cs系暑培中的爬虫，感觉听懂了但仍然写不出作业（不是写不出，就是总有些我意想不到又无处可改的bug）</p><p>于是决定找些别的爬虫教程和练习</p><p>今天大半天就花费在了用爬虫爬当当网热销榜前500本书（（</p><p>然后用jupyter notebook来debug竟然一步一步地搞了出来</p><p>现在心情十分舒畅</p><p>也许生活就是靠这样的一些瞬间支撑着的</p><h1 id="2022-x2F-9-x2F-9"><a href="#2022-x2F-9-x2F-9" class="headerlink" title="2022&#x2F;9&#x2F;9"></a>2022&#x2F;9&#x2F;9</h1><p>今天在学习selenium</p><p>感觉好神奇</p><p>感觉又体会到学习的乐趣了</p><p>anyway，我喜欢这种不为考试只因兴趣的学习</p><p>明天中秋，然而是周末，并且我们还没开始上课。</p><p>前几天在pyq看到p大树洞的一段话，颇有感触。</p><p>真的好羡慕以前的大学生，没有疫情、封校、核酸、隔离…，周末甚至可以出市玩，而对于我们来说出校都变成了一种奢望。</p><p>有双学位，而且成绩不计入成绩单，可以肆无忌惮地修自己想学的课程，只是在毕业的时候会累点，但可以拿到两个学位证书，比辅修好多了。</p><p>以前的主流是出国，保研是一件不太费力的事情。大家有了保底之后可以在大学多去探索自己想做的事情，而不是为了提升那一点点可怜的gpa而卷生卷死。</p><p>这种生活太压抑了，我不喜欢。</p><p>近期爆出来的伊犁疫情，还有防疫这三年来的种种事件，大众的热情犹如曾热烈燃烧过的小火苗，终于熄灭了，只留下一缕缕黑烟。</p><p>大家都疲惫不堪。</p><p>是啊，说点不符合主流的，核酸里面的利益这么大，为什么不做呢？既然赋红码就可以限制住人们的合法行为，那为了行使自己的那一点点官权为什么不干呢？又“轻松”又“方便”。</p><p>只是，真的会让人心寒啊。</p><p>核酸不再是检测疫情的手段，而是人们需要靠之生存的工具。因为没有那几十个小时的核酸，码就会变色，哪都去不了。</p><p>我甚至悲观地想，在我的有生之年新冠可能是结束不了的了。</p><p>但我不希望，心中的热忱逐渐冷掉。</p><h1 id="2022-x2F-9-x2F-11"><a href="#2022-x2F-9-x2F-11" class="headerlink" title="2022&#x2F;9&#x2F;11"></a>2022&#x2F;9&#x2F;11</h1><p>感觉像今天这样的日子才是生活</p><p>上午用来睡觉和收拾，下午去逛了科学博物馆的三个展厅，然后去游泳，晚上吃顿小火锅，散步回宿舍</p><p>迎面而来的晚风提醒着我：这全都是真实的</p><p>但真实的，也是脆弱的、一闪而过的</p><p>明天是放假的最后一天，打一场飞盘比赛，晚上还有一个小学期课程的总结会</p><p>暑假就真真切切地过完了</p><p>这个暑假，我过得挺舒服的</p><p>学会的最大的一件事就是不要把自己逼得太狠（<del>也就是说服自己摸鱼的时候不要有罪恶感</del></p><p>坦然面对自己不会的知识，不能着急地想把它快点解决掉，而是应该一步步地瓦解它</p><p>慢慢来，比较快</p><p>这还是迪迪姐说的话。</p><p>只是有时候我很容易陷入思维的死局，从而产生巨大的精神内耗</p><p>希望新学期，能够勇敢点</p><p>勇敢地面对不会写的作业、做不完的任务、永远也不够的时间以及所有陌生的事物</p><p>只要朝着自己心中的那个梦想努力，应该就可以了吧…</p>]]></content>
      
      
      <categories>
          
          <category> 浮光掠影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学模型：人类的构思</title>
      <link href="/2022/07/06/shumo/"/>
      <url>/2022/07/06/shumo/</url>
      
        <content type="html"><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><p>参考书：《数学模型（第四版）》姜启源</p><p>目的：备战国赛</p><p>updated：估计就去打打酱油hhh，毕竟没怎么认真学</p><h1 id="第1章-建立数学模型"><a href="#第1章-建立数学模型" class="headerlink" title="第1章 建立数学模型"></a>第1章 建立数学模型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>原型：人们在现实世界里关心、研究或者从事生产、管理的<strong>实际对象</strong>。</p><p>模型：<strong>为了某个特定目的</strong>将原型的某一部分信息简缩、提炼而构造的原型替代物</p><blockquote><p>原型有各个方面和各种层次的特征，而模型只要求反映与某种目的有关的那些方面和层次。</p></blockquote><p>模型：</p><ul><li>物质模型&#x2F;形象模型：<ul><li>直观模型：把原型的尺寸按比例缩小或放大</li><li>物理模型：可显示原型的外形或某些特征，也可以用来进行模拟实验，间接研究原型的某些规律</li></ul></li><li>理想模型&#x2F;抽象模型：<ul><li>思维模型：如司机对方向盘的操纵等</li><li>符号模型：在一些约定或假设下借助专门的符号、线条等，按一定形式组合起来描述原型。如地图等</li><li>数学模型：由<strong>数字、字母或其他数学符号</strong>组成，描述现实对象<strong>数量规律的数学公式、图形或算法</strong></li></ul></li></ul><p>数学模型：对于现实世界的一个<strong>特定对象</strong>，为了一个<strong>特定目的</strong>，根据特有的<strong>内在规律</strong>，作出一些必要的<strong>简化假设</strong>，运用恰当的<strong>数学工具</strong>，得到的一个<strong>数学结构</strong>。</p><h2 id="基本方法-amp-一般步骤"><a href="#基本方法-amp-一般步骤" class="headerlink" title="基本方法&amp;一般步骤"></a>基本方法&amp;一般步骤</h2><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>1.机理分析：找出<strong>反映内部机理</strong>的数量规律</p><p>2.测试分析：将研究对象看作一个“黑箱”系统（即<strong>内部机理看不清楚</strong>），通过对系统输入、输出数据的测量和统计分析，按照一定准测找出与数据拟合得最好的模型</p><p>通常采用两种方法结合起来进行建模，即用机理分析建立模型的结构，用测试分析确定模型的参数</p><h3 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h3><p><img src="/2022/07/06/shumo/assert1.jpg"></p><ul><li><strong>模型准备：</strong>了解问题的实际背景，明确建模目的，搜集资料</li><li><strong>模型假设：</strong>抓住问题本质，作出并简化假设</li><li><strong>模型构成：</strong>根据假设，采用数学的语言建立模型</li><li><strong>模型求解：</strong>可以采用解方程、画图形、优化方法、数值计算、统计分析等各种数学方法，特别是数学软件和计算机技术</li><li><strong>模型分析：</strong>对求解结果进行数学上的分析，如结果的误差分析、统计分析、模型对数据的灵敏性分析、对假设的强健性分析等</li><li><strong>模型检验：</strong>回到实际问题。若结果不符，则通常是模型假设有误。</li><li><strong>模型应用：</strong>应用方式等</li></ul><p>即将实际问题抽象成数学模型，经过计算后得到模型的解答，再拟合实际问题</p><h1 id="第2章-初等模型"><a href="#第2章-初等模型" class="headerlink" title="第2章 初等模型"></a>第2章 初等模型</h1><p>研究对象机理较简单，采用静态、线性、确定性模型描述就能达到建模目的。</p><h2 id="2-1光盘的数据容量"><a href="#2-1光盘的数据容量" class="headerlink" title="2.1光盘的数据容量"></a>2.1光盘的数据容量</h2><h3 id="模型准备"><a href="#模型准备" class="headerlink" title="模型准备"></a>模型准备</h3><p>1.盘片上环形区域面积一定时，数据信息容量的大小取决于信道的<strong>总长度</strong>与信道上存储数据的<strong>线密度</strong>。而二者又取决于<strong>激光波长</strong>和驱动光盘的<strong>机械形式</strong>。</p><p>2.由于光的衍射作用，激光束会形成光斑。光斑大小与激光波长成正比，线密度与光斑大小成反比。</p><p>3.驱动光盘的机械形式分为两种：恒定角速度CAV和恒定线速度CLV</p><ul><li>CAV：转速固定，每一圈螺旋线上要储存同等数量的数据信息。故由内向外，线密度递减。<strong>信息容量取决于螺旋线最内圈的长度、线密度以及总圈数</strong>。</li><li>CLV：线速度固定，线密度不变。<strong>信息容量取决于固定的线密度和螺旋线总长度</strong>。</li></ul><h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><p>螺旋线的长度：</p><ul><li>用同心圆周长之和来近似</li><li>用环形区域面积除以信道间距</li><li>用同心圆平均周长乘以总圈数</li></ul><h2 id="2-2双层玻璃窗的功效"><a href="#2-2双层玻璃窗的功效" class="headerlink" title="2.2双层玻璃窗的功效"></a>2.2双层玻璃窗的功效</h2><p>简单的高中物理热学知识</p><h2 id="2-3划船比赛的成绩"><a href="#2-3划船比赛的成绩" class="headerlink" title="2.3划船比赛的成绩"></a>2.3划船比赛的成绩</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>以研究目的为中心，找相关的影响因素。</p><p>比如建模目的是寻求桨手数量与比赛成绩之间的数量规律。</p><p>影响因素是阻力，影响阻力的因素有桨手数、桨手体重、划桨功率、船速等等。</p><h3 id="模型假设："><a href="#模型假设：" class="headerlink" title="模型假设："></a>模型假设：</h3><p>艇的静态特征（艇的几何形状，艇重与桨手数的关系）、动态特征（船速，阻力），其他因素（桨手体重，每个桨手的划桨功率）</p><h3 id="模型检验"><a href="#模型检验" class="headerlink" title="模型检验"></a>模型检验</h3><p>一般是将实际数据代入模型中看是否吻合</p><h2 id="2-4实物交换"><a href="#2-4实物交换" class="headerlink" title="2.4实物交换"></a>2.4实物交换</h2><p>采用无差别曲线，利用图形方法建立实物交换模型的基础。</p><p>确定曲线需要大量的数据。</p><p><img src="/2022/07/06/shumo/assert2.jpg"></p><p>some thoughts：如果双方交换的物品是三种，可否提出无差别曲面的概念？</p><h2 id="2-5污水均流地的设计"><a href="#2-5污水均流地的设计" class="headerlink" title="2.5污水均流地的设计"></a>2.5污水均流地的设计</h2><h2 id="2-6交通流与道路通行能力"><a href="#2-6交通流与道路通行能力" class="headerlink" title="2.6交通流与道路通行能力"></a>2.6交通流与道路通行能力</h2><ul><li><strong>流量q</strong>：辆&#x2F;h</li><li><strong>速度v</strong>：km&#x2F;h</li><li><strong>密度k</strong>：辆&#x2F;km</li></ul><p>一般认为三者为常数，且q&#x3D;vk</p><h3 id="模型一"><a href="#模型一" class="headerlink" title="模型一"></a>模型一</h3><p>Greenshields提出速度与密度之间存在线性关系：<br>$$<br>v&#x3D;v_f(1-k&#x2F;k_j)<br>$$<br>v_f是密度为0时的车速，即理论上的最高车速，称为<strong>畅行车速</strong></p><p>k_j是速度为0时的密度，称为<strong>阻塞密度</strong></p><p>适用于密度适中的情况</p><p>带入上述公式，可得到流量与密度的关系，为一条抛物线。最大流量出现在畅行车速的一半处</p><h3 id="模型二"><a href="#模型二" class="headerlink" title="模型二"></a>模型二</h3><p>对数模型，适用于密度较大的情况<br>$$<br>v&#x3D;v_1ln(k_j&#x2F;k)<br>$$</p><h3 id="模型三"><a href="#模型三" class="headerlink" title="模型三"></a>模型三</h3><p>指数模型，适用于密度较小的情况<br>$$<br>v&#x3D;v_fexp(-k&#x2F;k_j)<br>$$</p><h2 id="2-7核军备竞赛"><a href="#2-7核军备竞赛" class="headerlink" title="2.7核军备竞赛"></a>2.7核军备竞赛</h2><p>也是建立图的模型</p><p>采用最小逼近方法</p><h2 id="2-8扬帆远航"><a href="#2-8扬帆远航" class="headerlink" title="2.8扬帆远航"></a>2.8扬帆远航</h2><p>简单的物理速度分解知识以及没学过的流体力学知识</p><h2 id="2-9天气预防的评价"><a href="#2-9天气预防的评价" class="headerlink" title="2.9天气预防的评价"></a>2.9天气预防的评价</h2><h1 id="第三章-简单的优化模型"><a href="#第三章-简单的优化模型" class="headerlink" title="第三章 简单的优化模型"></a>第三章 简单的优化模型</h1><p>首先确定优化的目标是什么，寻求的决策是什么，限制条件，用什么数学工具（变量、常数、函数等）表示，怎样简化假设等等</p><h2 id="3-1存贮模型"><a href="#3-1存贮模型" class="headerlink" title="3.1存贮模型"></a>3.1存贮模型</h2><h3 id="不允许缺货的存贮模型"><a href="#不允许缺货的存贮模型" class="headerlink" title="不允许缺货的存贮模型"></a>不允许缺货的存贮模型</h3><p>经济订货批量公式（EOQ公式）</p><h3 id="允许缺货的存贮模型"><a href="#允许缺货的存贮模型" class="headerlink" title="允许缺货的存贮模型"></a>允许缺货的存贮模型</h3><p>将假设3改为：每天每件产品缺货损失费为c_3</p><h2 id="3-2生猪的出售时机"><a href="#3-2生猪的出售时机" class="headerlink" title="3.2生猪的出售时机"></a>3.2生猪的出售时机</h2><p>敏感性分析和强健性分析：本质是模型需要考虑到现实中的各种因素，不能过于理想化。</p>]]></content>
      
      
      <categories>
          
          <category> 理想中的数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs61a：从入土到入门</title>
      <link href="/2022/07/02/cs61aa/"/>
      <url>/2022/07/02/cs61aa/</url>
      
        <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>版本：CS 61A Fall 2021</p><p>记录homework, lab and projects.</p><p>github地址：<a href="https://github.com/liuydd/cs61a-2021fall">liuydd&#x2F;cs61a-2021fall (github.com)</a></p><h2 id="HW-01-Control"><a href="#HW-01-Control" class="headerlink" title="HW 01:Control"></a>HW 01:Control</h2><p>可能刚开始，连ok用的都不太熟练，所以hw01做的比较水…</p><p>cs61a每一题都会给出大概的模板，(<del>是为了避免让你造轮子吗</del></p><h3 id="Q2-A-Plus-Abs-B"><a href="#Q2-A-Plus-Abs-B" class="headerlink" title="Q2:A Plus Abs B"></a>Q2:A Plus Abs B</h3><p>Fill in the blanks in the following function for adding <code>a</code> to the absolute value of <code>b</code>, without calling <code>abs</code>. You may <strong>not</strong> modify any of the provided code other than the two blanks.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q a_plus_abs_b</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = a-b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = a+b</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><h3 id="Q3-Two-of-Three"><a href="#Q3-Two-of-Three" class="headerlink" title="Q3: Two of Three"></a>Q3: Two of Three</h3><p>Write a function that takes three <em>positive</em> numbers as arguments and returns the sum of the squares of the two smallest numbers.<strong>Use only a single line for the body of the function.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> _____</span><br></pre></td></tr></table></figure><blockquote><p><strong>Hint:</strong> Consider using the <code>max</code> or <code>min</code> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>)</span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure></blockquote><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q two_of_three</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x*x+y*y+z*z-<span class="built_in">max</span>(x,y,z)*<span class="built_in">max</span>(x,y,z)</span><br></pre></td></tr></table></figure><h3 id="Q4-Largest-Factor"><a href="#Q4-Largest-Factor" class="headerlink" title="Q4: Largest Factor"></a>Q4: Largest Factor</h3><p>Write a function that takes an integer <code>n</code> that is <strong>greater than 1</strong> andreturns the largest integer that is smaller than <code>n</code> and evenly divides <code>n</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Hint:</strong> To check if <code>b</code> evenly divides <code>a</code>, you can use the expression <code>a % b == 0</code>, which can be read as, “the remainder of dividing <code>a</code> by <code>b</code> is 0.”</p></blockquote><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q largest_factor</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i=n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n%i!=<span class="number">0</span>:</span><br><span class="line">        i=i-<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="Q6-Hailstone"><a href="#Q6-Hailstone" class="headerlink" title="Q6: Hailstone"></a>Q6: Hailstone</h3><p>Douglas Hofstadter’s Pulitzer-prize-winning book, <em>Gödel, Escher, Bach</em>, poses the following mathematical puzzle.</p><ol><li>Pick a positive integer <code>n</code> as the start.</li><li>If <code>n</code> is even, divide it by 2.</li><li>If <code>n</code> is odd, multiply it by 3 and add 1.</li><li>Continue this process until <code>n</code> is 1.</li></ol><p>The number <code>n</code> will travel up and down but eventually end at 1 (at least for all numbers that have ever been tried – nobody has ever proved that the sequence will terminate). Analogously, a hailstone travels up and down in the atmosphere before eventually landing on earth.</p><p>This sequence of values of <code>n</code> is often called a Hailstone sequence. Write a function that takes a single argument with formal parameter name <code>n</code>, prints out the hailstone sequence starting at <code>n</code>, and returns the number of steps in the sequence:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the hailstone sequence starting at n and return its</span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Hailstone sequences can get quite long! Try 27. What’s the longest you can find?</p><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q hailstone</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hw01 Q6:Hailstone</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n!=<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(n))</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            n=n/<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=n*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#print(int(i))</span></span><br></pre></td></tr></table></figure><h2 id="Lab-01-Variables-amp-Functions-Control"><a href="#Lab-01-Variables-amp-Functions-Control" class="headerlink" title="Lab 01: Variables &amp; Functions,Control"></a>Lab 01: Variables &amp; Functions,Control</h2><h3 id="Q4：-Falling-Factorial"><a href="#Q4：-Falling-Factorial" class="headerlink" title="Q4： Falling Factorial"></a>Q4： Falling Factorial</h3><p>Let’s write a function <code>falling</code>, which is a “falling” factorial that takes two arguments, <code>n</code> and <code>k</code>, and returns the product of <code>k</code> consecutive numbers, starting from <code>n</code> and working downwards. When <code>k</code> is 0, the function should return 1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">falling</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q falling</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">falling</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;  if(k==0):</span></span><br><span class="line"><span class="string">        temp=1</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        temp=n</span></span><br><span class="line"><span class="string">        while(k!=1):</span></span><br><span class="line"><span class="string">            k-=1</span></span><br><span class="line"><span class="string">            temp*=(n-1)</span></span><br><span class="line"><span class="string">            n-=1</span></span><br><span class="line"><span class="string">    return temp    &#x27;&#x27;&#x27;</span></span><br><span class="line">    total,stop=<span class="number">1</span>,n-k</span><br><span class="line">    <span class="keyword">while</span> n&gt;stop:</span><br><span class="line">        total,n=total*n,n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total                <span class="comment">#感觉python有很多都和C++不同，而我的思维还在C++上面</span></span><br></pre></td></tr></table></figure><h3 id="Q5-Sum-Digits"><a href="#Q5-Sum-Digits" class="headerlink" title="Q5: Sum Digits"></a>Q5: Sum Digits</h3><p>Write a function that takes in a nonnegative integer and sums its digits. (Using floor division and modulo might be helpful here!)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q sum_digits</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    total=y%<span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span>(y!=<span class="number">0</span>):</span><br><span class="line">        y=y//<span class="number">10</span></span><br><span class="line">        total+=y%<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> total         <span class="comment">#这个过的挺轻松的</span></span><br></pre></td></tr></table></figure><h3 id="Q7-Double-Eights"><a href="#Q7-Double-Eights" class="headerlink" title="Q7: Double Eights"></a>Q7: Double Eights</h3><p>Write a function that takes in a number and determines if the digits contain two<br>adjacent 8s.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_eights</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q double_eights</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_eights</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>):</span><br><span class="line">        t=n%<span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">8</span>):</span><br><span class="line">            n//=<span class="number">10</span></span><br><span class="line">            _t=n%<span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span>(_t==<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n//=<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>    <span class="comment">#最后这里不要忘了还有个return，针对while循环走完的情况</span></span><br></pre></td></tr></table></figure><h2 id="Project1：The-Game-of-Hog"><a href="#Project1：The-Game-of-Hog" class="headerlink" title="Project1：The Game of Hog"></a>Project1：The Game of Hog</h2><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><ul><li><strong>Sow Sad:</strong> If any of the dice outcomes is a 1, the current player’s score for the turn is <code>1</code>.<ul><li>所有骰子中有一个数为1，则得1分</li></ul></li><li><strong>Picky Piggy:</strong> A player who chooses to roll zero dice scores the <code>n</code>th digit of the decimal expansion of 1&#x2F;7 (0.14285714…), where <code>n</code> is the opponent’s score. As a special case, if <code>n</code> is 0, the player scores 7 points.<ul><li>玩家选择不掷骰子，则对手分数为几，他的分数就为1&#x2F;7的第几位数字</li></ul></li><li><strong>Hog Pile:</strong> After points for the turn are added to the current player’s score, if  the players’ scores are the same, the current player’s score doubles.<ul><li>如果当前玩家掷骰子后的分数与对手相同，则当前玩家分数翻倍</li></ul></li></ul><h3 id="Phase1-Simulator"><a href="#Phase1-Simulator" class="headerlink" title="Phase1: Simulator"></a>Phase1: Simulator</h3><p>In the first phase, you will develop a simulator for the game of Hog.</p><h4 id="Problem-0"><a href="#Problem-0" class="headerlink" title="Problem 0"></a>Problem 0</h4><ul><li>a fair dice：正常的骰子</li><li>a test dice：在输入进去的数中选一个输出</li></ul><h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><p>num_rolls：要掷的骰子数量</p><p>dice：所掷的骰子情况</p><blockquote><p>cs61a的project会先设置一个unlocking环节，以填空的形式确保你真的理解了题目的意思</p><p>居然还会给你debugging tips，有点感动</p></blockquote><p><strong>www我破防了，为什么unlocking只能用vscode交互而不能用git</strong></p><p><del>刚夸了这个理解程序的功能，结果在这耗了四五十分钟…</del></p><p>讲个笑话：</p><p><img src="/2022/07/02/cs61aa/img1.png"></p><blockquote><p>死者：lyd</p><p>死因：python3.9 -q 01 -u –local的50+cases</p><p><del>太好了，不是50+，只有几个cases</del></p></blockquote><p>attention：令a&#x3D;make_test_dice(4,1,2,6)，roll_dice(3,a)输出后，roll_dice(1,a)中a的值会接着来。</p><p>anyway，Berkerly的这门课程让我喜欢的就在这，给出了error、是哪个suite出了问题、过了多少个cases</p><p><img src="/2022/07/02/cs61aa/img2.png"></p><p><del>又到了愉快的debug时间</del></p><p><img src="/2022/07/02/cs61aa/img3.png"></p><p>好开心！！！虽然是个很简单的函数，虽然不知道前几次为什么过不了…</p><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">roll_dice</span>(<span class="params">num_rolls, dice=six_sided</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate rolling the DICE exactly NUM_ROLLS &gt; 0 times. Return the sum of</span></span><br><span class="line"><span class="string">    the outcomes unless any of the outcomes is 1. In that case, return 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    num_rolls:  The number of dice rolls that will be made.</span></span><br><span class="line"><span class="string">    dice:       A function that simulates a single dice roll outcome.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># These assert statements ensure that num_rolls is a positive integer.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(num_rolls) == <span class="built_in">int</span>, <span class="string">&#x27;num_rolls must be an integer.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &gt; <span class="number">0</span>, <span class="string">&#x27;Must roll at least once.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="built_in">sum</span>,f=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    num_of_rolls=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num_of_rolls&lt;=num_rolls:</span><br><span class="line">        c=dice()</span><br><span class="line">        <span class="built_in">sum</span>+=c</span><br><span class="line">        num_of_rolls+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c==<span class="number">1</span>:</span><br><span class="line">            f=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> f==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>        </span><br><span class="line">    <span class="comment"># END PROBLEM 1</span></span><br></pre></td></tr></table></figure><h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h4><p>写的比较水…用枚举的方法直接AC</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">picky_piggy</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the points scored from rolling 0 dice.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    score:  The opponent&#x27;s current score.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> score%<span class="number">6</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s=score%<span class="number">6</span></span><br><span class="line">        <span class="keyword">if</span> s==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># END PROBLEM 2</span></span><br></pre></td></tr></table></figure><h4 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem 3"></a>Problem 3</h4><p>函数take_turn：综合考虑roll_dice和picky_piggy情况。即若num_rolls&gt;0，按roll_dice考虑，若num_rolls&#x3D;0，按picky_piggy考虑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">take_turn</span>(<span class="params">num_rolls, opponent_score, dice=six_sided, goal=GOAL_SCORE</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate a turn rolling NUM_ROLLS dice, which may be 0 in the case</span></span><br><span class="line"><span class="string">    of a player using Picky Piggy.</span></span><br><span class="line"><span class="string">    Return the points scored for the turn by the current player.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    num_rolls:       The number of dice rolls that will be made.</span></span><br><span class="line"><span class="string">    opponent_score:  The total score of the opponent.</span></span><br><span class="line"><span class="string">    dice:            A function that simulates a single dice roll outcome.</span></span><br><span class="line"><span class="string">    goal:            The goal score of the game.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Leave these assert statements here; they help check for errors.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(num_rolls) == <span class="built_in">int</span>, <span class="string">&#x27;num_rolls must be an integer.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &gt;= <span class="number">0</span>, <span class="string">&#x27;Cannot roll a negative number of dice in take_turn.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &lt;= <span class="number">10</span>, <span class="string">&#x27;Cannot roll more than 10 dice.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> opponent_score &lt; goal, <span class="string">&#x27;The game should be over.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> num_rolls==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> picky_piggy(opponent_score)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> roll_dice(num_rolls,dice)</span><br><span class="line">    <span class="comment"># END PROBLEM 3</span></span><br></pre></td></tr></table></figure><h4 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem 4"></a>Problem 4</h4><p>函数hog_pile：return的是current player增加的points，而非总points</p><p>如果player_score!&#x3D;opponent_score，则return 0；反之，return player_score</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hog_pile</span>(<span class="params">player_score, opponent_score</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the points scored by player due to Hog Pile.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    player_score:   The total score of the current player.</span></span><br><span class="line"><span class="string">    opponent_score: The total score of the other player.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 4</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> player_score!=opponent_score:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> player_score</span><br><span class="line">    <span class="comment"># END PROBLEM 4</span></span><br></pre></td></tr></table></figure><h4 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem 5"></a>Problem 5</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">strategy0, strategy1, score0=<span class="number">0</span>, score1=<span class="number">0</span>, dice=six_sided,</span></span><br><span class="line"><span class="params">         goal=GOAL_SCORE, say=silence</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate a game and return the final scores of both players, with Player</span></span><br><span class="line"><span class="string">    0&#x27;s score first, and Player 1&#x27;s score second.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A strategy is a function that takes two total scores as arguments (the</span></span><br><span class="line"><span class="string">    current player&#x27;s score, and the opponent&#x27;s score), and returns a number of</span></span><br><span class="line"><span class="string">    dice that the current player will roll this turn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    strategy0:  The strategy function for Player 0, who plays first.</span></span><br><span class="line"><span class="string">    strategy1:  The strategy function for Player 1, who plays second.</span></span><br><span class="line"><span class="string">    score0:     Starting score for Player 0</span></span><br><span class="line"><span class="string">    score1:     Starting score for Player 1</span></span><br><span class="line"><span class="string">    dice:       A function of zero arguments that simulates a dice roll.</span></span><br><span class="line"><span class="string">    goal:       The game ends and someone wins when this score is reached.</span></span><br><span class="line"><span class="string">    say:        The commentary function to call at the end of the first turn.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    who = <span class="number">0</span>  <span class="comment"># Who is about to take a turn, 0 (first) or 1 (second)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> score0&lt;goal <span class="keyword">and</span> score1&lt;goal:</span><br><span class="line">        <span class="keyword">if</span> next_player(who)==<span class="number">1</span>:</span><br><span class="line">            score0+=take_turn(strategy0(score0,score1), score1, dice, goal)</span><br><span class="line">            a=hog_pile(score0,score1)</span><br><span class="line">            score0+=a</span><br><span class="line">            who=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> next_player(who)==<span class="number">0</span>:</span><br><span class="line">            score1+=take_turn(strategy1(score1,score0),score0,dice,goal) <span class="comment">#这里如果继续的话可能会有score0&gt;goal而游戏还没停止，所以应该增加判断</span></span><br><span class="line">            b=hog_pile(score1,score0)</span><br><span class="line">            score1+=b</span><br><span class="line">            who=<span class="number">0</span></span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br><span class="line">    <span class="comment"># (note that the indentation for the problem 6 prompt (***YOUR CODE HERE***) might be misleading)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br><span class="line">    <span class="keyword">return</span> score0, score1</span><br></pre></td></tr></table></figure><h3 id="Phase-2：Commentary"><a href="#Phase-2：Commentary" class="headerlink" title="Phase 2：Commentary"></a>Phase 2：Commentary</h3><p>这个phase不重要吧，我就不改了（暴论</p><h4 id="Problem-6"><a href="#Problem-6" class="headerlink" title="Problem 6"></a>Problem 6</h4><p>比较简单，不知为何，-u环节我的line2过不了，总报not quite。</p><h4 id="Problem-7"><a href="#Problem-7" class="headerlink" title="Problem 7"></a>Problem 7</h4><p>…比较离谱</p><p><strong>to be debug</strong></p><p>执行了python3 hog_gui.py后发现bug：</p><ul><li><p>底下的文字不会消失，本应该报历史最大新增，但却报的是当前的points，如</p><blockquote><p>8 point(s)! That’s a record gain for Player 0! 8 point(s)! That’s a record gain for Player 1!</p></blockquote></li></ul><h3 id="Phase3：Strategies"><a href="#Phase3：Strategies" class="headerlink" title="Phase3：Strategies"></a>Phase3：Strategies</h3><h4 id="Problem-8"><a href="#Problem-8" class="headerlink" title="Problem 8"></a>Problem 8</h4><blockquote><p><strong>a new piece of Python syntax</strong></p><p>We would like to write a function that accepts an arbitrary number of arguments, and then calls another function using exactly those arguments. Here’s how it works.</p><p>Instead of listing formal parameters for a function, you can write <code>*args</code>, which represents all of the <strong>arg</strong>ument<strong>s</strong> that get passed into the function. We can then call another function with these same arguments by passing these <code>*args</code> into this other function. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">def</span> <span class="title function_">printed</span>(<span class="params">f</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_and_return</span>(<span class="params">*args</span>):</span><br><span class="line">         result=f(*args)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;Result:&#x27;</span>,result)</span><br><span class="line">         <span class="keyword">return</span> result</span><br><span class="line">     <span class="keyword">return</span> print_and_return</span><br></pre></td></tr></table></figure></blockquote><p>简单的循环计算sum</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_averaged</span>(<span class="params">original_function, trials_count=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that returns the average value of ORIGINAL_FUNCTION</span></span><br><span class="line"><span class="string">    called TRIALS_COUNT times.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To implement this function, you will have to use *args syntax, a new Python</span></span><br><span class="line"><span class="string">    feature introduced in this project.  See the project description.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dice = make_test_dice(4, 2, 5, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice = make_averaged(roll_dice, 1000)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice(1, dice)</span></span><br><span class="line"><span class="string">    3.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">*args</span>):</span><br><span class="line">        dice_nums=<span class="number">1</span></span><br><span class="line">        <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dice_nums&lt;=trials_count:</span><br><span class="line">            <span class="built_in">sum</span>+=original_function(*args)</span><br><span class="line">            dice_nums+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>/trials_count</span><br><span class="line">    <span class="keyword">return</span> average</span><br><span class="line">    <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure><h4 id="Problem-9"><a href="#Problem-9" class="headerlink" title="Problem 9"></a>Problem 9</h4><p>注意调用含*args函数的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_scoring_num_rolls</span>(<span class="params">dice=six_sided, trials_count=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of dice (1 to 10) that gives the highest average turn score</span></span><br><span class="line"><span class="string">    by calling roll_dice with the provided DICE a total of TRIALS_COUNT times.</span></span><br><span class="line"><span class="string">    Assume that the dice always return positive outcomes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dice = make_test_dice(1, 6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_scoring_num_rolls(dice)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 9</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment">#要用到make_averaged和roll_dice(num_rolls,dice)</span></span><br><span class="line">    max_ave,num=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    flag=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num&lt;=<span class="number">10</span>:</span><br><span class="line">        a=make_averaged(roll_dice,trials_count)</span><br><span class="line">        b=a(num,dice)</span><br><span class="line">        <span class="keyword">if</span> max_ave&lt;b:</span><br><span class="line">            max_ave=b</span><br><span class="line">            flag=num</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">    <span class="comment"># END PROBLEM 9</span></span><br></pre></td></tr></table></figure><h4 id="Problem-10"><a href="#Problem-10" class="headerlink" title="Problem 10"></a>Problem 10</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">picky_piggy_strategy</span>(<span class="params">score, opponent_score, cutoff=<span class="number">8</span>, num_rolls=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;This strategy returns 0 dice if that gives at least CUTOFF points, and</span></span><br><span class="line"><span class="string">    returns NUM_ROLLS otherwise.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 10</span></span><br><span class="line">    <span class="keyword">if</span> picky_piggy(opponent_score)&gt;=cutoff:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num_rolls</span><br><span class="line">    <span class="comment"># END PROBLEM 10</span></span><br></pre></td></tr></table></figure><h4 id="Problem-11"><a href="#Problem-11" class="headerlink" title="Problem 11"></a>Problem 11</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hog_pile_strategy</span>(<span class="params">score, opponent_score, cutoff=<span class="number">8</span>, num_rolls=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;This strategy returns 0 dice when this would result in Hog Pile taking</span></span><br><span class="line"><span class="string">    effect. It also returns 0 dice if it gives at least CUTOFF points.</span></span><br><span class="line"><span class="string">    Otherwise, it returns NUM_ROLLS.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 11</span></span><br><span class="line">    a=hog_pile(score+picky_piggy(opponent_score),opponent_score)</span><br><span class="line">    <span class="keyword">if</span> a!=<span class="number">0</span>:  <span class="comment">#触发了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> picky_piggy(opponent_score)&gt;=cutoff:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num_rolls</span><br><span class="line">    <span class="comment"># END PROBLEM 11</span></span><br></pre></td></tr></table></figure><h3 id="Some-feelings-when-finishing-the-project"><a href="#Some-feelings-when-finishing-the-project" class="headerlink" title="Some feelings when finishing the project"></a>Some feelings when finishing the project</h3><p>写的过程比较痛苦。</p><p>这个痛苦主要在于语言。毕竟是第一次做project，还是全英文，有好几处都不能理解，还好有部分cases来帮助我理解这个函数的作用。</p><p>写的过程有部分借鉴，但95%均为本人完成（有的看上去就写的很烂的代码除了你还有谁会写出来啊喂</p><p>写完的成就感还是很高的，高于写的过程中感受到的痛苦。</p><p>喜欢这种一个problem一个problem给我让我完成的，等我一步步写完后发现，我居然也能写个小游戏出来了（x</p><p>课程本身帮你写好了GUI，代码每完成一部分，就可以执行python3 hog_gui.py来试试功能。</p><p>挺好的，我就喜欢这种一看就知道重点在哪的project。</p><h2 id="HW-02-Higher-Order-Functions"><a href="#HW-02-Higher-Order-Functions" class="headerlink" title="HW 02: Higher-Order Functions"></a>HW 02: Higher-Order Functions</h2><h3 id="Required-questions"><a href="#Required-questions" class="headerlink" title="Required questions"></a>Required questions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line">identity = <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line">triple = <span class="keyword">lambda</span> x: <span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Q1：Product"><a href="#Q1：Product" class="headerlink" title="Q1：Product"></a>Q1：Product</h3><p>The <code>summation(n, term)</code> function from the higher-order functions lecture adds up <code>term(1) + ... + term(n)</code>. Write a similar function called <code>product</code> that returns <code>term(1) * ... * term(n)</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the product of the first n terms in a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n: a positive integer</span></span><br><span class="line"><span class="string">    term:  a function that takes one argument to produce the term</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, identity)  # 1 * 2 * 3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, identity)  # 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, square)    # 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span><br><span class="line"><span class="string">    14400</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, increment) # (1+1) * (2+1) * (3+1)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, triple)    # 1*3 * 2*3 * 3*3</span></span><br><span class="line"><span class="string">    162</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">n, term</span>):</span><br><span class="line">    a,pro=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a&lt;=n:</span><br><span class="line">        pro*=term(a)</span><br><span class="line">        a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pro</span><br></pre></td></tr></table></figure><h3 id="Q2：Accumulate"><a href="#Q2：Accumulate" class="headerlink" title="Q2：Accumulate"></a>Q2：Accumulate</h3><p>Let’s take a look at how <code>summation</code> and <code>product</code> are instances of a more general function called <code>accumulate</code>, which we would like to implement:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">merger, base, n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the result of merging the first n terms in a sequence and base.</span></span><br><span class="line"><span class="string">    The terms to be merged are term(1), term(2), ..., term(n). merger is a</span></span><br><span class="line"><span class="string">    two-argument commutative function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    26</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 0, identity) # 11</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: x + y + 1, 2, 3, square)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ((2 * 1^2 * 2) * 2^2 * 2) * 3^2 * 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: 2 * x * y, 2, 3, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: (x + y) % 17, 19, 20, square)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>After implementing <code>accumulate</code>, show how <code>summation</code> and <code>product</code> can both be defined as function calls to <code>accumulate</code>.</p><p><strong>Important:</strong> You should have a single line of code (which should be a <code>return</code> statement) in each of your implementations for <code>summation_using_accumulate</code> and <code>product_using_accumulate</code>, which the syntax check will check for.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">summation_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the sum: term(1) + ... + term(n), using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, square)</span></span><br><span class="line"><span class="string">    55</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, triple)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the product: term(1) * ... * term(n), using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(4, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(6, triple)</span></span><br><span class="line"><span class="string">    524880</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">merger, base, n, term</span>):</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a&lt;=n:</span><br><span class="line">         base=merger(base,term(a))</span><br><span class="line">         a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> base</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summation_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(add,<span class="number">1</span>,n,term)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(mul,<span class="number">1</span>,n,term)</span><br></pre></td></tr></table></figure><p>一点点感触：果然简洁的才是最美的</p><h3 id="Q3：Church-numerals（just-for-fun-question"><a href="#Q3：Church-numerals（just-for-fun-question" class="headerlink" title="Q3：Church numerals（just for fun question)"></a>Q3：Church numerals（just for fun question)</h3><blockquote><p>This question is out of scope for 61A. You can try it if you want an extra challenge, but it’s just a puzzle that is not required or recommended at all. <strong>Almost all students will skip it, and that’s fine.</strong></p></blockquote><p>to be debug…</p><h2 id="Lab2：Higher-Order-Functions，Lambda-Expressions"><a href="#Lab2：Higher-Order-Functions，Lambda-Expressions" class="headerlink" title="Lab2：Higher-Order Functions，Lambda Expressions"></a>Lab2：Higher-Order Functions，Lambda Expressions</h2><h3 id="Q3：Lambdas-and-Currying"><a href="#Q3：Lambdas-and-Currying" class="headerlink" title="Q3：Lambdas and Currying"></a>Q3：Lambdas and Currying</h3><p>We can transform multiple-argument functions into a chain of single-argument, higher order functions by taking advantage of lambda expressions. For example, we can write a function <code>f(x, y)</code> as a different function <code>g(x)(y)</code>. This is known as <strong>currying</strong>. It’s useful when dealing with functions that take only single-argument functions. We will see some examples of these later on.</p><p>Write a function <code>lambda_curry2</code> that will curry any two argument function using lambdas. Refer to the <a href="http://composingprograms.com/pages/16-higher-order-functions.html#currying">textbook</a> for more details about currying.</p><p><strong>Your solution to this problem should fit entirely on the return line.</strong> You can try first writing a solution without the restriction, and then rewriting it into one line after.</p><blockquote><p><strong>If the syntax check isn’t passing:</strong> Make sure you’ve removed the line containing <code>&quot;***YOUR CODE HERE***&quot;</code> so that it doesn’t get treated as part of the function for the syntax check.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_curry2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns a Curried version of a two-argument function FUNC.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from operator import add, mul, mod</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; curried_add = lambda_curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = curried_add(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; curried_mul = lambda_curry2(mul)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_5 = curried_mul(5)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_5(42)</span></span><br><span class="line"><span class="string">    210</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lambda_curry2(mod)(123)(10)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> ______</span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q lambda_curry2</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_curry2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x:<span class="keyword">lambda</span> y:func(x,y)</span><br></pre></td></tr></table></figure><h3 id="Q4：Count-van-Count"><a href="#Q4：Count-van-Count" class="headerlink" title="Q4：Count van Count"></a>Q4：Count van Count</h3><p>Consider the following implementations of <code>count_factors</code> and <code>count_primes</code>:</p><p>The implementations look quite similar! Generalize this logic by writing a function <code>count_cond</code>, which takes in a two-argument predicate function <code>condition(n, i)</code>. <code>count_cond</code> returns a one-argument function that takes in <code>n</code>, which counts all the numbers from 1 to <code>n</code> that satisfy <code>condition</code> when called.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_cond</span>(<span class="params">condition</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function with one parameter N that counts all the numbers from</span></span><br><span class="line"><span class="string">    1 to N that satisfy the two-argument predicate function Condition, where</span></span><br><span class="line"><span class="string">    the first argument for Condition is N and the second argument is the</span></span><br><span class="line"><span class="string">    number from 1 to N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors = count_cond(lambda n, i: n % i == 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(2)   # 1, 2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(4)   # 1, 2, 4</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(12)  # 1, 2, 3, 4, 6, 12</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime = lambda n, i: count_factors(i) == 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes = count_cond(is_prime)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(2)    # 2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(3)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(4)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(5)    # 2, 3, 5</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(20)   # 2, 3, 5, 7, 11, 13, 17, 19</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q count_cond</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_cond</span>(<span class="params">condition</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count_func</span>(<span class="params">n</span>):</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=n:</span><br><span class="line">            <span class="keyword">if</span> condition(n,i):</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> count_func</span><br></pre></td></tr></table></figure><h3 id="Q7：Composite-Identity-Function"><a href="#Q7：Composite-Identity-Function" class="headerlink" title="Q7：Composite Identity Function"></a>Q7：Composite Identity Function</h3><p>optional</p><p>Write a function that takes in two single-argument functions, <code>f</code> and <code>g</code>, and returns another <strong>function</strong> that has a single parameter <code>x</code>. The returned function should return <code>True</code> if <code>f(g(x))</code> is equal to <code>g(f(x))</code>. You can assume the output of <code>g(x)</code> is a valid input for <code>f</code> and vice versa. Try to use the <code>composer</code> function defined below for more HOF practice.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">composer</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the composition function which given x, computes f(g(x)).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1 = composer(square, add_one)   # (x + 1)^2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1(4)</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_three = lambda x: x * 3      # multiplies 3 to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2 = composer(mul_three, a1)    # ((x + 1)^2) * 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(4)</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(5)</span></span><br><span class="line"><span class="string">    108</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">composite_identity</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a function with one parameter x that returns True if f(g(x)) is</span></span><br><span class="line"><span class="string">    equal to g(f(x)). You can assume the result of g(x) is a valid input for f</span></span><br><span class="line"><span class="string">    and vice versa.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1 = composite_identity(square, add_one)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(0)                            # (0 + 1)^2 == 0^2 + 1</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(4)                            # (4 + 1)^2 != 4^2 + 1</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q composite_identity</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">composite_identity</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">judge</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> composer(f,g)(x)==composer(g,f)(x):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> judge</span><br></pre></td></tr></table></figure><h3 id="Q8：I-Heard-You-Liked-Functions…"><a href="#Q8：I-Heard-You-Liked-Functions…" class="headerlink" title="Q8：I Heard You Liked Functions…"></a>Q8：I Heard You Liked Functions…</h3><p>optional</p><p>Define a function <code>cycle</code> that takes in three functions <code>f1</code>, <code>f2</code>, <code>f3</code>, as arguments. <code>cycle</code> will return another function that should take in an integer argument <code>n</code> and return another function. That final function should take in an argument <code>x</code> and cycle through applying <code>f1</code>, <code>f2</code>, and <code>f3</code> to <code>x</code>, depending on what <code>n</code> was. Here’s what the final function should do to <code>x</code> for a few values of <code>n</code>:</p><ul><li><code>n = 0</code>, return <code>x</code></li><li><code>n = 1</code>, apply <code>f1</code> to <code>x</code>, or return <code>f1(x)</code></li><li><code>n = 2</code>, apply <code>f1</code> to <code>x</code> and then <code>f2</code> to the result of that, or return <code>f2(f1(x))</code></li><li><code>n = 3</code>, apply <code>f1</code> to <code>x</code>, <code>f2</code> to the result of applying <code>f1</code>, and then <code>f3</code> to the result of applying <code>f2</code>, or <code>f3(f2(f1(x)))</code></li><li><code>n = 4</code>, start the cycle again applying <code>f1</code>, then <code>f2</code>, then <code>f3</code>, then <code>f1</code> again, or <code>f1(f3(f2(f1(x))))</code></li><li>And so forth.</li></ul><p><em>Hint</em>: most of the work goes inside the most nested function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cycle</span>(<span class="params">f1, f2, f3</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function that is itself a higher-order function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add1(x):</span></span><br><span class="line"><span class="string">    ...     return x + 1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def times2(x):</span></span><br><span class="line"><span class="string">    ...     return x * 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add3(x):</span></span><br><span class="line"><span class="string">    ...     return x + 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_cycle = cycle(add1, times2, add3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity = my_cycle(0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity(5)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double = my_cycle(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double(1)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions = my_cycle(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions(2)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle = my_cycle(4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle(2)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles = my_cycle(6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles(1)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q cycle</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cycle</span>(<span class="params">f1, f2, f3</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x</span>):</span><br><span class="line">                <span class="keyword">return</span> f1(x)</span><br><span class="line">            <span class="keyword">return</span> f2(f1(x))</span><br><span class="line">        <span class="keyword">return</span> f3(f2(f1(x)))</span><br><span class="line">    <span class="keyword">return</span> func1</span><br></pre></td></tr></table></figure><h2 id="Disc-2：Higher-Order-Functions，Self-Reference"><a href="#Disc-2：Higher-Order-Functions，Self-Reference" class="headerlink" title="Disc 2：Higher-Order Functions，Self Reference"></a>Disc 2：Higher-Order Functions，Self Reference</h2><h3 id="Q1：Make-Keeper"><a href="#Q1：Make-Keeper" class="headerlink" title="Q1：Make Keeper"></a>Q1：Make Keeper</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_keeper</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function which takes one parameter cond and prints</span></span><br><span class="line"><span class="string">    out all integers 1..i..n where calling cond(i) returns True.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def is_even(x):</span></span><br><span class="line"><span class="string">    ...     # Even numbers have remainder 0 when divided by 2.</span></span><br><span class="line"><span class="string">    ...     return x % 2 == 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_keeper(5)(is_even)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">cond</span>):</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=n:</span><br><span class="line">            <span class="keyword">if</span> cond(i):</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> func</span><br></pre></td></tr></table></figure><h3 id="Q5：Print-N"><a href="#Q5：Print-N" class="headerlink" title="Q5：Print N"></a>Q5：Print N</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_n</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_n(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = f(&quot;hi&quot;)</span></span><br><span class="line"><span class="string">    hi</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = f(&quot;hello&quot;)</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = f(&quot;bye&quot;)</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g = print_n(1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g(&quot;first&quot;)(&quot;second&quot;)(&quot;third&quot;)</span></span><br><span class="line"><span class="string">    first</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    &lt;function inner_print&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_print</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="keyword">return</span> print_n(n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> inner_print</span><br></pre></td></tr></table></figure><h3 id="Q8：Match-Maker"><a href="#Q8：Match-Maker" class="headerlink" title="Q8：Match Maker"></a>Q8：Match Maker</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match_k</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return a function that checks if digits k apart match</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(2)(1010)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(2)(2010)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(1)(1010)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(1)(1)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(1)(2111111111111111)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(3)(123123)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(2)(123123)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x!=<span class="number">0</span> <span class="keyword">and</span> x//(<span class="number">10</span>**k)!=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x%<span class="number">10</span>==x//(<span class="number">10</span>**k)%<span class="number">10</span>:</span><br><span class="line">                x=x//<span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> func</span><br></pre></td></tr></table></figure><h3 id="Q9：Three-Memory-amp-Q10：Natural-Chain"><a href="#Q9：Three-Memory-amp-Q10：Natural-Chain" class="headerlink" title="Q9：Three Memory &amp; Q10：Natural Chain"></a>Q9：Three Memory &amp; Q10：Natural Chain</h3><p>咕了…</p><p>等能力再强点再来补坑吧</p><h2 id="Lab-3：Midterm-Review"><a href="#Lab-3：Midterm-Review" class="headerlink" title="Lab 3：Midterm Review"></a>Lab 3：Midterm Review</h2><h3 id="Q1：Unique-Digits"><a href="#Q1：Unique-Digits" class="headerlink" title="Q1：Unique Digits"></a>Q1：Unique Digits</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of unique digits in positive integer n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(8675309) # All are unique</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(1313131) # 1 and 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(13173131) # 1, 3, and 7</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(10000) # 0 and 1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(101) # 0 and 1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(10) # 0 and 1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">if</span> has_digit(n,i):</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_digit</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns whether K is a digit in N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_digit(10, 1)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_digit(12, 7)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">10</span>==k:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=n//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="Q2：Ordered-Digits"><a href="#Q2：Ordered-Digits" class="headerlink" title="Q2：Ordered Digits"></a>Q2：Ordered Digits</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ordered_digits</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return True if the (base 10) digits of X&gt;0 are in non-decreasing</span></span><br><span class="line"><span class="string">    order, and False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(5)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(11)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(127)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(1357)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(21)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = ordered_digits(1375) # Return, don&#x27;t print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    vis=x%<span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span> x!=<span class="number">0</span>:</span><br><span class="line">        x=x//<span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> vis&gt;=x%<span class="number">10</span>:</span><br><span class="line">            vis=x%<span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="Q3：K-Runner"><a href="#Q3：K-Runner" class="headerlink" title="Q3：K Runner"></a>Q3：K Runner</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_k_run_starter</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 0) # example from description</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 1)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 2)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 3)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123412341234, 1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(1234234534564567, 0)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(1234234534564567, 1)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(1234234534564567, 2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    final = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;=k:</span><br><span class="line">        <span class="keyword">while</span> n%<span class="number">10</span>&gt;(n//<span class="number">10</span>)%<span class="number">10</span> <span class="keyword">and</span> n//<span class="number">10</span>!=<span class="number">0</span>:</span><br><span class="line">            n=n//<span class="number">10</span></span><br><span class="line">        final = n%<span class="number">10</span></span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        n = n//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure><h3 id="Q4：Make-Repeater"><a href="#Q4：Make-Repeater" class="headerlink" title="Q4：Make Repeater"></a>Q4：Make Repeater</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_repeater</span>(<span class="params">func, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_repeater(increment, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1</span></span><br><span class="line"><span class="string">    243</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 2)(5) # square(square(5))</span></span><br><span class="line"><span class="string">    625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 4)(5) # square(square(square(square(5))))</span></span><br><span class="line"><span class="string">    152587890625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 0)(5) # Yes, it makes sense to apply the function zero times!</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func_n</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> func(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i,final_func=<span class="number">2</span>,composer(func,func)</span><br><span class="line">            <span class="keyword">while</span> i&lt;n:</span><br><span class="line">                final_func=composer(func,final_func)</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> final_func(x)</span><br><span class="line">    <span class="keyword">return</span> func_n</span><br></pre></td></tr></table></figure><h3 id="Q5：Apply-Twice"><a href="#Q5：Apply-Twice" class="headerlink" title="Q5：Apply Twice"></a>Q5：Apply Twice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">apply_twice</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return a function that applies func twice.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    func -- a function that takes one argument</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; apply_twice(square)(2)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> make_repeater(func,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q8-Protected-Secret"><a href="#Q8-Protected-Secret" class="headerlink" title="Q8 Protected Secret"></a>Q8 Protected Secret</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">protected_secret</span>(<span class="params">password, secret, num_attempts</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns a function which takes in a password and prints the SECRET if the password entered matches</span></span><br><span class="line"><span class="string">    the PASSWORD given to protected_secret. Otherwise it prints &quot;INCORRECT PASSWORD&quot;. After NUM_ATTEMPTS</span></span><br><span class="line"><span class="string">    incorrect passwords are entered, the secret is locked and the function should print &quot;SECRET LOCKED&quot;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = protected_secret(&quot;correcthorsebatterystaple&quot;, &quot;I love UCB&quot;, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;hax0r_1&quot;) # 2 attempts left</span></span><br><span class="line"><span class="string">    INCORRECT PASSWORD</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;correcthorsebatterystaple&quot;)</span></span><br><span class="line"><span class="string">    I love UCB</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;hax0r_2&quot;) # 1 attempt left</span></span><br><span class="line"><span class="string">    INCORRECT PASSWORD</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;hax0r_3&quot;) # No attempts left</span></span><br><span class="line"><span class="string">    SECRET LOCKED</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;correcthorsebatterystaple&quot;)</span></span><br><span class="line"><span class="string">    SECRET LOCKED</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_secret</span>(<span class="params">password_attempt</span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> num_attempts&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> password_attempt==password:</span><br><span class="line">                <span class="built_in">print</span>(secret)</span><br><span class="line">                <span class="keyword">return</span> get_secret</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;INCORRECT PASSWORD&quot;</span>)</span><br><span class="line">                num=num_attempts-<span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> protected_secret(password,secret,num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;SECRET LOCKED&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> get_secret</span><br><span class="line">    <span class="keyword">return</span> get_secret</span><br></pre></td></tr></table></figure><h2 id="Disc-3：Recursive"><a href="#Disc-3：Recursive" class="headerlink" title="Disc 3：Recursive"></a>Disc 3：Recursive</h2><h3 id="Q1：Warm-Up：Recursive-Multiplication"><a href="#Q1：Warm-Up：Recursive-Multiplication" class="headerlink" title="Q1：Warm Up：Recursive Multiplication"></a>Q1：Warm Up：Recursive Multiplication</h3><blockquote><p>Hint:5*3&#x3D;5+(5*2)&#x3D;5+5+(5*1)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Takes two positive integers and returns their product using recursion.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(5, 3)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> m+multiply(m,n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：Is-Prime"><a href="#Q4：Is-Prime" class="headerlink" title="Q4：Is Prime"></a>Q4：Is Prime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if n is a prime number and False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(16)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(521)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> x==n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n%x==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> x==n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> helper(x+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q5：Recursive-Hailstone"><a href="#Q5：Recursive-Hailstone" class="headerlink" title="Q5：Recursive Hailstone"></a>Q5：Recursive Hailstone</h3><p>fail to return the number of elements in the wequence…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print out the hailstone sequence starting at n, and return the number of elements in the sequence.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">and</span> n!=<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">return</span> hailstone(n//<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> n%<span class="number">2</span>!=<span class="number">0</span> <span class="keyword">and</span> n!=<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">return</span> hailstone(n*<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">return</span> count_num(n)</span><br></pre></td></tr></table></figure><h3 id="Q6：Merge-Numbers"><a href="#Q6：Merge-Numbers" class="headerlink" title="Q6：Merge Numbers"></a>Q6：Merge Numbers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">n1, n2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Merges two numbers by digit in decreasing order</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(31, 42)</span></span><br><span class="line"><span class="string">    4321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(21, 0)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge (21, 31) </span></span><br><span class="line"><span class="string">    3211</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n2</span><br><span class="line">    <span class="keyword">elif</span> n2==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n1</span><br><span class="line">    <span class="keyword">elif</span> n1%<span class="number">10</span>&gt;n2%<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> merge(n1,n2//<span class="number">10</span>)*<span class="number">10</span>+n2%<span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> merge(n1//<span class="number">10</span>,n2)*<span class="number">10</span>+n1%<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="HW03：Recursion，Tree-Recursion"><a href="#HW03：Recursion，Tree-Recursion" class="headerlink" title="HW03：Recursion，Tree Recursion"></a>HW03：Recursion，Tree Recursion</h2><h3 id="Q1：Num-eights"><a href="#Q1：Num-eights" class="headerlink" title="Q1：Num eights"></a>Q1：Num eights</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">num_eights</span>(<span class="params">pos</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of times 8 appears as a digit of pos.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(3)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(8)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(88888888)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(2638)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(86380)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(12345)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban all assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;num_eights&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Assign&#x27;, &#x27;AnnAssign&#x27;, &#x27;AugAssign&#x27;, &#x27;NamedExpr&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pos//<span class="number">10</span>!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> pos%<span class="number">10</span>==<span class="number">8</span>:</span><br><span class="line">            <span class="keyword">return</span> num_eights(pos//<span class="number">10</span>)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> num_eights(pos//<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> pos%<span class="number">10</span>==<span class="number">8</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Q2：Ping-pong"><a href="#Q2：Ping-pong" class="headerlink" title="Q2：Ping-pong"></a>Q2：Ping-pong</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pingpong</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the nth element of the ping-pong sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(8)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(10)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(15)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(21)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(22)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(30)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(68)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(69)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(80)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(81)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(82)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(100)</span></span><br><span class="line"><span class="string">    -6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;pingpong&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Assign&#x27;, &#x27;AnnAssign&#x27;, &#x27;AugAssign&#x27;, &#x27;NamedExpr&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">current,count,up</span>):</span><br><span class="line">        <span class="keyword">if</span> n==count:</span><br><span class="line">            <span class="keyword">return</span> current</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> (count+<span class="number">1</span>)%<span class="number">8</span>==<span class="number">0</span> <span class="keyword">or</span> num_eights(count+<span class="number">1</span>)&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> up:</span><br><span class="line">                    <span class="keyword">return</span> helper(current+<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> helper(current-<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> up:</span><br><span class="line">                    <span class="keyword">return</span> helper(current+<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> helper(current-<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>,<span class="number">0</span>,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Q3：Missing-Digits"><a href="#Q3：Missing-Digits" class="headerlink" title="Q3：Missing Digits"></a>Q3：Missing Digits</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">missing_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given a number a that is in sorted, non-decreasing order,</span></span><br><span class="line"><span class="string">    return the number of missing digits in n. A missing digit is</span></span><br><span class="line"><span class="string">    a number between the first and last digit of a that is not in n.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1248) # 3, 5, 6, 7</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(19) # 2, 3, 4, 5, 6, 7, 8</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1122) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(123456) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(3558) # 4, 6, 7</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(35578) # 4, 6</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(12456) # 3</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(16789) # 2, 3, 4, 5</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(4) # No missing numbers between 4 and 4</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban while or for loops</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;missing_digits&#x27;, [&#x27;While&#x27;, &#x27;For&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n//<span class="number">10</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n%<span class="number">10</span>&gt;n//<span class="number">10</span>%<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> missing_digits(n//<span class="number">10</span>)+n%<span class="number">10</span>-n//<span class="number">10</span>%<span class="number">10</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n%<span class="number">10</span>==n//<span class="number">10</span>%<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> missing_digits(n//<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：Count-coins（to-be-continued"><a href="#Q4：Count-coins（to-be-continued" class="headerlink" title="Q4：Count coins（to be continued"></a>Q4：Count coins（to be continued</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>跳过…</p><p>待填坑</p><h2 id="Lab-4：Recursion，Tree-Recursion，Python-Lists"><a href="#Lab-4：Recursion，Tree-Recursion，Python-Lists" class="headerlink" title="Lab 4：Recursion，Tree Recursion，Python Lists"></a>Lab 4：Recursion，Tree Recursion，Python Lists</h2><h3 id="Q2：Summation"><a href="#Q2：Summation" class="headerlink" title="Q2：Summation"></a>Q2：Summation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">summation</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of numbers 1 through n (including n) wíth term applied to each number.</span></span><br><span class="line"><span class="string">    Implement using recursion!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, lambda x: x * x * x) # 1^3 + 2^3 + 3^3 + 4^3 + 5^3</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(9, lambda x: x + 1) # 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10</span></span><br><span class="line"><span class="string">    54</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, lambda x: 2**x) # 2^1 + 2^2 + 2^3 + 2^4 + 2^5</span></span><br><span class="line"><span class="string">    62</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # Do not use while/for loops!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;summation&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;While&#x27;, &#x27;For&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> n &gt;= <span class="number">1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> term(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> summation(n-<span class="number">1</span>,term)+term(n)</span><br></pre></td></tr></table></figure><h3 id="Q3：Pascal’s-Triangle"><a href="#Q3：Pascal’s-Triangle" class="headerlink" title="Q3：Pascal’s Triangle"></a>Q3：Pascal’s Triangle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pascal</span>(<span class="params">row, column</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the value of the item in Pascal&#x27;s Triangle </span></span><br><span class="line"><span class="string">    whose position is specified by row and column.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(0, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(0, 5)# Empty entry; outside of Pascal&#x27;s Triangle</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(3, 2)# Row 3 (1 3 3 1), Column 2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> column&gt;row:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> column==<span class="number">0</span> <span class="keyword">or</span> row==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pascal(row-<span class="number">1</span>,column-<span class="number">1</span>)+pascal(row-<span class="number">1</span>,column)</span><br></pre></td></tr></table></figure><h3 id="Q4：Insect-Combinatorics"><a href="#Q4：Insect-Combinatorics" class="headerlink" title="Q4：Insect Combinatorics"></a>Q4：Insect Combinatorics</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paths</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of paths from one corner of an</span></span><br><span class="line"><span class="string">    M by N grid to the opposite corner.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(2, 2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(5, 7)</span></span><br><span class="line"><span class="string">    210</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(117, 1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(1, 157)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> m==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> paths(m-<span class="number">1</span>,n)+paths(m,n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Q5：Couple"><a href="#Q5：Couple" class="headerlink" title="Q5：Couple"></a>Q5：Couple</h3><p>…感觉自己真傻</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">couple</span>(<span class="params">s, t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of two-element lists in which the i-th element is [s[i], t[i]].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = [4, 5, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; couple(a, b)</span></span><br><span class="line"><span class="string">    [[1, 4], [2, 5], [3, 6]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = [&#x27;c&#x27;, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d = [&#x27;s&#x27;, &#x27;1&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; couple(c, d)</span></span><br><span class="line"><span class="string">    [[&#x27;c&#x27;, &#x27;s&#x27;], [6, &#x27;1&#x27;]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="built_in">len</span>(t)</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [[s[i],t[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s))]</span><br></pre></td></tr></table></figure><h3 id="Q6：Coordinates"><a href="#Q6：Coordinates" class="headerlink" title="Q6：Coordinates"></a>Q6：Coordinates</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">coords</span>(<span class="params">fn, seq, lower, upper</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seq = [-4, -2, 0, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fn = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; coords(fn, seq, 1, 9)</span></span><br><span class="line"><span class="string">    [[-2, 4], [1, 1], [3, 9]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [[x,fn(x)] <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> fn(x)&gt;=lower <span class="keyword">and</span> fn(x)&lt;=upper]</span><br></pre></td></tr></table></figure><h3 id="Q7：Riffle-Shuffle"><a href="#Q7：Riffle-Shuffle" class="headerlink" title="Q7：Riffle Shuffle"></a>Q7：Riffle Shuffle</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">riffle</span>(<span class="params">deck</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Produces a single, perfect riffle shuffle of DECK, consisting of</span></span><br><span class="line"><span class="string">    DECK[0], DECK[M], DECK[1], DECK[M+1], ... where M is position of the</span></span><br><span class="line"><span class="string">    second half of the deck.  Assume that len(DECK) is even.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; riffle([3, 4, 5, 6])</span></span><br><span class="line"><span class="string">    [3, 5, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; riffle(range(20))</span></span><br><span class="line"><span class="string">    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [deck[i//<span class="number">2</span>+(<span class="built_in">len</span>(deck)//<span class="number">2</span>)*(i%<span class="number">2</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(deck))]</span><br></pre></td></tr></table></figure><h2 id="Disc-4：Tree-Recursion，Python-Lists"><a href="#Disc-4：Tree-Recursion，Python-Lists" class="headerlink" title="Disc 4：Tree Recursion，Python Lists"></a>Disc 4：Tree Recursion，Python Lists</h2><h3 id="Q1：Count-Stair-Ways"><a href="#Q1：Count-Stair-Ways" class="headerlink" title="Q1：Count Stair Ways"></a>Q1：Count Stair Ways</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_stair_ways</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of ways to climb up a flight of</span></span><br><span class="line"><span class="string">    n stairs, moving either 1 step or 2 steps at a time.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_stair_ways(4)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> count_stair_ways(n-<span class="number">1</span>)+count_stair_ways(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q2：Count-K"><a href="#Q2：Count-K" class="headerlink" title="Q2：Count K"></a>Q2：Count K</h3><p>呜呜真的不会写这类题目，说我递归次数太多了…</p><p>算了算了，先放着吧x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_k</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Counts the number of paths up a flight of n stairs</span></span><br><span class="line"><span class="string">    when taking up to and including k steps at a time.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(3, 3) # 3, 2 + 1, 1 + 2, 1 + 1 + 1</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(4, 4)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(10, 3)</span></span><br><span class="line"><span class="string">    274</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(300, 1) # Only one step at a time</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i,<span class="built_in">sum</span>=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>  i&lt;=k:</span><br><span class="line">            <span class="built_in">sum</span>+=count_k(n-i,k)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><h3 id="Q5：Max-Product"><a href="#Q5：Max-Product" class="headerlink" title="Q5：Max Product"></a>Q5：Max Product</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_product</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the maximum product that can be formed using</span></span><br><span class="line"><span class="string">    non-consecutive elements of s.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([10,3,1,9,2]) # 10 * 9</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([5,10,5,10,5]) # 5 * 5 * 5</span></span><br><span class="line"><span class="string">    125</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([])</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s==[]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(max_product(s[<span class="number">1</span>:]),s[<span class="number">0</span>]*max_product(s[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h2 id="Project-2：CS61A-Autocorrected-Typing-Software——Cats"><a href="#Project-2：CS61A-Autocorrected-Typing-Software——Cats" class="headerlink" title="Project 2：CS61A Autocorrected Typing Software——Cats"></a>Project 2：CS61A Autocorrected Typing Software——Cats</h2><h3 id="Phase-1：Typing"><a href="#Phase-1：Typing" class="headerlink" title="Phase 1：Typing"></a>Phase 1：Typing</h3><h4 id="Problem-1-1"><a href="#Problem-1-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choose</span>(<span class="params">paragraphs, select, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Kth paragraph from PARAGRAPHS for which SELECT called on the</span></span><br><span class="line"><span class="string">    paragraph returns True. If there are fewer than K such paragraphs, return</span></span><br><span class="line"><span class="string">    the empty string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        paragraphs: a list of strings</span></span><br><span class="line"><span class="string">        select: a function that returns True for paragraphs that can be selected</span></span><br><span class="line"><span class="string">        k: an integer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ps = [&#x27;hi&#x27;, &#x27;how are you&#x27;, &#x27;fine&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = lambda p: len(p) &lt;= 4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 0)</span></span><br><span class="line"><span class="string">    &#x27;hi&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 1)</span></span><br><span class="line"><span class="string">    &#x27;fine&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 2)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    store_list=[]</span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(paragraphs):</span><br><span class="line">        <span class="keyword">if</span> select(paragraphs[i]):</span><br><span class="line">            store_list.insert(j,paragraphs[i])</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k&gt;=j:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> store_list[k]</span><br><span class="line">    <span class="comment"># END PROBLEM 1</span></span><br></pre></td></tr></table></figure><h4 id="Problem-2-1"><a href="#Problem-2-1" class="headerlink" title="Problem 2"></a>Problem 2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">topic</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a select function that returns whether</span></span><br><span class="line"><span class="string">    a paragraph contains one of the words in TOPIC.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        topic: a list of words related to a subject</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; about_dogs = about([&#x27;dog&#x27;, &#x27;dogs&#x27;, &#x27;pup&#x27;, &#x27;puppy&#x27;])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose([&#x27;Cute Dog!&#x27;, &#x27;That is a cat.&#x27;, &#x27;Nice pup!&#x27;], about_dogs, 0)</span></span><br><span class="line"><span class="string">    &#x27;Cute Dog!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose([&#x27;Cute Dog!&#x27;, &#x27;That is a cat.&#x27;, &#x27;Nice pup.&#x27;], about_dogs, 1)</span></span><br><span class="line"><span class="string">    &#x27;Nice pup.&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([lower(x) == x <span class="keyword">for</span> x <span class="keyword">in</span> topic]), <span class="string">&#x27;topics should be lowercase.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sel</span>(<span class="params">para</span>):</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        para=remove_punctuation(para)</span><br><span class="line">        para=lower(para)</span><br><span class="line">        para=split(para)</span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(para):</span><br><span class="line">            <span class="keyword">if</span> para[i] <span class="keyword">in</span> topic:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> sel</span><br><span class="line">    <span class="comment"># END PROBLEM 2</span></span><br></pre></td></tr></table></figure><h4 id="Problem-3-1"><a href="#Problem-3-1" class="headerlink" title="Problem 3"></a>Problem 3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">typed, reference</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the accuracy (percentage of words typed correctly) of TYPED</span></span><br><span class="line"><span class="string">    when compared to the prefix of REFERENCE that was typed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: a string that may contain typos</span></span><br><span class="line"><span class="string">        reference: a string without errors</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute Dog!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;A Cute Dog!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    0.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;cute Dog.&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute Dog. I say!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    100.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    0.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;&#x27;, &#x27;&#x27;)</span></span><br><span class="line"><span class="string">    100.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    typed_words = split(typed)</span><br><span class="line">    reference_words = split(reference)</span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> typed==<span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> reference==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">elif</span> typed==<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> reference==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ty=split(typed)</span><br><span class="line">        ref=split(reference)</span><br><span class="line">        i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ty)&lt;=<span class="built_in">len</span>(ref):</span><br><span class="line">            <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(ty):</span><br><span class="line">                <span class="keyword">if</span> ty[i]==ref[i]:</span><br><span class="line">                    count+=<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>*count/<span class="built_in">len</span>(ty)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(ref):</span><br><span class="line">                <span class="keyword">if</span> ty[i]==ref[i]:</span><br><span class="line">                    count+=<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>*count/<span class="built_in">len</span>(ty)</span><br><span class="line">    <span class="comment"># END PROBLEM 3</span></span><br></pre></td></tr></table></figure><h4 id="Problem-4-1"><a href="#Problem-4-1" class="headerlink" title="Problem 4"></a>Problem 4</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wpm</span>(<span class="params">typed, elapsed</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the words-per-minute (WPM) of the TYPED string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: an entered string</span></span><br><span class="line"><span class="string">        elapsed: an amount of time in seconds</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wpm(&#x27;hello friend hello buddy hello&#x27;, 15)</span></span><br><span class="line"><span class="string">    24.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wpm(&#x27;0123456789&#x27;,60)</span></span><br><span class="line"><span class="string">    2.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> elapsed &gt; <span class="number">0</span>, <span class="string">&#x27;Elapsed time must be positive&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 4</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    vis=<span class="built_in">len</span>(typed)/<span class="number">5</span></span><br><span class="line">    <span class="keyword">return</span> vis*<span class="number">60</span>/elapsed</span><br><span class="line">    <span class="comment"># END PROBLEM 4</span></span><br></pre></td></tr></table></figure><h3 id="Phase-2：Autocorrect"><a href="#Phase-2：Autocorrect" class="headerlink" title="Phase 2：Autocorrect"></a>Phase 2：Autocorrect</h3><h4 id="Problem-5-1"><a href="#Problem-5-1" class="headerlink" title="Problem 5"></a>Problem 5</h4><p>太ugly了我写的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">autocorrect</span>(<span class="params">typed_word, valid_words, diff_function, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the element of VALID_WORDS that has the smallest difference</span></span><br><span class="line"><span class="string">    from TYPED_WORD. Instead returns TYPED_WORD if that difference is greater</span></span><br><span class="line"><span class="string">    than LIMIT.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed_word: a string representing a word that may contain typos</span></span><br><span class="line"><span class="string">        valid_words: a list of strings representing valid words</span></span><br><span class="line"><span class="string">        diff_function: a function quantifying the difference between two words</span></span><br><span class="line"><span class="string">        limit: a number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ten_diff = lambda w1, w2, limit: 10 # Always returns 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; autocorrect(&quot;hwllo&quot;, [&quot;butter&quot;, &quot;hello&quot;, &quot;potato&quot;], ten_diff, 20)</span></span><br><span class="line"><span class="string">    &#x27;butter&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; first_diff = lambda w1, w2, limit: (1 if w1[0] != w2[0] else 0) # Checks for matching first char</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; autocorrect(&quot;tosting&quot;, [&quot;testing&quot;, &quot;asking&quot;, &quot;fasting&quot;], first_diff, 10)</span></span><br><span class="line"><span class="string">    &#x27;testing&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> typed_word <span class="keyword">in</span> valid_words:</span><br><span class="line">        <span class="keyword">return</span> typed_word</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        vis=limit+<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(valid_words):</span><br><span class="line">            a=diff_function(typed_word,valid_words[i],limit)</span><br><span class="line">            <span class="keyword">if</span> a&lt;vis:</span><br><span class="line">                vis=a</span><br><span class="line">                j=i</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> vis&lt;=limit:</span><br><span class="line">            <span class="keyword">return</span> valid_words[j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> typed_word</span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br></pre></td></tr></table></figure><p>嘛，google到了一种简单的方法：建立一个dictionary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">autocorrect</span>(<span class="params">user_word, valid_words, diff_function, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the element of VALID_WORDS that has the smallest difference</span></span><br><span class="line"><span class="string">    from USER_WORD. Instead returns USER_WORD if that difference is greater</span></span><br><span class="line"><span class="string">    than LIMIT.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> user_word <span class="keyword">in</span> valid_words:</span><br><span class="line">        <span class="keyword">return</span> user_word</span><br><span class="line">    <span class="comment"># Create dictionary with keys as iterables in valid_words list</span></span><br><span class="line">    <span class="comment"># and values as difference between them and user_word</span></span><br><span class="line">    d = &#123;v : diff_function(user_word, v, limit) <span class="keyword">for</span> v <span class="keyword">in</span> valid_words&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(d, key=d.get) <span class="keyword">if</span> <span class="built_in">min</span>(d.values()) &lt;= limit <span class="keyword">else</span> user_word</span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br></pre></td></tr></table></figure><h4 id="Problem-6-1"><a href="#Problem-6-1" class="headerlink" title="Problem 6"></a>Problem 6</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">feline_flips</span>(<span class="params">start, goal, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A diff function for autocorrect that determines how many letters</span></span><br><span class="line"><span class="string">    in START need to be substituted to create GOAL, then adds the difference in</span></span><br><span class="line"><span class="string">    their lengths and returns the result.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        start: a starting word</span></span><br><span class="line"><span class="string">        goal: a string representing a desired goal word</span></span><br><span class="line"><span class="string">        limit: a number representing an upper bound on the number of chars that must change</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;nice&quot;, &quot;rice&quot;, big_limit)    # Substitute: n -&gt; r</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;range&quot;, &quot;rungs&quot;, big_limit)  # Substitute: a -&gt; u, e -&gt; s</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;pill&quot;, &quot;pillage&quot;, big_limit) # Don&#x27;t substitute anything, length difference of 3.</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;roses&quot;, &quot;arose&quot;, big_limit)  # Substitute: r -&gt; a, o -&gt; r, s -&gt; o, e -&gt; s, s -&gt; e</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;rose&quot;, &quot;hello&quot;, big_limit)   # Substitute: r-&gt;h, o-&gt;e, s-&gt;l, e-&gt;l, length difference of 1.</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="keyword">if</span> limit&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(start)==<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(goal)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">len</span>(start)-<span class="built_in">len</span>(goal))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> start[<span class="number">0</span>]==goal[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> feline_flips(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> feline_flips(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br></pre></td></tr></table></figure><h4 id="Problem-7-1"><a href="#Problem-7-1" class="headerlink" title="Problem 7"></a>Problem 7</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minimum_mewtations</span>(<span class="params">start, goal, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A diff function that computes the edit distance from START to GOAL.</span></span><br><span class="line"><span class="string">    This function takes in a string START, a string GOAL, and a number LIMIT.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        start: a starting word</span></span><br><span class="line"><span class="string">        goal: a goal word</span></span><br><span class="line"><span class="string">        limit: a number representing an upper bound on the number of edits</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;cats&quot;, &quot;scat&quot;, big_limit)       # cats -&gt; scats -&gt; scat</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;purng&quot;, &quot;purring&quot;, big_limit)   # purng -&gt; purrng -&gt; purring</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;ckiteus&quot;, &quot;kittens&quot;, big_limit) # ckiteus -&gt; kiteus -&gt; kitteus -&gt; kittens</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> limit&lt;<span class="number">0</span>:  <span class="comment"># Fill in the condition</span></span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># END</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(start)==<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(goal)==<span class="number">0</span>:  <span class="comment"># Feel free to remove or add additional cases</span></span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">len</span>(start)-<span class="built_in">len</span>(goal))</span><br><span class="line">        <span class="comment"># END</span></span><br><span class="line">    <span class="keyword">elif</span> start[<span class="number">0</span>]==goal[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> minimum_mewtations(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        add = minimum_mewtations(start,goal[<span class="number">1</span>:],limit-<span class="number">1</span>)  <span class="comment"># Fill in these lines</span></span><br><span class="line">        remove = minimum_mewtations(start[<span class="number">1</span>:],goal,limit-<span class="number">1</span>)</span><br><span class="line">        substitute = minimum_mewtations(start[<span class="number">1</span>:],goal[<span class="number">1</span>:],limit-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(add,remove,substitute)+<span class="number">1</span></span><br><span class="line">        <span class="comment"># END</span></span><br></pre></td></tr></table></figure><h3 id="Phase-3：Multiplayer"><a href="#Phase-3：Multiplayer" class="headerlink" title="Phase 3：Multiplayer"></a>Phase 3：Multiplayer</h3><h4 id="Problem-8-1"><a href="#Problem-8-1" class="headerlink" title="Problem 8"></a>Problem 8</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">report_progress</span>(<span class="params">sofar, prompt, user_id, upload</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Upload a report of your id and progress so far to the multiplayer server.</span></span><br><span class="line"><span class="string">    Returns the progress so far.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        sofar: a list of the words input so far</span></span><br><span class="line"><span class="string">        prompt: a list of the words in the typing prompt</span></span><br><span class="line"><span class="string">        user_id: a number representing the id of the current user</span></span><br><span class="line"><span class="string">        upload: a function used to upload progress to the multiplayer server</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_progress = lambda d: print(&#x27;ID:&#x27;, d[&#x27;id&#x27;], &#x27;Progress:&#x27;, d[&#x27;progress&#x27;])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # The above function displays progress in the format ID: __, Progress: __</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_progress(&#123;&#x27;id&#x27;: 1, &#x27;progress&#x27;: 0.6&#125;)</span></span><br><span class="line"><span class="string">    ID: 1 Progress: 0.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sofar = [&#x27;how&#x27;, &#x27;are&#x27;, &#x27;you&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prompt = [&#x27;how&#x27;, &#x27;are&#x27;, &#x27;you&#x27;, &#x27;doing&#x27;, &#x27;today&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; report_progress(sofar, prompt, 2, print_progress)</span></span><br><span class="line"><span class="string">    ID: 2 Progress: 0.6</span></span><br><span class="line"><span class="string">    0.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; report_progress([&#x27;how&#x27;, &#x27;aree&#x27;], prompt, 3, print_progress)</span></span><br><span class="line"><span class="string">    ID: 3 Progress: 0.2</span></span><br><span class="line"><span class="string">    0.2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,j,count=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(sofar) <span class="keyword">and</span> j&lt;<span class="built_in">len</span>(prompt):</span><br><span class="line">        <span class="keyword">if</span> sofar[i]==prompt[j]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    gress=count/<span class="built_in">len</span>(prompt)</span><br><span class="line">    d=&#123;<span class="string">&#x27;id&#x27;</span>:user_id,<span class="string">&#x27;progress&#x27;</span>:gress&#125;</span><br><span class="line">    upload(d)</span><br><span class="line">    <span class="keyword">return</span> gress</span><br><span class="line">    <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure><h4 id="Problem-9-1"><a href="#Problem-9-1" class="headerlink" title="Problem 9"></a>Problem 9</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">time_per_word</span>(<span class="params">words, times_per_player</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given timing data, return a match data abstraction, which contains a</span></span><br><span class="line"><span class="string">    list of words and the amount of time each player took to type each word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        words: a list of words, in the order they are typed.</span></span><br><span class="line"><span class="string">        times_per_player: A list of lists of timestamps including the time</span></span><br><span class="line"><span class="string">                          the player started typing, followed by the time</span></span><br><span class="line"><span class="string">                          the player finished typing each word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p = [[75, 81, 84, 90, 92], [19, 29, 35, 36, 38]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match = time_per_word([&#x27;collar&#x27;, &#x27;plush&#x27;, &#x27;blush&#x27;, &#x27;repute&#x27;], p)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_words(match)</span></span><br><span class="line"><span class="string">    [&#x27;collar&#x27;, &#x27;plush&#x27;, &#x27;blush&#x27;, &#x27;repute&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_times(match)</span></span><br><span class="line"><span class="string">    [[6, 3, 6, 2], [10, 6, 1, 2]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 9</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    test=[]</span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(times_per_player):</span><br><span class="line">        p=times_per_player[i]</span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;<span class="built_in">len</span>(p)-<span class="number">1</span>:</span><br><span class="line">            p[j]=p[j+<span class="number">1</span>]-p[j]</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        test.append(p[:<span class="built_in">len</span>(p)-<span class="number">1</span>])</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> match(words,test)</span><br><span class="line">    <span class="comment"># END PROBLEM 9</span></span><br></pre></td></tr></table></figure><h4 id="Problem-10-1"><a href="#Problem-10-1" class="headerlink" title="Problem 10"></a>Problem 10</h4><p>这个好难，参考了别人做的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fastest_words</span>(<span class="params">match</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of lists of which words each player typed fastest.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        match: a match data abstraction as returned by time_per_word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p0 = [5, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p1 = [4, 1, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fastest_words(match([&#x27;Just&#x27;, &#x27;have&#x27;, &#x27;fun&#x27;], [p0, p1]))</span></span><br><span class="line"><span class="string">    [[&#x27;have&#x27;, &#x27;fun&#x27;], [&#x27;Just&#x27;]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p0  # input lists should not be mutated</span></span><br><span class="line"><span class="string">    [5, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p1</span></span><br><span class="line"><span class="string">    [4, 1, 6]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    player_indices = <span class="built_in">range</span>(<span class="built_in">len</span>(get_times(match)))  <span class="comment"># contains an *index* for each player</span></span><br><span class="line">    word_indices = <span class="built_in">range</span>(<span class="built_in">len</span>(get_words(match)))    <span class="comment"># contains an *index* for each word</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 10</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    test=[[] <span class="keyword">for</span> k <span class="keyword">in</span> player_indices]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> word_indices:</span><br><span class="line">        times=[time(match,j,i) <span class="keyword">for</span> j <span class="keyword">in</span> player_indices]</span><br><span class="line">        test[times.index(<span class="built_in">min</span>(times))].append(word_at(match,i))</span><br><span class="line">    <span class="keyword">return</span> test</span><br><span class="line">    <span class="comment"># END PROBLEM 10</span></span><br></pre></td></tr></table></figure><h4 id="Some-feelings"><a href="#Some-feelings" class="headerlink" title="Some feelings"></a>Some feelings</h4><p>明显感觉project2比project1简单不少，花的时间也少多了</p><p>希望是我python水平提高的原因吧</p><h2 id="Lab-5：Python-Lists-Trees"><a href="#Lab-5：Python-Lists-Trees" class="headerlink" title="Lab 5：Python Lists, Trees"></a>Lab 5：Python Lists, Trees</h2><h3 id="Q1：Factors-List"><a href="#Q1：Factors-List" class="headerlink" title="Q1：Factors List"></a>Q1：Factors List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factors_list</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list containing all the numbers that divide `n` evenly, except</span></span><br><span class="line"><span class="string">    for the number itself. Make sure the list is in ascending order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factors_list(6)</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factors_list(8)</span></span><br><span class="line"><span class="string">    [1, 2, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factors_list(28)</span></span><br><span class="line"><span class="string">    [1, 2, 4, 7, 14]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_factors = []</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;n:</span><br><span class="line">        <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">            all_factors.append(i)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> all_factors</span><br></pre></td></tr></table></figure><h3 id="Q2：Flatten"><a href="#Q2：Flatten" class="headerlink" title="Q2：Flatten"></a>Q2：Flatten</h3><blockquote><p><strong>Hint</strong>: you can check if something is a list by using the built-in <code>type</code> function. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(3) == list</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; type([1, 2, 3]) == list</span><br><span class="line">True</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flatten</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a flattened version of list s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten([1, 2, 3])     # normal list</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = [1, [2, 3], 4]     # deep list</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten(x)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x # Ensure x is not mutated</span></span><br><span class="line"><span class="string">    [1, [2, 3], 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = [[1, [1, 1]], 1, [1, 1]] # deep list</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten(x)</span></span><br><span class="line"><span class="string">    [1, 1, 1, 1, 1, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x</span></span><br><span class="line"><span class="string">    [[1, [1, 1]], 1, [1, 1]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    result=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i)==<span class="built_in">list</span>:</span><br><span class="line">            result+=flatten(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(i)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Q3：Distance"><a href="#Q3：Distance" class="headerlink" title="Q3：Distance"></a>Q3：Distance</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">city_a, city_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_a = make_city(&#x27;city_a&#x27;, 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_b = make_city(&#x27;city_b&#x27;, 0, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city_a, city_b)</span></span><br><span class="line"><span class="string">    1.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_c = make_city(&#x27;city_c&#x27;, 6.5, 12)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_d = make_city(&#x27;city_d&#x27;, 2.5, 15)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city_c, city_d)</span></span><br><span class="line"><span class="string">    5.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sqrt((get_lat(city_a)-get_lat(city_b))**<span class="number">2</span>+(get_lon(city_a)-get_lon(city_b))**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：Closer-city"><a href="#Q4：Closer-city" class="headerlink" title="Q4：Closer city"></a>Q4：Closer city</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">closer_city</span>(<span class="params">lat, lon, city_a, city_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the name of either city_a or city_b, whichever is closest to</span></span><br><span class="line"><span class="string">    coordinate (lat, lon). If the two cities are the same distance away</span></span><br><span class="line"><span class="string">    from the coordinate, consider city_b to be the closer city.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berkeley = make_city(&#x27;Berkeley&#x27;, 37.87, 112.26)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; stanford = make_city(&#x27;Stanford&#x27;, 34.05, 118.25)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(38.33, 121.44, berkeley, stanford)</span></span><br><span class="line"><span class="string">    &#x27;Stanford&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bucharest = make_city(&#x27;Bucharest&#x27;, 44.43, 26.10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; vienna = make_city(&#x27;Vienna&#x27;, 48.20, 16.37)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(41.29, 174.78, bucharest, vienna)</span></span><br><span class="line"><span class="string">    &#x27;Bucharest&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    city=make_city(<span class="string">&#x27;city&#x27;</span>,lat,lon)</span><br><span class="line">    <span class="keyword">if</span> distance(city,city_a)&gt;=distance(city,city_b):</span><br><span class="line">        <span class="keyword">return</span> get_name(city_b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> get_name(city_a)</span><br></pre></td></tr></table></figure><h3 id="Q6：Finding-Berries"><a href="#Q6：Finding-Berries" class="headerlink" title="Q6：Finding Berries!"></a>Q6：Finding Berries!</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">berry_finder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if t contains a node with the value &#x27;berry&#x27; and </span></span><br><span class="line"><span class="string">    False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scrat = tree(&#x27;berry&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(scrat)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sproul = tree(&#x27;roots&#x27;, [tree(&#x27;branch1&#x27;, [tree(&#x27;leaf&#x27;), tree(&#x27;berry&#x27;)]), tree(&#x27;branch2&#x27;)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(sproul)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(numbers)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(&#x27;berry&#x27;,[tree(&#x27;not berry&#x27;)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==<span class="string">&#x27;berry&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="keyword">if</span> berry_finder(b):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="Q7：Sprout-leaves"><a href="#Q7：Sprout-leaves" class="headerlink" title="Q7：Sprout leaves"></a>Q7：Sprout leaves</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sprout_leaves</span>(<span class="params">t, leaves</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sprout new leaves containing the data in leaves at each leaf in</span></span><br><span class="line"><span class="string">    the original tree t and return the resulting tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = tree(1, [tree(2), tree(3)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new1 = sprout_leaves(t1, [4, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = tree(1, [tree(2, [tree(3)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new2 = sprout_leaves(t2, [6, 1, 2])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">          6</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),[tree(b) <span class="keyword">for</span> b <span class="keyword">in</span> leaves])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),[sprout_leaves(b,leaves) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><h2 id="Disc-5：Trees-Data-Abstraction-Sequences"><a href="#Disc-5：Trees-Data-Abstraction-Sequences" class="headerlink" title="Disc 5：Trees, Data Abstraction, Sequences"></a>Disc 5：Trees, Data Abstraction, Sequences</h2><h3 id="Q2：Height"><a href="#Q2：Height" class="headerlink" title="Q2：Height"></a>Q2：Height</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the height of a tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(5, [tree(1)]), tree(2)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; height(t)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(1), tree(2, [tree(5, [tree(6)]), tree(1)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; height(t)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>([height(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])  <span class="comment">#so cool</span></span><br></pre></td></tr></table></figure><h3 id="Q3：Maximum-Path-Sum"><a href="#Q3：Maximum-Path-Sum" class="headerlink" title="Q3：Maximum Path Sum"></a>Q3：Maximum Path Sum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_path_sum</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the maximum path sum of the tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(5, [tree(1), tree(3)]), tree(10)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_path_sum(t)</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>([max_path_sum(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])+label(t)</span><br></pre></td></tr></table></figure><h3 id="Q4：Find-Path"><a href="#Q4：Find-Path" class="headerlink" title="Q4：Find Path"></a>Q4：Find Path</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">t, x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(2, [tree(7, [tree(3), tree(6, [tree(5), tree(11)])] ), tree(15)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_path(t, 5)</span></span><br><span class="line"><span class="string">    [2, 7, 6, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_path(t, 10)  # returns None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x==label(t):</span><br><span class="line">        <span class="keyword">return</span> [label(t)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            path=find_path(b,x)</span><br><span class="line">            <span class="keyword">if</span> path:</span><br><span class="line">                result=[label(t)]+path</span><br><span class="line">                <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Q5：Map-Filter-Reduce"><a href="#Q5：Map-Filter-Reduce" class="headerlink" title="Q5：Map, Filter, Reduce"></a>Q5：Map, Filter, Reduce</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_map</span>(<span class="params">fn, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Applies fn onto each element in seq and returns a list.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_map(lambda x: x*x, [1, 2, 3])</span></span><br><span class="line"><span class="string">    [1, 4, 9]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    seq_new=[]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seq:</span><br><span class="line">        seq_new.append(fn(x))</span><br><span class="line">    <span class="keyword">return</span> seq_new</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_filter</span>(<span class="params">pred, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Keeps elements in seq only if they satisfy pred.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_filter(lambda x: x % 2 == 0, [1, 2, 3, 4])  # new list has only even-valued elements</span></span><br><span class="line"><span class="string">    [2, 4]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    seq_new=[]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seq:</span><br><span class="line">        <span class="keyword">if</span> pred(x):</span><br><span class="line">            seq_new.append(x)</span><br><span class="line">    <span class="keyword">return</span> seq_new</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_reduce</span>(<span class="params">combiner, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Combines elements in seq using combiner.</span></span><br><span class="line"><span class="string">    seq will have at least one element.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x + y, [1, 2, 3, 4])  # 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x * y, [1, 2, 3, 4])  # 1 * 2 * 3 * 4</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x * y, [4])</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x + 2 * y, [1, 2, 3]) # (1 + 2 * 2) + 2 * 3</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(seq)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(seq)==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> combiner(seq[<span class="number">0</span>],seq[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> combiner(combiner(seq[<span class="number">0</span>],seq[<span class="number">1</span>]),my_reduce(combiner,seq[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h3 id="Q6：Count-palindromes"><a href="#Q6：Count-palindromes" class="headerlink" title="Q6：Count palindromes"></a>Q6：Count palindromes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_palindromes</span>(<span class="params">L</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The number of palindromic words in the sequence of strings</span></span><br><span class="line"><span class="string">    L (ignoring case).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_palindromes((&quot;Acme&quot;, &quot;Madam&quot;, &quot;Pivot&quot;, &quot;Pip&quot;))</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(my_filter(<span class="keyword">lambda</span> x:x.lower()==x[::-<span class="number">1</span>].lower(),L))</span><br></pre></td></tr></table></figure><h3 id="Q7：Perfectly-Balanced"><a href="#Q7：Perfectly-Balanced" class="headerlink" title="Q7：Perfectly Balanced"></a>Q7：Perfectly Balanced</h3><p>似乎…有点问题</p><p>to be dubug</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add all elements in a tree.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(4, [tree(2, [tree(3)]), tree(6)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_tree(t)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">sum</span>=label(t)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="built_in">sum</span>+=sum_tree(b)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">balanced</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Checks if each branch has same sum of all elements and</span></span><br><span class="line"><span class="string">    if each branch is balanced.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(3), tree(1, [tree(2)]), tree(1, [tree(1), tree(1)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [t, tree(1)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(4), tree(1, [tree(2), tree(1)]), tree(1, [tree(3)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    store=[]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        store.append(sum_tree(b))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(store)==<span class="built_in">min</span>(store):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add all elements in a tree.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(4, [tree(2, [tree(3)]), tree(6)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_tree(t)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">sum</span>=label(t)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="built_in">sum</span>+=sum_tree(b)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><h3 id="Q8：Hailstone-Tree"><a href="#Q8：Hailstone-Tree" class="headerlink" title="Q8：Hailstone Tree"></a>Q8：Hailstone Tree</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#orz，咕了 </span></span><br></pre></td></tr></table></figure><h2 id="HW-4：Data-Abstraction，Trees"><a href="#HW-4：Data-Abstraction，Trees" class="headerlink" title="HW 4：Data Abstraction，Trees"></a>HW 4：Data Abstraction，Trees</h2><h3 id="Q2：Weights"><a href="#Q2：Weights" class="headerlink" title="Q2：Weights"></a>Q2：Weights</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">planet</span>(<span class="params">size</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a planet of some size.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> size &gt; <span class="number">0</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;planet&#x27;</span>,size]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">w</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the size of a planet.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_planet(w), <span class="string">&#x27;must call size on a planet&#x27;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> w[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="Q3：Balanced"><a href="#Q3：Balanced" class="headerlink" title="Q3：Balanced"></a>Q3：Balanced</h3><p>平衡条件：①左右力矩相等    ②每个挂在arm上的mobile都平衡</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">balanced</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether m is balanced.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(v)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = mobile(arm(3, t), arm(2, u))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(w)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, v), arm(1, w)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, w), arm(1, v)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;balanced&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment">#m指mobile</span></span><br><span class="line">    <span class="keyword">if</span> length(left(m))*total_weight(end(left(m)))==length(right(m))*total_weight(end(right(m))):</span><br><span class="line">        <span class="keyword">if</span> is_planet(end(left(m))) <span class="keyword">and</span> is_planet(end(right(m))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> is_mobile(end(left(m))) <span class="keyword">and</span> is_planet(end(right(m))):</span><br><span class="line">            <span class="keyword">if</span> balanced(end(left(m))):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> is_mobile(end(right(m))) <span class="keyword">and</span> is_planet(end(left(m))):</span><br><span class="line">            <span class="keyword">if</span> balanced(end(right(m))):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> balanced(end(left(m))) <span class="keyword">and</span> balanced(end(right(m))):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><del>强行枚举所有情况</del></p><h3 id="Q4：Totals"><a href="#Q4：Totals" class="headerlink" title="Q4：Totals"></a>Q4：Totals</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">totals_tree</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree representing the mobile with its total weight at the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(t))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(u))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(v))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">          3</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;totals_tree&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_planet(m):</span><br><span class="line">        <span class="keyword">return</span> tree(size(m))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> is_mobile(m)</span><br><span class="line">        <span class="keyword">return</span> tree(total_weight(m),[totals_tree(end(left(m))),totals_tree(end(right(m)))])</span><br></pre></td></tr></table></figure><h3 id="Q5：Replace-Loki-at-Leaf"><a href="#Q5：Replace-Loki-at-Leaf" class="headerlink" title="Q5：Replace Loki at Leaf"></a>Q5：Replace Loki at Leaf</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_loki_at_leaf</span>(<span class="params">t, lokis_replacement</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a new tree where every leaf value equal to &quot;loki&quot; has</span></span><br><span class="line"><span class="string">    been replaced with lokis_replacement.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; yggdrasil = tree(&#x27;odin&#x27;,</span></span><br><span class="line"><span class="string">    ...                  [tree(&#x27;balder&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;loki&#x27;),</span></span><br><span class="line"><span class="string">    ...                         tree(&#x27;freya&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;frigg&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;loki&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;loki&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;sif&#x27;),</span></span><br><span class="line"><span class="string">    ...                         tree(&#x27;loki&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;loki&#x27;)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; laerad = copy_tree(yggdrasil) # copy yggdrasil for testing purposes</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(replace_loki_at_leaf(yggdrasil, &#x27;freya&#x27;))</span></span><br><span class="line"><span class="string">    odin</span></span><br><span class="line"><span class="string">      balder</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      frigg</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      loki</span></span><br><span class="line"><span class="string">        sif</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      freya</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; laerad == yggdrasil # Make sure original tree is unmodified</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==<span class="string">&#x27;loki&#x27;</span> <span class="keyword">and</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(lokis_replacement)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),[replace_loki_at_leaf(b,lokis_replacement) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><p><strong>ATTENTION</strong>: tree的结构为tree(label(t),branches&#x3D;[])，所以可以直接用循环+递归：<strong>tree(label(t),[replace_loki_at_leaf(b,lokis_replacement) for b in branches(t)])</strong></p><h3 id="Q6：Has-Path"><a href="#Q6：Has-Path" class="headerlink" title="Q6：Has Path"></a>Q6：Has Path</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">has_path</span>(<span class="params">t, word</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether there is a path in a tree where the entries along the path</span></span><br><span class="line"><span class="string">    spell out a particular word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; greetings = tree(&#x27;h&#x27;, [tree(&#x27;i&#x27;),</span></span><br><span class="line"><span class="string">    ...                        tree(&#x27;e&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;o&#x27;)])]),</span></span><br><span class="line"><span class="string">    ...                                   tree(&#x27;y&#x27;)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(greetings)</span></span><br><span class="line"><span class="string">    h</span></span><br><span class="line"><span class="string">      i</span></span><br><span class="line"><span class="string">      e</span></span><br><span class="line"><span class="string">        l</span></span><br><span class="line"><span class="string">          l</span></span><br><span class="line"><span class="string">            o</span></span><br><span class="line"><span class="string">        y</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;h&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;i&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hi&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hello&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hey&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;bye&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hint&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(word) &gt; <span class="number">0</span>, <span class="string">&#x27;no path for empty word.&#x27;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==word <span class="keyword">and</span> <span class="built_in">len</span>(word)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> label(t)==word[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="keyword">if</span> has_path(b,word[<span class="number">1</span>:]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="Q7：Preorder"><a href="#Q7：Preorder" class="headerlink" title="Q7：Preorder"></a>Q7：Preorder</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of the entries in this tree in the order that they</span></span><br><span class="line"><span class="string">    would be visited by a preorder traversal (see problem description).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; preorder(numbers)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; preorder(tree(2, [tree(4, [tree(6)])]))</span></span><br><span class="line"><span class="string">    [2, 4, 6]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> [label(t)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result=[label(t)]</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            result+=preorder(b)   <span class="comment">#这里不能是=，如果赋值的话相当于最后result就等于最后那个分支加上去的值</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Q8：Interval-Abstraction"><a href="#Q8：Interval-Abstraction" class="headerlink" title="Q8：Interval Abstraction"></a>Q8：Interval Abstraction</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">interval</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct an interval from a to b.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> a &lt;= b, <span class="string">&#x27;Lower bound cannot be greater than upper bound&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [a, b]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower_bound</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the lower bound of interval x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upper_bound</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the upper bound of interval x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="Q9：Interval-Arithmetic"><a href="#Q9：Interval-Arithmetic" class="headerlink" title="Q9：Interval Arithmetic"></a>Q9：Interval Arithmetic</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the product of any value in x and any</span></span><br><span class="line"><span class="string">    value in y.&quot;&quot;&quot;</span></span><br><span class="line">    p1 = lower_bound(x)*lower_bound(y)</span><br><span class="line">    p2 = lower_bound(x)*upper_bound(y)</span><br><span class="line">    p3 = upper_bound(x)*lower_bound(y)</span><br><span class="line">    p4 = upper_bound(x)*upper_bound(y)</span><br><span class="line">    <span class="keyword">return</span> interval(<span class="built_in">min</span>(p1, p2, p3, p4), <span class="built_in">max</span>(p1, p2, p3, p4))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the difference between any value in x</span></span><br><span class="line"><span class="string">    and any value in y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    lower=lower_bound(x)-upper_bound(y)</span><br><span class="line">    upper=upper_bound(x)-lower_bound(y)</span><br><span class="line">    <span class="keyword">return</span> interval(lower,upper)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the quotient of any value in x divided by</span></span><br><span class="line"><span class="string">    any value in y. Division is implemented as the multiplication of x by the</span></span><br><span class="line"><span class="string">    reciprocal of y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> lower_bound(y)&gt;<span class="number">0</span> <span class="keyword">or</span> upper_bound(y)&lt;<span class="number">0</span></span><br><span class="line">    reciprocal_y = interval(<span class="number">1</span> / upper_bound(y), <span class="number">1</span> / lower_bound(y))</span><br><span class="line">    <span class="keyword">return</span> mul_interval(x, reciprocal_y)</span><br></pre></td></tr></table></figure><p>①提供的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the product of any value in x and any</span></span><br><span class="line"><span class="string">    value in y.&quot;&quot;&quot;</span></span><br><span class="line">    p1 = x[<span class="number">0</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p2 = x[<span class="number">0</span>] * y[<span class="number">1</span>]</span><br><span class="line">    p3 = x[<span class="number">1</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p4 = x[<span class="number">1</span>] * y[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">min</span>(p1, p2, p3, p4), <span class="built_in">max</span>(p1, p2, p3, p4)]</span><br></pre></td></tr></table></figure><ol><li>提供的代码会报错**’function’ object is not subscriptable**</li></ol><blockquote><p>The error “TypeError: ‘function’ object is not subscriptable” occurs when you try to access an item from a function. Functions cannot be indexed using square brackets. </p></blockquote><p>即数据抽象要用其他函数去访问函数中的某个值，而不能直接用方括号索引函数</p><ol start="2"><li>如果只改p1~p4的值，不改return，则会报错**’list’ object is not callable**</li></ol><blockquote><p>The Python “TypeError: ‘list’ object is not callable” occurs when we try to call a list as a function using parenthesis () . To solve the error, make sure to use square brackets when accessing a list at a specific index</p></blockquote><p>即[]和()没用对</p><ol start="3"><li><strong>print(‘{0}:{1}’.format(key, value))</strong></li></ol><p>分别用key、value的值代替{0}和{1}</p><p>如输出-1 to 1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; to &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(-<span class="number">1</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="Lab-06：Mutability-Iterators"><a href="#Lab-06：Mutability-Iterators" class="headerlink" title="Lab 06：Mutability, Iterators"></a>Lab 06：Mutability, Iterators</h2><h3 id="Q2：Insert-Items"><a href="#Q2：Insert-Items" class="headerlink" title="Q2：Insert Items"></a>Q2：Insert Items</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_items</span>(<span class="params">lst, entry, elem</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Inserts elem into lst after each occurence of entry and then returns lst.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; test_lst = [1, 5, 8, 5, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_lst = insert_items(test_lst, 5, 7)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_lst</span></span><br><span class="line"><span class="string">    [1, 5, 7, 8, 5, 7, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_lst = [1, 2, 1, 2, 3, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_lst = insert_items(double_lst, 3, 4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_lst</span></span><br><span class="line"><span class="string">    [1, 2, 1, 2, 3, 4, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst = [1, 4, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst2 = insert_items(large_lst, 4, 4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst2</span></span><br><span class="line"><span class="string">    [1, 4, 4, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst3 = insert_items(large_lst2, 4, 6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst3</span></span><br><span class="line"><span class="string">    [1, 4, 6, 4, 6, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst3 is large_lst</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # Ban creating new lists</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;insert_items&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;List&#x27;, &#x27;ListComp&#x27;, &#x27;Slice&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(lst):</span><br><span class="line">        <span class="keyword">if</span> lst[i]==entry:</span><br><span class="line">            lst.insert(i+<span class="number">1</span>,elem)</span><br><span class="line">            i+=<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure><h3 id="Q4：Count-Occurrences"><a href="#Q4：Count-Occurrences" class="headerlink" title="Q4：Count Occurrences"></a>Q4：Count Occurrences</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_occurrences</span>(<span class="params">t, n, x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of times that x appears in the first n elements of iterator t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s, 10, 9)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s2, 3, 10)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s, 1, 3)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s, 4, 2)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(s)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s2, 6, 6)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;n:</span><br><span class="line">        num=<span class="built_in">next</span>(t)</span><br><span class="line">        <span class="keyword">if</span> num==x:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span>             <span class="comment">#怎么老忘记加1啊啊啊啊啊</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="Q5：Repeated"><a href="#Q5：Repeated" class="headerlink" title="Q5：Repeated"></a>Q5：Repeated</h3><p>本题关键点在于用一个变量记录前一个数的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repeated</span>(<span class="params">t, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the first value in iterator T that appears K times in a row.</span></span><br><span class="line"><span class="string">    Iterate through the items such that if the same iterator is passed into</span></span><br><span class="line"><span class="string">    the function twice, it continues in the second call at the point it left</span></span><br><span class="line"><span class="string">    off in the first.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s, 2)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s2, 3)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s2, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> k &gt; <span class="number">1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    last_num,cnt=<span class="literal">None</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num=<span class="built_in">next</span>(t)</span><br><span class="line">        <span class="keyword">if</span> last_num==<span class="literal">None</span> <span class="keyword">or</span> num!=last_num:</span><br><span class="line">            last_num,cnt=num,<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt==k:</span><br><span class="line">                <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><h2 id="Disc-06：Mutability-Iterators-and-Generators"><a href="#Disc-06：Mutability-Iterators-and-Generators" class="headerlink" title="Disc 06：Mutability, Iterators and Generators"></a>Disc 06：Mutability, Iterators and Generators</h2><p>pop(i)：i为索引</p><p>remove(el)：el为元素</p><h3 id="Q2：Add-This-Many"><a href="#Q2：Add-This-Many" class="headerlink" title="Q2：Add This Many"></a>Q2：Add This Many</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_this_many</span>(<span class="params">x, el, s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Adds el to the end of s the number of times x occurs in s.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = [1, 2, 4, 2, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_this_many(1, 5, s)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    [1, 2, 4, 2, 1, 5, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_this_many(2, 2, s)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    [1, 2, 4, 2, 1, 5, 5, 2, 2]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">if</span> x==s[i]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;count:</span><br><span class="line">        s.append(el)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="Q4：Filter-Iter"><a href="#Q4：Filter-Iter" class="headerlink" title="Q4：Filter-Iter"></a>Q4：Filter-Iter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_iter</span>(<span class="params">iterable, fn</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_even = lambda x: x % 2 == 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(filter_iter(range(5), is_even)) # a list of the values yielded from the call to filter_iter</span></span><br><span class="line"><span class="string">    [0, 2, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; all_odd = (2*y-1 for y in range(5))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(filter_iter(all_odd, is_even))</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; naturals = (n for n in range(1, 100))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = filter_iter(naturals, is_even)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(s)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(s)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    t=[]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> fn(b):</span><br><span class="line">            t.append(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用yield方法：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_iter</span>(<span class="params">iterable, fn</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> fn(b):</span><br><span class="line">            <span class="keyword">yield</span> b</span><br></pre></td></tr></table></figure><h3 id="Q5：Merge"><a href="#Q5：Merge" class="headerlink" title="Q5：Merge"></a>Q5：Merge</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def sequence(start, step):</span></span><br><span class="line"><span class="string">    ...     while True:</span></span><br><span class="line"><span class="string">    ...         yield start</span></span><br><span class="line"><span class="string">    ...         start += step</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sequence(2, 3) # 2, 5, 8, 11, 14, ...</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = sequence(3, 2) # 3, 5, 7, 9, 11, 13, 15, ...</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = merge(a, b) # 2, 3, 5, 7, 8, 9, 11, 13, 14, 15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [next(result) for _ in range(10)]</span></span><br><span class="line"><span class="string">    [2, 3, 5, 7, 8, 9, 11, 13, 14, 15]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    num_a=<span class="built_in">next</span>(a)</span><br><span class="line">    num_b=<span class="built_in">next</span>(b)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> num_a==num_b:</span><br><span class="line">            <span class="keyword">yield</span> num_a</span><br><span class="line">            num_a=<span class="built_in">next</span>(a)</span><br><span class="line">            num_b=<span class="built_in">next</span>(b)</span><br><span class="line">        <span class="keyword">elif</span> num_a&lt;num_b:</span><br><span class="line">            <span class="keyword">yield</span> num_a</span><br><span class="line">            num_a=<span class="built_in">next</span>(a)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> num_b</span><br><span class="line">            num_b=<span class="built_in">next</span>(b)</span><br></pre></td></tr></table></figure><h3 id="Q6：Primes-Generator"><a href="#Q6：Primes-Generator" class="headerlink" title="Q6：Primes Generator"></a>Q6：Primes Generator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if n is a prime number and False otherwise.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(16)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(521)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt; (n ** <span class="number">0.5</span>): <span class="comment"># Could replace with i == n</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> helper(i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primes_gen</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generates primes in decreasing order.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pg = primes_gen(7)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(pg)</span></span><br><span class="line"><span class="string">    [7, 5, 3, 2]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> is_prime(n):</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> primes_gen(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="HW-05：Iterators-and-Generators"><a href="#HW-05：Iterators-and-Generators" class="headerlink" title="HW 05：Iterators and Generators"></a>HW 05：Iterators and Generators</h2><h3 id="Q1：Generate-Permutations"><a href="#Q1：Generate-Permutations" class="headerlink" title="Q1：Generate Permutations"></a>Q1：Generate Permutations</h3><p>先想base case是什么，然后将要写的函数当作已经完成要求的函数，实现递归。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_perms</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generates all permutations of the given sequence. Each permutation is a</span></span><br><span class="line"><span class="string">    list of the elements in SEQ in a different order. The permutations may be</span></span><br><span class="line"><span class="string">    yielded in any order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; perms = gen_perms([100])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; type(perms)</span></span><br><span class="line"><span class="string">    &lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(perms)</span></span><br><span class="line"><span class="string">    [100]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; try: #this piece of code prints &quot;No more permutations!&quot; if calling next would cause an error</span></span><br><span class="line"><span class="string">    ...     next(perms)</span></span><br><span class="line"><span class="string">    ... except StopIteration:</span></span><br><span class="line"><span class="string">    ...     print(&#x27;No more permutations!&#x27;)</span></span><br><span class="line"><span class="string">    No more permutations!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(gen_perms([1, 2, 3])) # Returns a sorted list containing elements of the generator</span></span><br><span class="line"><span class="string">    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(gen_perms((10, 20, 30)))</span></span><br><span class="line"><span class="string">    [[10, 20, 30], [10, 30, 20], [20, 10, 30], [20, 30, 10], [30, 10, 20], [30, 20, 10]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(gen_perms(&quot;ab&quot;))</span></span><br><span class="line"><span class="string">    [[&#x27;a&#x27;, &#x27;b&#x27;], [&#x27;b&#x27;, &#x27;a&#x27;]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(seq)!=<span class="built_in">list</span>:</span><br><span class="line">        seq=<span class="built_in">list</span>(seq)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(seq)&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> seq</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> perm <span class="keyword">in</span> gen_perms(seq[<span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seq)):</span><br><span class="line">                <span class="keyword">yield</span> perm[:i]+seq[:<span class="number">1</span>]+perm[i:]</span><br></pre></td></tr></table></figure><h3 id="Q2：Yield-Paths"><a href="#Q2：Yield-Paths" class="headerlink" title="Q2：Yield Paths"></a>Q2：Yield Paths</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">path_yielder</span>(<span class="params">t, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yields all possible paths from the root of t to a node with the label</span></span><br><span class="line"><span class="string">    value as a list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = tree(1, [tree(2, [tree(3), tree(4, [tree(6)]), tree(5)]), tree(5)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">          6</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(path_yielder(t1, 6))</span></span><br><span class="line"><span class="string">    [1, 2, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; path_to_5 = path_yielder(t1, 5)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(list(path_to_5))</span></span><br><span class="line"><span class="string">    [[1, 2, 5], [1, 5]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = tree(0, [tree(2, [t1])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t2)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">            3</span></span><br><span class="line"><span class="string">            4</span></span><br><span class="line"><span class="string">              6</span></span><br><span class="line"><span class="string">            5</span></span><br><span class="line"><span class="string">          5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; path_to_2 = path_yielder(t2, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(list(path_to_2))</span></span><br><span class="line"><span class="string">    [[0, 2], [0, 2, 1, 2]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==value:</span><br><span class="line">        <span class="keyword">yield</span> [value]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> path_yielder(b,value): </span><br><span class="line">            <span class="keyword">yield</span> [label(t)]+path</span><br></pre></td></tr></table></figure><h3 id="Q3：Preorder"><a href="#Q3：Preorder" class="headerlink" title="Q3：Preorder"></a>Q3：Preorder</h3><p>见hw04 Q7</p><h3 id="Q4：Generate-Preorder"><a href="#Q4：Generate-Preorder" class="headerlink" title="Q4：Generate Preorder"></a>Q4：Generate Preorder</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_preorder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield the entries in this tree in the order that they</span></span><br><span class="line"><span class="string">    would be visited by a preorder traversal (see problem description).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; gen = generate_preorder(numbers)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(gen)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(gen)</span></span><br><span class="line"><span class="string">    [2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> label(t)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> generate_preorder(b)</span><br></pre></td></tr></table></figure><h3 id="Q5：Remainder-Generator"><a href="#Q5：Remainder-Generator" class="headerlink" title="Q5：Remainder Generator"></a>Q5：Remainder Generator</h3><p>会生成m个生成器，其中第i个生成器生成是除以m余i的所有数</p><p>令第一个生成器为余0，第二个为余1…</p><p><del>这题的题目意思好难理解</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remainders_generator</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Yields m generators. The ith yielded generator yields natural numbers whose</span></span><br><span class="line"><span class="string">    remainder is i when divided by m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import types</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [isinstance(gen, types.GeneratorType) for gen in remainders_generator(5)]</span></span><br><span class="line"><span class="string">    [True, True, True, True, True]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remainders_four = remainders_generator(4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for i in range(4):</span></span><br><span class="line"><span class="string">    ...     print(&quot;First 3 natural numbers with remainder &#123;0&#125; when divided by 4:&quot;.format(i))</span></span><br><span class="line"><span class="string">    ...     gen = next(remainders_four)</span></span><br><span class="line"><span class="string">    ...     for _ in range(3):</span></span><br><span class="line"><span class="string">    ...         print(next(gen))</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 0 when divided by 4:</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 1 when divided by 4:</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 2 when divided by 4:</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 3 when divided by 4:</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> naturals():</span><br><span class="line">            <span class="keyword">if</span> x%m==i:</span><br><span class="line">                <span class="keyword">yield</span> x</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):            <span class="comment">#这里是关键，否则会Timeout</span></span><br><span class="line">        <span class="keyword">yield</span> helper(j)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">不用higher-order function也会报Timeout错误，怪</span></span><br><span class="line"><span class="string">可能是没有用high-order function “封装”，使程序一直进行？</span></span><br><span class="line"><span class="string">def remainders_generator(m):</span></span><br><span class="line"><span class="string">for i in range(m):</span></span><br><span class="line"><span class="string">        for x in naturals():</span></span><br><span class="line"><span class="string">            if x%m==i:</span></span><br><span class="line"><span class="string">                yield x</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Lab-07：Object-Oriented-Programming"><a href="#Lab-07：Object-Oriented-Programming" class="headerlink" title="Lab 07：Object-Oriented Programming"></a>Lab 07：Object-Oriented Programming</h2><h3 id="Q2：Retirement"><a href="#Q2：Retirement" class="headerlink" title="Q2：Retirement"></a>Q2：Retirement</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">time_to_retire</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the number of years until balance would grow to amount.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.balance &gt; <span class="number">0</span> <span class="keyword">and</span> amount &gt; <span class="number">0</span> <span class="keyword">and</span> self.interest &gt; <span class="number">0</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.balance*(self.interest+<span class="number">1</span>)**i&gt;=amount:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Q3：FreeChecking"><a href="#Q3：FreeChecking" class="headerlink" title="Q3：FreeChecking"></a>Q3：FreeChecking</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FreeChecking</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bank account that charges for withdrawals, but the first two are free!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch = FreeChecking(&#x27;Jack&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.balance = 20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(100)  # First one&#x27;s free</span></span><br><span class="line"><span class="string">    &#x27;Insufficient funds&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)    # And the second</span></span><br><span class="line"><span class="string">    17</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.balance</span></span><br><span class="line"><span class="string">    17</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)    # Ok, two free withdrawals is enough</span></span><br><span class="line"><span class="string">    13</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch2 = FreeChecking(&#x27;John&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch2.balance = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch2.withdraw(3) # No fee</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)  # ch still charges a fee</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(5)  # Not enough to cover fee + withdraw</span></span><br><span class="line"><span class="string">    &#x27;Insufficient funds&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    withdraw_fee = <span class="number">1</span></span><br><span class="line">    free_withdrawals = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self,amount</span>):</span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.max_withdrawal:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Can&#x27;t withdraw that amount&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.free_withdrawals&gt;<span class="number">0</span>:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            self.balance = self.balance - amount</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.balance=self.balance-amount-self.withdraw_fee</span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.max_withdrawal:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Can&#x27;t withdraw that amount&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br></pre></td></tr></table></figure><h3 id="Q4：Making-Cards"><a href="#Q4：Making-Cards" class="headerlink" title="Q4：Making Cards"></a>Q4：Making Cards</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span>:</span><br><span class="line">    cardtype = <span class="string">&#x27;Staff&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, attack, defense</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Create a Card object with a name, attack,</span></span><br><span class="line"><span class="string">        and defense.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member = Card(&#x27;staff&#x27;, 400, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.name</span></span><br><span class="line"><span class="string">        &#x27;staff&#x27;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.attack</span></span><br><span class="line"><span class="string">        400</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.defense</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff = Card(&#x27;other&#x27;, 300, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.attack</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.defense</span></span><br><span class="line"><span class="string">        500</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.attack=attack</span><br><span class="line">        self.defense=defense</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">self, opponent_card</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Calculate power as:</span></span><br><span class="line"><span class="string">        (player card&#x27;s attack) - (opponent card&#x27;s defense)/2</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member = Card(&#x27;staff&#x27;, 400, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff = Card(&#x27;other&#x27;, 300, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.power(other_staff)</span></span><br><span class="line"><span class="string">        150.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.power(staff_member)</span></span><br><span class="line"><span class="string">        150.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; third_card = Card(&#x27;third&#x27;, 200, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.power(third_card)</span></span><br><span class="line"><span class="string">        200.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; third_card.power(staff_member)</span></span><br><span class="line"><span class="string">        50.0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.attack-opponent_card.defense/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Q5：Making-a-Player"><a href="#Q5：Making-a-Player" class="headerlink" title="Q5：Making a Player"></a>Q5：Making a Player</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, deck, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize a Player object.</span></span><br><span class="line"><span class="string">        A Player starts the game by drawing 5 cards from their deck. Each turn,</span></span><br><span class="line"><span class="string">        a Player draws another card from the deck and chooses one to play.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card(&#x27;test&#x27;, 100, 100)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(6)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(test_deck, &#x27;tester&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_deck.cards)</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.deck = deck</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.hand=[self.deck.draw() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Draw a card from the player&#x27;s deck and add it to their hand.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card(&#x27;test&#x27;, 100, 100)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(6)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(test_deck, &#x27;tester&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.draw()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_deck.cards)</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        6</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> self.deck.is_empty(), <span class="string">&#x27;Deck is empty!&#x27;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.hand.append(self.deck.draw())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self, card_index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Remove and return a card from the player&#x27;s hand at the given index.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(standard_deck, &#x27;tester&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta1, ta2 = TACard(&quot;ta_1&quot;, 300, 400), TACard(&quot;ta_2&quot;, 500, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor1, tutor2 = TutorCard(&quot;t1&quot;, 200, 500), TutorCard(&quot;t2&quot;, 600, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.hand = [ta1, ta2, tutor1, tutor2]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.play(0) is ta1</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.play(2) is tutor2</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.hand.pop(card_index)</span><br></pre></td></tr></table></figure><h3 id="Q6：ALs：Defenders"><a href="#Q6：ALs：Defenders" class="headerlink" title="Q6：ALs：Defenders"></a>Q6：ALs：Defenders</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AICard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;AI&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Reduce the opponent&#x27;s card&#x27;s attack by its defense,</span></span><br><span class="line"><span class="string">        then double its defense.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, &#x27;p1&#x27;), Player(opponent_deck, &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 300, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test = AICard(&#x27;AI&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.attack</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.defense</span></span><br><span class="line"><span class="string">        1200</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 600, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test = AICard(&#x27;AI&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.attack</span></span><br><span class="line"><span class="string">        200</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.defense</span></span><br><span class="line"><span class="string">        800</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (opponent_card.attack-opponent_card.defense)&lt;<span class="number">0</span>:</span><br><span class="line">            opponent_card.attack=<span class="number">0</span></span><br><span class="line">            opponent_card.defense=opponent_card.defense*<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            opponent_card.attack=opponent_card.attack-opponent_card.defense</span><br><span class="line">            opponent_card.defense=opponent_card.defense*<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Q7：Tutors：Flummox"><a href="#Q7：Tutors：Flummox" class="headerlink" title="Q7：Tutors：Flummox"></a>Q7：Tutors：Flummox</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TutorCard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;Tutor&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Discard the first 3 cards in the opponent&#x27;s hand and have</span></span><br><span class="line"><span class="string">        them draw the same number of cards from their deck.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, &#x27;p1&#x27;), Player(opponent_deck, &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor_test = TutorCard(&#x27;Tutor&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; initial_deck_length = len(player2.deck.cards)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        p2 discarded and re-drew 3 cards!</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.hand)</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.deck.cards) == initial_deck_length - 3</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># You should add your implementation above this.</span></span><br><span class="line">        i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="number">3</span>:</span><br><span class="line">            opponent.hand.pop()</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;<span class="number">3</span>:</span><br><span class="line">            opponent.hand.append(opponent.deck.draw())</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; discarded and re-drew 3 cards!&#x27;</span>.<span class="built_in">format</span>(opponent.name))</span><br></pre></td></tr></table></figure><h3 id="Q8：TAs：Shift"><a href="#Q8：TAs：Shift" class="headerlink" title="Q8：TAs：Shift"></a>Q8：TAs：Shift</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TACard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;TA&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Swap the attack and defense of an opponent&#x27;s card.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, &#x27;p1&#x27;), Player(opponent_deck, &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 300, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta_test = TACard(&#x27;TA&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.attack</span></span><br><span class="line"><span class="string">        600</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.defense</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        store=opponent_card.attack</span><br><span class="line">        opponent_card.attack=opponent_card.defense</span><br><span class="line">        opponent_card.defense=store</span><br></pre></td></tr></table></figure><h3 id="Q9：The-Instructor-Arrives"><a href="#Q9：The-Instructor-Arrives" class="headerlink" title="Q9：The Instructor Arrives"></a>Q9：The Instructor Arrives</h3><p>optional</p><p>有点bug，<del>算了算了</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InstructorCard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;Instructor&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Adds the attack and defense of the opponent&#x27;s card to</span></span><br><span class="line"><span class="string">        all cards in the player&#x27;s deck, then removes all cards</span></span><br><span class="line"><span class="string">        in the opponent&#x27;s deck that share an attack or defense</span></span><br><span class="line"><span class="string">        stat with the opponent&#x27;s card.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card(&#x27;card&#x27;, 300, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; instructor_test = InstructorCard(&#x27;Instructor&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = test_card.copy()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(8)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(test_deck.copy(), &#x27;p1&#x27;), Player(test_deck.copy(), &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; instructor_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        3 cards were discarded from p2&#x27;s deck!</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; [(card.attack, card.defense) for card in player1.deck.cards]</span></span><br><span class="line"><span class="string">        [(600, 600), (600, 600), (600, 600)]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.deck.cards)</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        orig_opponent_deck_length = <span class="built_in">len</span>(opponent.deck.cards)</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># You should add your implementation above this.</span></span><br><span class="line">        <span class="keyword">for</span> i_cards <span class="keyword">in</span> player.deck.cards:</span><br><span class="line">            i_cards.attack+=opponent_card.attack</span><br><span class="line">            i_cards.defense+=opponent_card.defense</span><br><span class="line">        <span class="keyword">for</span> o_cards <span class="keyword">in</span> opponent.deck.cards:</span><br><span class="line">            <span class="keyword">if</span> o_cards.attack==opponent_card.attack <span class="keyword">or</span> o_cards.defense==opponent_card.defense:</span><br><span class="line">                opponent.deck.cards.remove(o_cards)</span><br><span class="line"></span><br><span class="line">        discarded = orig_opponent_deck_length - <span class="built_in">len</span>(opponent.deck.cards)</span><br><span class="line">        <span class="keyword">if</span> discarded:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; cards were discarded from &#123;&#125;\&#x27;s deck!&#x27;</span>.<span class="built_in">format</span>(discarded, opponent.name))</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="Project-03：Ants"><a href="#Project-03：Ants" class="headerlink" title="Project 03：Ants"></a>Project 03：Ants</h2><p><strong>Problem 2</strong></p><blockquote><p><em>Hint:</em> Remember that when the <code>__init__</code> method is called, the first parameter, <code>self</code>, is bound to the newly created object</p></blockquote><p><strong>Problem 8</strong></p><p>好开心！！！尽管改了几次，但最终看到“20 test cases passed! No cases failed.”时巨兴奋</p><p>8和7都是3pt。不过7基本上是我看别人代码写出来的（因为自己不太能理解题目和所给的代码意思</p><p>但8完全是自己写出来的，写了好久，一句一句地理解题目的意思，写的时候万分怀疑自己这样写是不是对的</p><p>希望以后这样的时刻能够多一些</p><p><strong>写完的一点感想：</strong></p><p>算是写过的三个project里面最难的了，写了好几天（当然，每天的coding时间较之前少</p><p>尽管有所参考，但也算是大有收获</p><blockquote><p>super().action(gamestate)</p><p>等同于</p><p>FatherClass.action(gamestate) #FatherClass是所继承的类</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;CS 61A presents Ants Vs. SomeBees.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> ucb <span class="keyword">import</span> main, interact, trace</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"><span class="comment"># Core Classes #</span></span><br><span class="line"><span class="comment">################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Place</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A Place holds insects and has an exit to another Place.&quot;&quot;&quot;</span></span><br><span class="line">    is_hive = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, exit=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create a Place with the given NAME and EXIT.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        name -- A string; the name of this Place.</span></span><br><span class="line"><span class="string">        exit -- The Place reached by exiting this Place (may be None).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.exit = exit</span><br><span class="line">        self.bees = []        <span class="comment"># A list of Bees</span></span><br><span class="line">        self.ant = <span class="literal">None</span>       <span class="comment"># An Ant</span></span><br><span class="line">        self.entrance = <span class="literal">None</span>  <span class="comment"># A Place</span></span><br><span class="line">        <span class="comment"># Phase 1: Add an entrance to the exit</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 2</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.exit:</span><br><span class="line">            exit.entrance=self</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># END Problem 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_insect</span>(<span class="params">self, insect</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Asks the insect to add itself to the current place. This method exists so</span></span><br><span class="line"><span class="string">            it can be enhanced in subclasses.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        insect.add_to(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_insect</span>(<span class="params">self, insect</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Asks the insect to remove itself from the current place. This method exists so</span></span><br><span class="line"><span class="string">            it can be enhanced in subclasses.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        insect.remove_from(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Insect</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;An Insect, the base class of Ant and Bee, has health and a Place.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    damage = <span class="number">0</span></span><br><span class="line">    is_waterproof=<span class="literal">False</span></span><br><span class="line">    <span class="comment"># ADD CLASS ATTRIBUTES HERE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, health, place=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create an Insect with a health amount and a starting PLACE.&quot;&quot;&quot;</span></span><br><span class="line">        self.health = health</span><br><span class="line">        self.place = place  <span class="comment"># set by Place.add_insect and Place.remove_insect</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reduce_health</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Reduce health by AMOUNT, and remove the insect from its place if it</span></span><br><span class="line"><span class="string">        has no health remaining.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_insect = Insect(5)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_insect.reduce_health(2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_insect.health</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.health -= amount</span><br><span class="line">        <span class="keyword">if</span> self.health &lt;= <span class="number">0</span>:</span><br><span class="line">            self.death_callback()</span><br><span class="line">            self.place.remove_insect(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">self, gamestate</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;The action performed each turn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gamestate -- The GameState, used to access game state information.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">death_callback</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># overriden by the gui</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_to</span>(<span class="params">self, place</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Add this Insect to the given Place</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        By default just sets the place attribute, but this should be overriden in the subclasses</span></span><br><span class="line"><span class="string">            to manipulate the relevant attributes of Place</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.place = place</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_from</span>(<span class="params">self, place</span>):</span><br><span class="line">        self.place = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        cname = <span class="built_in">type</span>(self).__name__</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;0&#125;(&#123;1&#125;, &#123;2&#125;)&#x27;</span>.<span class="built_in">format</span>(cname, self.health, self.place)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ant</span>(<span class="title class_ inherited__">Insect</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;An Ant occupies a place and does work for the colony.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    implemented = <span class="literal">False</span>  <span class="comment"># Only implemented Ant classes should be instantiated</span></span><br><span class="line">    food_cost = <span class="number">0</span></span><br><span class="line">    is_container = <span class="literal">False</span></span><br><span class="line">    buffed=<span class="literal">False</span></span><br><span class="line">    <span class="comment"># ADD CLASS ATTRIBUTES HERE</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, health=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create an Insect with a HEALTH quantity.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(health)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">cls, gamestate</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create an Ant for a given GameState, or return None if not possible.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> cls.food_cost &gt; gamestate.food:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Not enough food remains to place &#x27;</span> + cls.__name__)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> cls()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_contain</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store_ant</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="literal">False</span>, <span class="string">&quot;&#123;0&#125; cannot contain an ant&quot;</span>.<span class="built_in">format</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_ant</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">assert</span> <span class="literal">False</span>, <span class="string">&quot;&#123;0&#125; cannot contain an ant&quot;</span>.<span class="built_in">format</span>(self)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_to</span>(<span class="params">self, place</span>):</span><br><span class="line">        <span class="keyword">if</span> place.ant <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            place.ant = self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># BEGIN Problem 8</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> place.ant.can_contain(self):  <span class="comment">#这个函数要不要改一下形式？</span></span><br><span class="line">                place.ant.ant_contained=self</span><br><span class="line">            <span class="keyword">elif</span> self.can_contain(place.ant):</span><br><span class="line">                self.ant_contained=place.ant</span><br><span class="line">                place.ant=self  <span class="comment">#这里要不要把二者交换，也就是令self=place.ant？</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span> place.ant <span class="keyword">is</span> <span class="literal">None</span>, <span class="string">&#x27;Two ants in &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(place)</span><br><span class="line">            <span class="comment"># END Problem 8</span></span><br><span class="line">        Insect.add_to(self, place)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_from</span>(<span class="params">self, place</span>):</span><br><span class="line">        <span class="keyword">if</span> place.ant <span class="keyword">is</span> self:</span><br><span class="line">            place.ant = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> place.ant <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">False</span>, <span class="string">&#x27;&#123;0&#125; is not in &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(self, place)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            place.ant.remove_ant(self)</span><br><span class="line">        Insect.remove_from(self, place)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buff</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Double this ants&#x27;s damage, if it has not already been buffed.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 12</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.buffed:</span><br><span class="line">            self.damage*=<span class="number">2</span></span><br><span class="line">            self.buffed=<span class="literal">True</span></span><br><span class="line">        <span class="comment"># END Problem 12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HarvesterAnt</span>(<span class="title class_ inherited__">Ant</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;HarvesterAnt produces 1 additional food per turn for the colony.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;Harvester&#x27;</span></span><br><span class="line">    implemented = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># OVERRIDE CLASS ATTRIBUTES HERE</span></span><br><span class="line">    food_cost=<span class="number">2</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">self, gamestate</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Produce 1 additional food for the colony.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        gamestate -- The GameState, used to access game state information.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 1</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        gamestate.food+=<span class="number">1</span></span><br><span class="line">        <span class="comment"># END Problem 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThrowerAnt</span>(<span class="title class_ inherited__">Ant</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;ThrowerAnt throws a leaf each turn at the nearest Bee in its range.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;Thrower&#x27;</span></span><br><span class="line">    implemented = <span class="literal">True</span></span><br><span class="line">    damage = <span class="number">1</span></span><br><span class="line">    max_range=<span class="number">3</span></span><br><span class="line">    min_range=<span class="number">5</span></span><br><span class="line">    <span class="comment"># ADD/OVERRIDE CLASS ATTRIBUTES HERE</span></span><br><span class="line">    food_cost=<span class="number">3</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nearest_bee</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the nearest Bee in a Place that is not the HIVE, connected to</span></span><br><span class="line"><span class="string">        the ThrowerAnt&#x27;s Place by following entrances.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This method returns None if there is no such Bee (or none in range).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 3 and 4</span></span><br><span class="line">        current_place=self.place    <span class="comment">#Start from the current Place of the ThrowerAnt</span></span><br><span class="line">        <span class="keyword">while</span> current_place.entrance: <span class="comment">#只要不是hive</span></span><br><span class="line">            <span class="keyword">if</span> current_place.bees:</span><br><span class="line">                <span class="keyword">return</span> random_bee(current_place.bees)</span><br><span class="line">            current_place=current_place.entrance    </span><br><span class="line">        <span class="comment">#感觉就是把题目的那几句话翻译出来</span></span><br><span class="line">        <span class="comment"># END Problem 3 and 4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">throw_at</span>(<span class="params">self, target</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Throw a leaf at the TARGET Bee, reducing its health.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            target.reduce_health(self.damage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">self, gamestate</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Throw a leaf at the nearest Bee in range.&quot;&quot;&quot;</span></span><br><span class="line">        self.throw_at(self.nearest_bee())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_bee</span>(<span class="params">bees</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a random bee from a list of bees, or return None if bees is empty.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(bees, <span class="built_in">list</span>), <span class="string">&quot;random_bee&#x27;s argument should be a list but was a %s&quot;</span> % <span class="built_in">type</span>(bees).__name__</span><br><span class="line">    <span class="keyword">if</span> bees:</span><br><span class="line">        <span class="keyword">return</span> random.choice(bees)</span><br><span class="line"></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"><span class="comment"># Extensions #</span></span><br><span class="line"><span class="comment">##############</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShortThrower</span>(<span class="title class_ inherited__">ThrowerAnt</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A ThrowerAnt that only throws leaves at Bees at most 3 places away.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;Short&#x27;</span></span><br><span class="line">    food_cost = <span class="number">2</span></span><br><span class="line">    <span class="comment"># OVERRIDE CLASS ATTRIBUTES HERE</span></span><br><span class="line">    <span class="comment"># BEGIN Problem 4</span></span><br><span class="line">    implemented = <span class="literal">True</span>   <span class="comment"># Change to True to view in the GUI</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nearest_bee</span>(<span class="params">self</span>):</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        current_place=self.place</span><br><span class="line">        <span class="keyword">while</span> count&lt;self.max_range <span class="keyword">and</span> current_place.entrance:</span><br><span class="line">            <span class="keyword">if</span> current_place.bees:</span><br><span class="line">                <span class="keyword">return</span> random_bee(current_place.bees)</span><br><span class="line">            current_place=current_place.entrance</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    <span class="comment"># END Problem 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LongThrower</span>(<span class="title class_ inherited__">ThrowerAnt</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A ThrowerAnt that only throws leaves at Bees at least 5 places away.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;Long&#x27;</span></span><br><span class="line">    food_cost = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># OVERRIDE CLASS ATTRIBUTES HERE</span></span><br><span class="line">    <span class="comment"># BEGIN Problem 4</span></span><br><span class="line">    implemented = <span class="literal">True</span>   <span class="comment"># Change to True to view in the GUI</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nearest_bee</span>(<span class="params">self</span>):</span><br><span class="line">        current_place=self.place</span><br><span class="line">        <span class="keyword">while</span> current_place.entrance.entrance.entrance.entrance.entrance: <span class="comment">#妙在这里</span></span><br><span class="line">            <span class="keyword">if</span> current_place.bees:</span><br><span class="line">                <span class="keyword">return</span> random_bee(current_place.bees)</span><br><span class="line">            current_place=current_place.entrance</span><br><span class="line"></span><br><span class="line">    <span class="comment"># END Problem 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FireAnt</span>(<span class="title class_ inherited__">Ant</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;FireAnt cooks any Bee in its Place when it expires.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;Fire&#x27;</span></span><br><span class="line">    damage = <span class="number">3</span></span><br><span class="line">    food_cost = <span class="number">5</span></span><br><span class="line">    <span class="comment"># OVERRIDE CLASS ATTRIBUTES HERE</span></span><br><span class="line">    <span class="comment"># BEGIN Problem 5</span></span><br><span class="line">    implemented = <span class="literal">True</span>   <span class="comment"># Change to True to view in the GUI</span></span><br><span class="line">    <span class="comment"># END Problem 5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, health=<span class="number">3</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Create an Ant with a HEALTH quantity.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(health)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reduce_health</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Reduce health by AMOUNT, and remove the FireAnt from its place if it</span></span><br><span class="line"><span class="string">        has no health remaining.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Make sure to reduce the health of each bee in the current place, and apply</span></span><br><span class="line"><span class="string">        the additional damage if the fire ant dies.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 5</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        current_place=self.place</span><br><span class="line">        <span class="keyword">for</span> bee <span class="keyword">in</span> current_place.bees[:]:</span><br><span class="line">            bee.reduce_health(amount)</span><br><span class="line">        <span class="keyword">if</span> amount&gt;=self.health:   <span class="comment">#amount指蛰fireant的蜜蜂数量，此处指fireant的health为零</span></span><br><span class="line">            <span class="keyword">for</span> bee <span class="keyword">in</span> current_place.bees[:]:</span><br><span class="line">                bee.reduce_health(self.damage)</span><br><span class="line">            <span class="built_in">super</span>().reduce_health(amount)  <span class="comment">#可以根据提示？</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">super</span>().reduce_health(amount)</span><br><span class="line">        <span class="comment"># END Problem 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BEGIN Problem 6</span></span><br><span class="line"><span class="comment"># The WallAnt class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WallAnt</span>(<span class="title class_ inherited__">Ant</span>):</span><br><span class="line">    name=<span class="string">&#x27;Wall&#x27;</span></span><br><span class="line">    food_cost=<span class="number">4</span></span><br><span class="line">    implemented=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, health=<span class="number">4</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(health)</span><br><span class="line"><span class="comment"># END Problem 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BEGIN Problem 7</span></span><br><span class="line"><span class="comment"># The HungryAnt Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HungryAnt</span>(<span class="title class_ inherited__">Ant</span>):</span><br><span class="line">    name=<span class="string">&#x27;Hungry&#x27;</span></span><br><span class="line">    implemented=<span class="literal">True</span></span><br><span class="line">    food_cost=<span class="number">4</span></span><br><span class="line">    chew_duration=<span class="number">3</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,health=<span class="number">1</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(health)</span><br><span class="line">        self.chew_countdown=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.chew_countdown!=<span class="number">0</span>:</span><br><span class="line">            self.chew_countdown-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current_place=self.place</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(current_place.bees)&gt;<span class="number">0</span>:</span><br><span class="line">                self.chew_countdown=self.chew_duration</span><br><span class="line">                bee=random_bee(current_place.bees)</span><br><span class="line">                bee.reduce_health(bee.health)</span><br><span class="line"><span class="comment"># END Problem 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContainerAnt</span>(<span class="title class_ inherited__">Ant</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ContainerAnt can share a space with other ants by containing them.</span></span><br><span class="line"><span class="string">    ant_contained: stores the ant it contains</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    is_container = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.ant_contained = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">can_contain</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="comment"># BEGIN Problem 8</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> other.is_container <span class="keyword">and</span> self.ant_contained ==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># END Problem 8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">store_ant</span>(<span class="params">self, ant</span>):</span><br><span class="line">        <span class="comment"># BEGIN Problem 8</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.ant_contained=ant</span><br><span class="line">        <span class="comment"># END Problem 8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_ant</span>(<span class="params">self, ant</span>):</span><br><span class="line">        <span class="keyword">if</span> self.ant_contained <span class="keyword">is</span> <span class="keyword">not</span> ant:</span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">False</span>, <span class="string">&quot;&#123;&#125; does not contain &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self, ant)</span><br><span class="line">        self.ant_contained = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_from</span>(<span class="params">self, place</span>):</span><br><span class="line">        <span class="comment"># Special handling for container ants (this is optional)</span></span><br><span class="line">        <span class="keyword">if</span> place.ant <span class="keyword">is</span> self:</span><br><span class="line">            <span class="comment"># Container was removed. Contained ant should remain in the game</span></span><br><span class="line">            place.ant = place.ant.ant_contained</span><br><span class="line">            Insect.remove_from(self, place)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># default to normal behavior</span></span><br><span class="line">            Ant.remove_from(self, place)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">self, gamestate</span>):</span><br><span class="line">        <span class="comment"># BEGIN Problem 8</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.ant_contained!=<span class="literal">None</span>:</span><br><span class="line">            self.ant_contained.action(gamestate)  </span><br><span class="line">        <span class="comment"># END Problem 8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BodyguardAnt</span>(<span class="title class_ inherited__">ContainerAnt</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;BodyguardAnt provides protection to other Ants.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;Bodyguard&#x27;</span></span><br><span class="line">    food_cost = <span class="number">4</span></span><br><span class="line">    <span class="comment"># OVERRIDE CLASS ATTRIBUTES HERE</span></span><br><span class="line">    <span class="comment"># BEGIN Problem 8</span></span><br><span class="line">    implemented = <span class="literal">True</span>   <span class="comment"># Change to True to view in the GUI</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,health=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(health)</span><br><span class="line">    <span class="comment"># END Problem 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BEGIN Problem 9</span></span><br><span class="line"><span class="comment"># The TankAnt class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TankAnt</span>(<span class="title class_ inherited__">ContainerAnt</span>):</span><br><span class="line">    name=<span class="string">&#x27;Tank&#x27;</span></span><br><span class="line">    food_cost=<span class="number">6</span></span><br><span class="line">    damage=<span class="number">1</span></span><br><span class="line">    implemented=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,health=<span class="number">2</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(health)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">self,gamestate</span>):</span><br><span class="line">        current_place=self.place</span><br><span class="line">        <span class="keyword">if</span> self.ant_contained!=<span class="literal">None</span>:</span><br><span class="line">            self.ant_contained.action(gamestate)</span><br><span class="line">        <span class="keyword">for</span> bee <span class="keyword">in</span> current_place.bees[:]:</span><br><span class="line">            bee.reduce_health(self.damage)</span><br><span class="line"><span class="comment"># END Problem 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Water</span>(<span class="title class_ inherited__">Place</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Water is a place that can only hold waterproof insects.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_insect</span>(<span class="params">self, insect</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Add an Insect to this place. If the insect is not waterproof, reduce</span></span><br><span class="line"><span class="string">        its health to 0.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 10</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().add_insect(insect)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> insect.is_waterproof:</span><br><span class="line">            insect.reduce_health(insect.health)</span><br><span class="line">        <span class="comment"># END Problem 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BEGIN Problem 11</span></span><br><span class="line"><span class="comment"># The ScubaThrower class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScubaThrower</span>(<span class="title class_ inherited__">ThrowerAnt</span>):</span><br><span class="line">    food_cost=<span class="number">6</span></span><br><span class="line">    is_waterproof=<span class="literal">True</span></span><br><span class="line">    name=<span class="string">&#x27;Scuba&#x27;</span></span><br><span class="line">    implemented=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># END Problem 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BEGIN Problem 12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueenAnt</span>(<span class="title class_ inherited__">ScubaThrower</span>):  <span class="comment"># You should change this line</span></span><br><span class="line"><span class="comment"># END Problem 12</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;The Queen of the colony. The game is over if a bee enters her place.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">&#x27;Queen&#x27;</span></span><br><span class="line">    food_cost = <span class="number">7</span></span><br><span class="line">    is_queenant=<span class="literal">True</span></span><br><span class="line">    <span class="comment"># OVERRIDE CLASS ATTRIBUTES HERE</span></span><br><span class="line">    <span class="comment"># BEGIN Problem 12</span></span><br><span class="line">    implemented = <span class="literal">True</span>   <span class="comment"># Change to True to view in the GUI</span></span><br><span class="line">    <span class="comment"># END Problem 12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">cls, gamestate</span>): <span class="comment">#有一定参考</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns a new instance of the Ant class if it is possible to construct, or</span></span><br><span class="line"><span class="string">        returns None otherwise. Remember to call the construct() method of the superclass!</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 12</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        cls.is_queenant=QueenAnt.is_queenant</span><br><span class="line">        <span class="keyword">if</span> cls.food_cost &gt; gamestate.food:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Not enough food remains to place &#x27;</span> + cls.__name__)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">elif</span> cls.is_queenant:</span><br><span class="line">            QueenAnt.is_queenant=<span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>().construct(gamestate)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># END Problem 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">self, gamestate</span>):  <span class="comment">#有一定参考</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;A queen ant throws a leaf, but also doubles the damage of ants</span></span><br><span class="line"><span class="string">        in her tunnel.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 12</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment">#if not self.is_queenant:</span></span><br><span class="line">            <span class="comment">#self.reduce_health(self.health)</span></span><br><span class="line">        <span class="comment">#else:</span></span><br><span class="line">        <span class="built_in">super</span>().action(gamestate)</span><br><span class="line">        behind=self.place.exit</span><br><span class="line">        <span class="keyword">while</span> behind:</span><br><span class="line">            <span class="keyword">if</span> behind.ant!=<span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> behind.ant.buffed:</span><br><span class="line">                    behind.ant.buff()</span><br><span class="line">                <span class="keyword">if</span> behind.ant.is_container <span class="keyword">and</span> behind.ant.ant_contained:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> behind.ant.ant_contained.buffed:</span><br><span class="line">                        behind.ant.ant_contained.buff()</span><br><span class="line">            behind=behind.exit</span><br><span class="line"></span><br><span class="line">        <span class="comment"># END Problem 12</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reduce_health</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Reduce health by AMOUNT, and if the QueenAnt has no health</span></span><br><span class="line"><span class="string">        remaining, signal the end of the game.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN Problem 12</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        current_place=self.place</span><br><span class="line">        <span class="keyword">for</span> bee <span class="keyword">in</span> current_place.bees[:]:</span><br><span class="line">            bee.reduce_health(amount)</span><br><span class="line">        <span class="keyword">if</span> amount&gt;=self.health:</span><br><span class="line">            ants_lose()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove_from</span>(<span class="params">self,place</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        if place.ant is self:</span></span><br><span class="line"><span class="string">            return</span></span><br><span class="line"><span class="string">        elif place.ant is None:</span></span><br><span class="line"><span class="string">            assert False, &#x27;&#123;0&#125; is not in &#123;1&#125;&#x27;.format(self, place)</span></span><br><span class="line"><span class="string">        else:</span></span><br><span class="line"><span class="string">            place.ant.remove_ant(self)</span></span><br><span class="line"><span class="string">        Insect.remove_from(self, place)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="literal">None</span>   <span class="comment">#疑惑，为什么不能像上面那样写</span></span><br><span class="line">        <span class="comment"># END Problem 12</span></span><br></pre></td></tr></table></figure><p><del>后面的optional部分就不写了，也没有截取到上面</del></p><h2 id="Disc-07：Object-Oriented-Programming-String-Repredentation"><a href="#Disc-07：Object-Oriented-Programming-String-Repredentation" class="headerlink" title="Disc 07：Object-Oriented Programming, String Repredentation"></a>Disc 07：Object-Oriented Programming, String Repredentation</h2><h3 id="Q2：Keyboard"><a href="#Q2：Keyboard" class="headerlink" title="Q2：Keyboard"></a>Q2：Keyboard</h3><p>未debug版（悲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pos, key</span>):</span><br><span class="line">        self.pos = pos</span><br><span class="line">        self.key = key</span><br><span class="line">        self.times_pressed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Keyboard</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A Keyboard takes in an arbitrary amount of buttons, and has a</span></span><br><span class="line"><span class="string">    dictionary of positions as keys, and values as Buttons.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1 = Button(0, &quot;H&quot;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b2 = Button(1, &quot;I&quot;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k = Keyboard(b1, b2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.buttons[0].key   #dictionary的key</span></span><br><span class="line"><span class="string">    &#x27;H&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.press(1)</span></span><br><span class="line"><span class="string">    &#x27;I&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.press(2) # No button at this position</span></span><br><span class="line"><span class="string">    &#x27;&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.typing([0, 1])</span></span><br><span class="line"><span class="string">    &#x27;HI&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.typing([1, 0])</span></span><br><span class="line"><span class="string">    &#x27;IH&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1.times_pressed</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b2.times_pressed</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.buttons=&#123;&#125;  <span class="comment">#dictionary</span></span><br><span class="line">        <span class="keyword">for</span> args <span class="keyword">in</span> args:    <span class="comment">#为什么这个要这样写，悲</span></span><br><span class="line">            self.buttons[args.pos]=args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">press</span>(<span class="params">self, info</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Takes in a position of the button pressed, and</span></span><br><span class="line"><span class="string">        returns that button&#x27;s output.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> info&lt;=<span class="built_in">len</span>(self.buttons):</span><br><span class="line">            <span class="keyword">return</span> self.buttons[info].key</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">typing</span>(<span class="params">self, typing_input</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Takes in a list of positions of buttons pressed, and</span></span><br><span class="line"><span class="string">        returns the total output.&quot;&quot;&quot;</span></span><br><span class="line">        output=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> typing_input:</span><br><span class="line">            output+=typing_input[index(word)]</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h3 id="Q3：Cat"><a href="#Q3：Cat" class="headerlink" title="Q3：Cat"></a>Q3：Cat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, owner, lives=<span class="number">9</span></span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.owner=owner</span><br><span class="line">        self.lives=lives</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Print out a cat&#x27;s greeting.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; Cat(&#x27;Thomas&#x27;, &#x27;Tammy&#x27;).talk()</span></span><br><span class="line"><span class="string">        Thomas says meow!</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; says meow!&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lose_life</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Decrements a cat&#x27;s life by 1. When lives reaches zero,</span></span><br><span class="line"><span class="string">        is_alive becomes False. If this is called after lives has</span></span><br><span class="line"><span class="string">        reached zero, print &#x27;This cat has no more lives to lose.&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.lives==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;This cat has no more lives to lose.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：NoisyCat"><a href="#Q4：NoisyCat" class="headerlink" title="Q4：NoisyCat"></a>Q4：NoisyCat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, owner, lives=<span class="number">9</span></span>):</span><br><span class="line">        <span class="comment"># Is this method necessary? Why or why not?</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.owner=owner</span><br><span class="line">        self.lives=lives</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Talks twice as much as a regular cat.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; NoisyCat(&#x27;Magic&#x27;, &#x27;James&#x27;).talk()</span></span><br><span class="line"><span class="string">        Magic says meow!</span></span><br><span class="line"><span class="string">        Magic says meow!</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; says meow!&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br></pre></td></tr></table></figure><h3 id="Q5：Cat-Adoption（cls用法"><a href="#Q5：Cat-Adoption（cls用法" class="headerlink" title="Q5：Cat Adoption（cls用法"></a>Q5：Cat Adoption（cls用法</h3><p>…to be continued</p><p>需要领悟一下cls的用法</p><blockquote><p>关于cls：</p><p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法,而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。</p><p><strong>cls在python中表示类本身，self为类的一个实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        ...</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cls</span>):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>则cls()等于Person()，Person.build()返回一个Person的实例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, owner, lives=<span class="number">9</span></span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.owner=owner</span><br><span class="line">        self.lives=lives</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Insert other previously defined methods here</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adopt_random_cat</span>(<span class="params">cls, owner</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns a new instance of a Cat with the given owner,</span></span><br><span class="line"><span class="string">        a randomly chosen name and a random number of lives.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; randcat = Cat.adopt_random_cat(&quot;Ifeoma&quot;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; isinstance(randcat, Cat)</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; randcat.owner</span></span><br><span class="line"><span class="string">        &#x27;Ifeoma&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cls.name=random.choice[]   <span class="comment">#这个函数用的不对</span></span><br><span class="line">        cls.lives=random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> cls(name, owner, lives)</span><br></pre></td></tr></table></figure><p>就这样吧，有气无力.jpg</p><h2 id="HW-06：Object-Oriented-Programming-Linked-Lists"><a href="#HW-06：Object-Oriented-Programming-Linked-Lists" class="headerlink" title="HW 06：Object-Oriented Programming, Linked Lists"></a>HW 06：Object-Oriented Programming, Linked Lists</h2><h3 id="Q1-Vending-Machine"><a href="#Q1-Vending-Machine" class="headerlink" title="Q1:Vending Machine"></a>Q1:Vending Machine</h3><p>c++里类似cout的操作在python中可以用f表达式代替</p><p>各函数功能：</p><p>__init__：初始化</p><p>vend：出售物品</p><p>add_funds：增加所有的balance</p><p>restock：能被购买的物品数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VendingMachine</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A vending machine that vends some product for some price.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v = VendingMachine(&#x27;candy&#x27;, 10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    &#x27;Nothing left to vend. Please restock.&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.add_funds(15)</span></span><br><span class="line"><span class="string">    &#x27;Nothing left to vend. Please restock. Here is your $15.&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.restock(2)</span></span><br><span class="line"><span class="string">    &#x27;Current candy stock: 2&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    &#x27;You must add $10 more funds.&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.add_funds(7)</span></span><br><span class="line"><span class="string">    &#x27;Current balance: $7&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    &#x27;You must add $3 more funds.&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.add_funds(5)</span></span><br><span class="line"><span class="string">    &#x27;Current balance: $12&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    &#x27;Here is your candy and $2 change.&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.add_funds(10)</span></span><br><span class="line"><span class="string">    &#x27;Current balance: $10&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.vend()</span></span><br><span class="line"><span class="string">    &#x27;Here is your candy.&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; v.add_funds(15)</span></span><br><span class="line"><span class="string">    &#x27;Nothing left to vend. Please restock. Here is your $15.&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = VendingMachine(&#x27;soda&#x27;, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.restock(3)</span></span><br><span class="line"><span class="string">    &#x27;Current soda stock: 3&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.restock(3)</span></span><br><span class="line"><span class="string">    &#x27;Current soda stock: 6&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.add_funds(2)</span></span><br><span class="line"><span class="string">    &#x27;Current balance: $2&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w.vend()</span></span><br><span class="line"><span class="string">    &#x27;Here is your soda.&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,price</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.price=price</span><br><span class="line">        self.stock=<span class="number">0</span></span><br><span class="line">        self.balance=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">vend</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.stock&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&#x27;Nothing left to vend. Please restock.&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.balance&lt;self.price:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;&#x27;You must add $<span class="subst">&#123;self.price-self.balance&#125;</span> more funds.&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> self.balance&gt;self.price:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;&#x27;Here is your <span class="subst">&#123;self.name&#125;</span> and $<span class="subst">&#123;self.balance-self.price&#125;</span> change.&#x27;&quot;</span>)</span><br><span class="line">                self.balance=<span class="number">0</span></span><br><span class="line">                self.stock-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;&#x27;Here is your <span class="subst">&#123;self.name&#125;</span>.&#x27;&quot;</span>)</span><br><span class="line">                self.balance=<span class="number">0</span></span><br><span class="line">                self.stock-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_funds</span>(<span class="params">self,funds</span>):</span><br><span class="line">        <span class="keyword">if</span> self.stock&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&#x27;Nothing left to vend. Please restock. Here is your $<span class="subst">&#123;funds&#125;</span>.&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.balance+=funds</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;&#x27;Current balance: $<span class="subst">&#123;self.balance&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restock</span>(<span class="params">self,num</span>):</span><br><span class="line">        self.stock+=num</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&#x27;Current <span class="subst">&#123;self.name&#125;</span> stock: <span class="subst">&#123;self.stock&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="Q2：Mint"><a href="#Q2：Mint" class="headerlink" title="Q2：Mint"></a>Q2：Mint</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mint</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A mint creates coins by stamping on years.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The update method sets the mint&#x27;s stamp to Mint.present_year.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mint = Mint()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mint.year</span></span><br><span class="line"><span class="string">    2021</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dime = mint.create(Dime)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dime.year</span></span><br><span class="line"><span class="string">    2021</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; Mint.present_year = 2101  # Time passes</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; nickel = mint.create(Nickel)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; nickel.year     # The mint has not updated its stamp yet</span></span><br><span class="line"><span class="string">    2021</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; nickel.worth()  # 5 cents + (80 - 50 years)</span></span><br><span class="line"><span class="string">    35</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mint.update()   # The mint&#x27;s year is updated to 2101</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; Mint.present_year = 2176     # More time passes</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mint.create(Dime).worth()    # 10 cents + (75 - 50 years)</span></span><br><span class="line"><span class="string">    35</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; Mint().create(Dime).worth()  # A new mint has the current year</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dime.worth()     # 10 cents + (155 - 50 years)</span></span><br><span class="line"><span class="string">    115</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; Dime.cents = 20  # Upgrade all dimes!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dime.worth()     # 20 cents + (155 - 50 years)</span></span><br><span class="line"><span class="string">    125</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    present_year = <span class="number">2021</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.update()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, kind</span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> kind(self.year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.year=Mint.present_year</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, year</span>):</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">worth</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.cents+<span class="built_in">max</span>(<span class="number">0</span>,Mint.present_year-self.year-<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nickel</span>(<span class="title class_ inherited__">Coin</span>):</span><br><span class="line">    cents = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dime</span>(<span class="title class_ inherited__">Coin</span>):</span><br><span class="line">    cents = <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="Q3：Store-Digits"><a href="#Q3：Store-Digits" class="headerlink" title="Q3：Store Digits"></a>Q3：Store Digits</h3><p>由于n是从右往左遍历，故也采用向前插入数据构建链表的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">store_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Stores the digits of a positive number n in a linked list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = store_digits(1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    Link(1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; store_digits(2345)</span></span><br><span class="line"><span class="string">    Link(2, Link(3, Link(4, Link(5))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; store_digits(876)</span></span><br><span class="line"><span class="string">    Link(8, Link(7, Link(6)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # a check for restricted functions</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, re</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cleaned = re.sub(r&quot;#.*\\n&quot;, &#x27;&#x27;, re.sub(r&#x27;&quot;&#123;3&#125;[\s\S]*?&quot;&#123;3&#125;&#x27;, &#x27;&#x27;, inspect.getsource(store_digits)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(&quot;Do not use str or reversed!&quot;) if any([r in cleaned for r in [&quot;str&quot;, &quot;reversed&quot;]]) else None</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link1 = Link(3, Link(Link(4), Link(5, Link(6))))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    res=Link.empty</span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        rem=Link(n%<span class="number">10</span>)   <span class="comment">#这里一定要是Link，不能是单独的数字</span></span><br><span class="line">        rem.rest=res</span><br><span class="line">        res=rem</span><br><span class="line">        n=n//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> rem</span><br></pre></td></tr></table></figure><h3 id="Q4：Mutable-Mapping"><a href="#Q4：Mutable-Mapping" class="headerlink" title="Q4：Mutable Mapping"></a>Q4：Mutable Mapping</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deep_map_mut</span>(<span class="params">fn, link</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Mutates a deep link by replacing each item found with the</span></span><br><span class="line"><span class="string">    result of calling fn on the item.  Does NOT create new Links (so</span></span><br><span class="line"><span class="string">    no use of Link&#x27;s constructor)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Does not return the modified Link object.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link1 = Link(3, Link(Link(4), Link(5, Link(6))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # Disallow the use of making new Links before calling deep_map_mut</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; Link.__init__, hold = lambda *args: print(&quot;Do not create any new Links.&quot;), Link.__init__</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; try:</span></span><br><span class="line"><span class="string">    ...     deep_map_mut(lambda x: x * x, link1)</span></span><br><span class="line"><span class="string">    ... finally:</span></span><br><span class="line"><span class="string">    ...     Link.__init__ = hold</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(link1)</span></span><br><span class="line"><span class="string">    &lt;9 &lt;16&gt; 25 36&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> link <span class="keyword">is</span> Link.empty:    <span class="comment">#不能忘了link为empty的情况，否则递归无法完成</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(link.first,Link):</span><br><span class="line">            deep_map_mut(fn,link.first)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            link.first=fn(link.first)</span><br><span class="line">        deep_map_mut(fn,link.rest)</span><br></pre></td></tr></table></figure><h3 id="Q5-Two-List"><a href="#Q5-Two-List" class="headerlink" title="Q5:Two List"></a>Q5:Two List</h3><p>主要是想办法把vals的元素与amounts中相应位置的数量联系起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_list</span>(<span class="params">vals, amounts</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns a linked list according to the two lists that were passed in. Assume</span></span><br><span class="line"><span class="string">    vals and amounts are the same size. Elements in vals represent the value, and the</span></span><br><span class="line"><span class="string">    corresponding element in amounts represents the number of this value desired in the</span></span><br><span class="line"><span class="string">    final linked list. Assume all elements in amounts are greater than 0. Assume both</span></span><br><span class="line"><span class="string">    lists have at least one element.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = [1, 3, 2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = [1, 1, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = two_list(a, b)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c</span></span><br><span class="line"><span class="string">    Link(1, Link(3, Link(2)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = [1, 3, 2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = [2, 2, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = two_list(a, b)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c</span></span><br><span class="line"><span class="string">    Link(1, Link(1, Link(3, Link(3, Link(2)))))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    vals.reverse()</span><br><span class="line">    amounts.reverse()</span><br><span class="line">    res=Link.empty</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(vals)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(amounts[i]):</span><br><span class="line">            res=Link(vals[i],res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="Lab-08：Linked-Lists-Mutable-Trees"><a href="#Lab-08：Linked-Lists-Mutable-Trees" class="headerlink" title="Lab 08：Linked Lists, Mutable Trees"></a>Lab 08：Linked Lists, Mutable Trees</h2><h3 id="Q2：Convert-Link"><a href="#Q2：Convert-Link" class="headerlink" title="Q2：Convert Link"></a>Q2：Convert Link</h3><p>简单的recursive</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">convert_link</span>(<span class="params">link</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Takes a linked list and returns a Python list with the same elements.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link = Link(1, Link(2, Link(3, Link(4))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; convert_link(link)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; convert_link(Link.empty)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> link==Link.empty:</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> [link.first]+convert_link(link.rest)</span><br></pre></td></tr></table></figure><h3 id="Q4：Square"><a href="#Q4：Square" class="headerlink" title="Q4：Square"></a>Q4：Square</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">label_squarer</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Mutates a Tree t by squaring all its elements.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; label_squarer(t)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t</span></span><br><span class="line"><span class="string">    Tree(1, [Tree(9, [Tree(25)]), Tree(49)])</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment">#if t.is_leaf():</span></span><br><span class="line">      <span class="comment">#t.label=t.label**2</span></span><br><span class="line">    <span class="comment">#else:</span></span><br><span class="line">    t.label=t.label**<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">      b=label_squarer(b)</span><br><span class="line">    <span class="comment">#return t</span></span><br></pre></td></tr></table></figure><h3 id="Q5：Cumulative-Mul"><a href="#Q5：Cumulative-Mul" class="headerlink" title="Q5：Cumulative Mul"></a>Q5：Cumulative Mul</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cumulative_mul</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Mutates t so that each node&#x27;s label becomes the product of all labels in</span></span><br><span class="line"><span class="string">    the corresponding subtree rooted at t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cumulative_mul(t)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t</span></span><br><span class="line"><span class="string">    Tree(105, [Tree(15, [Tree(5)]), Tree(7)])</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">      cumulative_mul(b)</span><br><span class="line">      t.label*=b.label</span><br></pre></td></tr></table></figure><h3 id="Q6：Add-Leaves"><a href="#Q6：Add-Leaves" class="headerlink" title="Q6：Add Leaves"></a>Q6：Add Leaves</h3><p>抄的别人的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_d_leaves</span>(<span class="params">t, v</span>):</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">t,v,depth</span>):</span><br><span class="line">    <span class="keyword">if</span> t.is_leaf():</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">        t.branches.append(v)</span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">      helper(b,v,depth+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(depth):</span><br><span class="line">      t.branches.append(Tree(v))</span><br><span class="line">  helper(t,v,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="Disc-08：Linked-Lists-Trees"><a href="#Disc-08：Linked-Lists-Trees" class="headerlink" title="Disc 08：Linked Lists, Trees"></a>Disc 08：Linked Lists, Trees</h2><p>均未跑版</p><h3 id="Q3-Sum-Nums"><a href="#Q3-Sum-Nums" class="headerlink" title="Q3:Sum Nums"></a>Q3:Sum Nums</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_nums</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s.rest.empty:</span><br><span class="line">        <span class="keyword">return</span> s.first</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> s.first+sum_nums(s.rest)</span><br></pre></td></tr></table></figure><h3 id="Q4：Multiply-Links"><a href="#Q4：Multiply-Links" class="headerlink" title="Q4：Multiply Links"></a>Q4：Multiply Links</h3><p>这个是这一组中最不确定的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiply_lnks</span>(<span class="params">lst_of_lnks</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = Link(2, Link(3, Link(5)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = Link(6, Link(4, Link(2)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = Link(4, Link(1, Link(0, Link(2))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p = multiply_lnks([a, b, c])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p.first</span></span><br><span class="line"><span class="string">    48</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p.rest.first</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p.rest.rest.rest is Link.empty</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Implementation Note: you might not need all lines in this skeleton code</span></span><br><span class="line">    res = Link.empty</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> lst_of_lnks:</span><br><span class="line">        <span class="keyword">if</span> link.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">            res.rest=Link.empty</span><br><span class="line">        link=link.rest</span><br><span class="line">        res.first*=link.first</span><br><span class="line">nultiply_lnks(lst_of_lnks)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="Q5：Flip-Two"><a href="#Q5：Flip-Two" class="headerlink" title="Q5：Flip Two"></a>Q5：Flip Two</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flip_two</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> s.rest.empty:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        store=s.first</span><br><span class="line">        s.first=s.rest.first</span><br><span class="line">        s.rest.first=store</span><br><span class="line">        s.rest.rest=flip_two(s.rest.rest)</span><br><span class="line">        <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h3 id="Q6：Make-Even"><a href="#Q6：Make-Even" class="headerlink" title="Q6：Make Even"></a>Q6：Make Even</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_even</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">if</span> t.label%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        t.label+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">        b=make_even(b)</span><br></pre></td></tr></table></figure><h3 id="Q7：Leaves"><a href="#Q7：Leaves" class="headerlink" title="Q7：Leaves"></a>Q7：Leaves</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leaves</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">if</span> t.is_leaf:</span><br><span class="line">        <span class="keyword">return</span> [t.label]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res=[t.label]</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> t.branches:</span><br><span class="line">            res.append(leaves(b))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="Lab-09：Midterm-Review（Optional）"><a href="#Lab-09：Midterm-Review（Optional）" class="headerlink" title="Lab 09：Midterm Review（Optional）"></a>Lab 09：Midterm Review（Optional）</h2><h3 id="Q1：Subsequences"><a href="#Q1：Subsequences" class="headerlink" title="Q1：Subsequences"></a>Q1：Subsequences</h3><p>本题关键是怎样利用insert_into_all这个函数，还是利用递归的思想。因为insert_into_all函数的作用是往list里面插入数字，所以递归采取向subseqs(s[1:])中插入s[0]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_into_all</span>(<span class="params">item, nested_list</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a new list consisting of all the lists in nested_list,</span></span><br><span class="line"><span class="string">    but with item added to the front of each. You can assume that</span></span><br><span class="line"><span class="string">     nested_list is a list of lists.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; nl = [[], [1, 2], [3]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; insert_into_all(0, nl)</span></span><br><span class="line"><span class="string">    [[0], [0, 1, 2], [0, 3]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> nested_list:</span><br><span class="line">        <span class="built_in">list</span>.insert(<span class="number">0</span>,item)</span><br><span class="line">    <span class="keyword">return</span> nested_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subseqs</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a nested list (a list of lists) of all subsequences of S.</span></span><br><span class="line"><span class="string">    The subsequences can appear in any order. You can assume S is a list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seqs = subseqs([1, 2, 3])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(seqs)</span></span><br><span class="line"><span class="string">    [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; subseqs([])</span></span><br><span class="line"><span class="string">    [[]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s==[]:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res=insert_into_all(s[<span class="number">0</span>],subseqs(s[<span class="number">1</span>:]))</span><br><span class="line">        <span class="keyword">return</span> res+subseqs(s[<span class="number">1</span>:])</span><br></pre></td></tr></table></figure><h3 id="Q2：Non-Decreasing-Subsequences"><a href="#Q2：Non-Decreasing-Subsequences" class="headerlink" title="Q2：Non-Decreasing Subsequences"></a>Q2：Non-Decreasing Subsequences</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">non_decrease_subseqs</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming that S is a list, return a nested list of all subsequences</span></span><br><span class="line"><span class="string">    of S (a list of lists) for which the elements of the subsequence</span></span><br><span class="line"><span class="string">    are strictly nondecreasing. The subsequences can appear in any order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seqs = non_decrease_subseqs([1, 3, 2])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(seqs)</span></span><br><span class="line"><span class="string">    [[], [1], [1, 2], [1, 3], [2], [3]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; non_decrease_subseqs([])</span></span><br><span class="line"><span class="string">    [[]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seqs2 = non_decrease_subseqs([1, 1, 2])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(seqs2)</span></span><br><span class="line"><span class="string">    [[], [1], [1], [1, 1], [1, 1, 2], [1, 2], [1, 2], [2]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subseq_helper</span>(<span class="params">s, prev</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> [[]]</span><br><span class="line">        <span class="keyword">elif</span> s[<span class="number">0</span>] &lt; prev:</span><br><span class="line">            <span class="keyword">return</span> subseq_helper(s[<span class="number">1</span>:],prev)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = subseq_helper(s[<span class="number">1</span>:],s[<span class="number">0</span>])</span><br><span class="line">            b = subseq_helper(s[<span class="number">1</span>:],prev)</span><br><span class="line">            <span class="keyword">return</span> insert_into_all(s[<span class="number">0</span>], a) + b</span><br><span class="line">    <span class="keyword">return</span> subseq_helper(s, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="Q3：Number-of-Trees"><a href="#Q3：Number-of-Trees" class="headerlink" title="Q3：Number of Trees"></a>Q3：Number of Trees</h3><p>n个叶子结点的完全二叉树可能有几种？结果是卡特兰数</p><blockquote><p>设h(n)为catalan数的第n项，令h(0)&#x3D;1,h(1)&#x3D;1，catalan数满足递推式</p><p>h(n)&#x3D; h(0)*h(n-1)+h(1)*h(n-2) + … + h(n-1)*h(0) (n≥2)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">num_trees</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of unique full binary trees with exactly n leaves. E.g.,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1   2        3       3    ...</span></span><br><span class="line"><span class="string">    *   *        *       *</span></span><br><span class="line"><span class="string">       / \      / \     / \</span></span><br><span class="line"><span class="string">      *   *    *   *   *   *</span></span><br><span class="line"><span class="string">              / \         / \</span></span><br><span class="line"><span class="string">             *   *       *   *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_trees(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_trees(2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_trees(3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_trees(8)</span></span><br><span class="line"><span class="string">    429</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">            res+=num_trees(i)*num_trees(n-i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="Q4：Merge"><a href="#Q4：Merge" class="headerlink" title="Q4：Merge"></a>Q4：Merge</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">incr_a, incr_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield the elements of strictly increasing iterables incr_a and incr_b, removing</span></span><br><span class="line"><span class="string">    repeats. Assume that incr_a and incr_b have no repeats. incr_a or incr_b may or may not</span></span><br><span class="line"><span class="string">    be infinite sequences.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = merge([0, 2, 4, 6, 8, 10, 12, 14], [0, 3, 6, 9, 12, 15])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; type(m)</span></span><br><span class="line"><span class="string">    &lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(m)</span></span><br><span class="line"><span class="string">    [0, 2, 3, 4, 6, 8, 9, 10, 12, 14, 15]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def big(n):</span></span><br><span class="line"><span class="string">    ...    k = 0</span></span><br><span class="line"><span class="string">    ...    while True: yield k; k += n</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; m = merge(big(2), big(3))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [next(m) for _ in range(11)]</span></span><br><span class="line"><span class="string">    [0, 2, 3, 4, 6, 8, 9, 10, 12, 14, 15]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    iter_a, iter_b = <span class="built_in">iter</span>(incr_a), <span class="built_in">iter</span>(incr_b)</span><br><span class="line">    next_a, next_b = <span class="built_in">next</span>(iter_a, <span class="literal">None</span>), <span class="built_in">next</span>(iter_b, <span class="literal">None</span>)</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> next_a <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> next_b <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        pos_a,pos_b=next_a,next_b</span><br><span class="line">        <span class="keyword">if</span> pos_a==pos_b:</span><br><span class="line">            <span class="keyword">yield</span> next_a</span><br><span class="line">            next_a,next_b=<span class="built_in">next</span>(iter_a,<span class="literal">None</span>),<span class="built_in">next</span>(iter_b,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">elif</span> pos_a&gt;pos_b:</span><br><span class="line">            <span class="keyword">yield</span> next_b</span><br><span class="line">            next_b=<span class="built_in">next</span>(iter_b,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> next_a</span><br><span class="line">            next_a=<span class="built_in">next</span>(iter_a,<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#当有迭代器空了的时候</span></span><br><span class="line">    <span class="keyword">while</span> next_a:</span><br><span class="line">        <span class="keyword">yield</span> next_a</span><br><span class="line">        next_a=<span class="built_in">next</span>(iter_a,<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">while</span> next_b:</span><br><span class="line">        <span class="keyword">yield</span> next_b</span><br><span class="line">        next_b=<span class="built_in">next</span>(iter_b,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="Q5：Bank-Account"><a href="#Q5：Bank-Account" class="headerlink" title="Q5：Bank Account"></a>Q5：Bank Account</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">class Account:</span><br><span class="line">    &quot;&quot;&quot;A bank account that allows deposits and withdrawals.</span><br><span class="line">    It tracks the current account balance and a transaction</span><br><span class="line">    history of deposits and withdrawals.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; eric_account = Account(&#x27;Eric&#x27;)</span><br><span class="line">    &gt;&gt;&gt; eric_account.deposit(1000000)   # depositing paycheck for the week</span><br><span class="line">    1000000</span><br><span class="line">    &gt;&gt;&gt; eric_account.transactions</span><br><span class="line">    [(&#x27;deposit&#x27;, 1000000)]</span><br><span class="line">    &gt;&gt;&gt; eric_account.withdraw(100)      # make a withdrawal to buy dinner</span><br><span class="line">    999900</span><br><span class="line">    &gt;&gt;&gt; eric_account.transactions</span><br><span class="line">    [(&#x27;deposit&#x27;, 1000000), (&#x27;withdraw&#x27;, 100)]</span><br><span class="line">    &gt;&gt;&gt; print(eric_account) #call to __str__</span><br><span class="line">    Eric&#x27;s Balance: $999900</span><br><span class="line">    &gt;&gt;&gt; eric_account.deposit(10)</span><br><span class="line">    999910</span><br><span class="line">    &gt;&gt;&gt; eric_account #call to __repr__</span><br><span class="line">    Accountholder: Eric, Deposits: 2, Withdraws: 1</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    interest = 0.02</span><br><span class="line"></span><br><span class="line">    def __init__(self, account_holder):</span><br><span class="line">        self.balance = 0</span><br><span class="line">        self.holder = account_holder</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        self.deposits=0</span><br><span class="line">        self.withdraws=0</span><br><span class="line">        self.transactions=[]</span><br><span class="line"></span><br><span class="line">    def deposit(self, amount):</span><br><span class="line">        &quot;&quot;&quot;Increase the account balance by amount, add the deposit</span><br><span class="line">        to the transaction history, and return the new balance.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        self.balance+=amount</span><br><span class="line">        self.deposits+=1</span><br><span class="line">        self.transactions.append((&#x27;deposit&#x27;, amount))</span><br><span class="line">        return self.balance</span><br><span class="line"></span><br><span class="line">    def withdraw(self, amount):</span><br><span class="line">        &quot;&quot;&quot;Decrease the account balance by amount, add the withdraw</span><br><span class="line">        to the transaction history, and return the new balance.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        self.balance-=amount</span><br><span class="line">        self.withdraws+=1</span><br><span class="line">        self.transactions.append((&#x27;withdraw&#x27;, amount))</span><br><span class="line">        return self.balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        return f&#x27;&#123;self.holder&#125;\&#x27;s Balance: $&#123;self.balance&#125;&#x27; </span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">        return f&#x27;Accountholder: &#123;self.holder&#125;, Deposits: &#123;self.deposits&#125;, Withdraws: &#123;self.withdraws&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="Q6：Trade"><a href="#Q6：Trade" class="headerlink" title="Q6：Trade"></a>Q6：Trade</h3><p>注意是要交换开头的几个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">trade</span>(<span class="params">first, second</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Exchange the smallest prefixes of first and second that have equal sum.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = [1, 1, 3, 2, 1, 1, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = [4, 3, 2, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; trade(a, b) # Trades 1+1+3+2=7 for 4+3=7</span></span><br><span class="line"><span class="string">    &#x27;Deal!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    [4, 3, 1, 1, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b</span></span><br><span class="line"><span class="string">    [1, 1, 3, 2, 2, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = [3, 3, 2, 4, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; trade(b, c)</span></span><br><span class="line"><span class="string">    &#x27;No deal!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b</span></span><br><span class="line"><span class="string">    [1, 1, 3, 2, 2, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c</span></span><br><span class="line"><span class="string">    [3, 3, 2, 4, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; trade(a, c)</span></span><br><span class="line"><span class="string">    &#x27;Deal!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    [3, 3, 2, 1, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b</span></span><br><span class="line"><span class="string">    [1, 1, 3, 2, 2, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c</span></span><br><span class="line"><span class="string">    [4, 3, 1, 4, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d = [1, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; e = [2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; trade(d, e)</span></span><br><span class="line"><span class="string">    &#x27;Deal!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d</span></span><br><span class="line"><span class="string">    [2]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; e</span></span><br><span class="line"><span class="string">    [1, 1]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    m, n = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    equal_prefix = <span class="keyword">lambda</span>: <span class="built_in">sum</span>(first[:m])==<span class="built_in">sum</span>(second[:n])</span><br><span class="line">    <span class="keyword">while</span> m&lt;=<span class="built_in">len</span>(first) <span class="keyword">and</span> n&lt;=<span class="built_in">len</span>(second) <span class="keyword">and</span> <span class="built_in">sum</span>(first[:m])!=<span class="built_in">sum</span>(second[:n]):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(first[:m])&lt;<span class="built_in">sum</span>(second[:n]):</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> equal_prefix():</span><br><span class="line">        first[:m], second[:n] = second[:n], first[:m]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Deal!&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No deal!&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Q7-Shuffle"><a href="#Q7-Shuffle" class="headerlink" title="Q7:Shuffle"></a>Q7:Shuffle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">card</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the playing card numeral as a string for a positive n &lt;= 13.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(n) == <span class="built_in">int</span> <span class="keyword">and</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n &lt;= <span class="number">13</span>, <span class="string">&quot;Bad card n&quot;</span></span><br><span class="line">    specials = &#123;<span class="number">1</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;K&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> specials.get(n, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">cards</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a shuffled list that interleaves the two halves of cards.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; shuffle(range(6))</span></span><br><span class="line"><span class="string">    [0, 3, 1, 4, 2, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; suits = [&#x27;H&#x27;, &#x27;D&#x27;, &#x27;S&#x27;, &#x27;C&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cards = [card(n) + suit for n in range(1,14) for suit in suits]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cards[:12]</span></span><br><span class="line"><span class="string">    [&#x27;AH&#x27;, &#x27;AD&#x27;, &#x27;AS&#x27;, &#x27;AC&#x27;, &#x27;2H&#x27;, &#x27;2D&#x27;, &#x27;2S&#x27;, &#x27;2C&#x27;, &#x27;3H&#x27;, &#x27;3D&#x27;, &#x27;3S&#x27;, &#x27;3C&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cards[26:30]</span></span><br><span class="line"><span class="string">    [&#x27;7S&#x27;, &#x27;7C&#x27;, &#x27;8H&#x27;, &#x27;8D&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; shuffle(cards)[:12]</span></span><br><span class="line"><span class="string">    [&#x27;AH&#x27;, &#x27;7S&#x27;, &#x27;AD&#x27;, &#x27;7C&#x27;, &#x27;AS&#x27;, &#x27;8H&#x27;, &#x27;AC&#x27;, &#x27;8D&#x27;, &#x27;2H&#x27;, &#x27;8S&#x27;, &#x27;2D&#x27;, &#x27;8C&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; shuffle(shuffle(cards))[:12]</span></span><br><span class="line"><span class="string">    [&#x27;AH&#x27;, &#x27;4D&#x27;, &#x27;7S&#x27;, &#x27;10C&#x27;, &#x27;AD&#x27;, &#x27;4S&#x27;, &#x27;7C&#x27;, &#x27;JH&#x27;, &#x27;AS&#x27;, &#x27;4C&#x27;, &#x27;8H&#x27;, &#x27;JD&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cards[:12]  # Should not be changed</span></span><br><span class="line"><span class="string">    [&#x27;AH&#x27;, &#x27;AD&#x27;, &#x27;AS&#x27;, &#x27;AC&#x27;, &#x27;2H&#x27;, &#x27;2D&#x27;, &#x27;2S&#x27;, &#x27;2C&#x27;, &#x27;3H&#x27;, &#x27;3D&#x27;, &#x27;3S&#x27;, &#x27;3C&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(cards) % <span class="number">2</span> == <span class="number">0</span>, <span class="string">&#x27;len(cards) must be even&#x27;</span></span><br><span class="line">    half = <span class="built_in">len</span>(cards)//<span class="number">2</span></span><br><span class="line">    shuffled = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(half):</span><br><span class="line">        shuffled.append(cards[i])</span><br><span class="line">        shuffled.append(cards[i+half])</span><br><span class="line">    <span class="keyword">return</span> shuffled</span><br></pre></td></tr></table></figure><h3 id="Q8：Insert"><a href="#Q8：Insert" class="headerlink" title="Q8：Insert"></a>Q8：Insert</h3><p>参考了别人的写法：每次插入前拷贝当前结点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">link, value, index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Insert a value into a Link at the given index.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link = Link(1, Link(2, Link(3)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(link)</span></span><br><span class="line"><span class="string">    &lt;1 2 3&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; other_link = link</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; insert(link, 9001, 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(link)</span></span><br><span class="line"><span class="string">    &lt;9001 1 2 3&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; link is other_link # Make sure you are using mutation! Don&#x27;t create a new linked list.</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; insert(link, 100, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(link)</span></span><br><span class="line"><span class="string">    &lt;9001 1 100 2 3&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; insert(link, 4, 5)</span></span><br><span class="line"><span class="string">    Traceback (most recent call last):</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">    IndexError: Out of bounds!</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    sto=link</span><br><span class="line">    index_=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> sto <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        <span class="keyword">if</span> index_==index:</span><br><span class="line">            current_link=Link(sto.first,sto.rest)</span><br><span class="line">            sto.first=value</span><br><span class="line">            sto.rest=current_link</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index_+=<span class="number">1</span></span><br><span class="line">        sto=sto.rest</span><br><span class="line">    <span class="keyword">raise</span> IndexError(<span class="string">&#x27;Out of bounds!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Q9：Deep-Linked-List-Length"><a href="#Q9：Deep-Linked-List-Length" class="headerlink" title="Q9：Deep Linked List Length"></a>Q9：Deep Linked List Length</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">deep_len</span>(<span class="params">lnk</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Returns the deep length of a possibly deep linked list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; deep_len(Link(1, Link(2, Link(3))))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; deep_len(Link(Link(1, Link(2)), Link(3, Link(4))))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; levels = Link(Link(Link(1, Link(2)), \</span></span><br><span class="line"><span class="string">            Link(3)), Link(Link(4), Link(5)))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(levels)</span></span><br><span class="line"><span class="string">    &lt;&lt;&lt;1 2&gt; 3&gt; &lt;4&gt; 5&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; deep_len(levels)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> lnk <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(lnk,<span class="built_in">int</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> deep_len(lnk.first)+deep_len(lnk.rest)</span><br></pre></td></tr></table></figure><h3 id="Q10：Linked-Lists-as-Strings"><a href="#Q10：Linked-Lists-as-Strings" class="headerlink" title="Q10：Linked Lists as Strings"></a>Q10：Linked Lists as Strings</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_to_string</span>(<span class="params">front, mid, back, empty_repr</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Returns a function that turns linked lists to strings.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; kevins_to_string = make_to_string(&quot;[&quot;, &quot;|-]--&gt;&quot;, &quot;&quot;, &quot;[]&quot;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jerrys_to_string = make_to_string(&quot;(&quot;, &quot; . &quot;, &quot;)&quot;, &quot;()&quot;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lst = Link(1, Link(2, Link(3, Link(4))))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; kevins_to_string(lst)</span></span><br><span class="line"><span class="string">    &#x27;[1|-]--&gt;[2|-]--&gt;[3|-]--&gt;[4|-]--&gt;[]&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; kevins_to_string(Link.empty)</span></span><br><span class="line"><span class="string">    &#x27;[]&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jerrys_to_string(lst)</span></span><br><span class="line"><span class="string">    &#x27;(1 . (2 . (3 . (4 . ()))))&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; jerrys_to_string(Link.empty)</span></span><br><span class="line"><span class="string">    &#x27;()&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printer</span>(<span class="params">lnk</span>):</span><br><span class="line">        <span class="keyword">if</span> lnk <span class="keyword">is</span> Link.empty:</span><br><span class="line">            <span class="keyword">return</span> empty_repr</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> front+<span class="built_in">str</span>(lnk.first)+mid+printer(lnk.rest)+back</span><br><span class="line">    <span class="keyword">return</span> printer</span><br></pre></td></tr></table></figure><h3 id="Q11：Long-Paths"><a href="#Q11：Long-Paths" class="headerlink" title="Q11：Long Paths"></a>Q11：Long Paths</h3><p>不想写了qwq</p><p>先鸽掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Lab-10：Scheme"><a href="#Lab-10：Scheme" class="headerlink" title="Lab 10：Scheme"></a>Lab 10：Scheme</h2><h3 id="Q2：Over-or-Under"><a href="#Q2：Over-or-Under" class="headerlink" title="Q2：Over or Under"></a>Q2：Over or Under</h3><p>挺简单的，就是刚开始的时候cond的格式搞错了几次</p><p>用cond：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(define (over-or-under num1 num2) </span><br><span class="line">(cond ((&lt; num1 num2) -1)</span><br><span class="line">    ((= num1 num2) 0)</span><br><span class="line">    (else 1)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>用if：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">over-or-under</span> num1 num2) </span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> num1 num2) <span class="number">-1</span></span><br><span class="line">(<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">=</span></span> num1 num2) <span class="number">0</span> <span class="number">1</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>如果有大于2的判断条件，用if嵌套</strong></p><h3 id="Q3：Make-Adder"><a href="#Q3：Make-Adder" class="headerlink" title="Q3：Make Adder"></a>Q3：Make Adder</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-adder</span> num) </span><br><span class="line">(<span class="name"><span class="built_in">lambda</span></span> (inc)(<span class="name"><span class="built_in">+</span></span> inc num))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Q4：Compose"><a href="#Q4：Compose" class="headerlink" title="Q4：Compose"></a>Q4：Compose</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">composed</span> f g) </span><br><span class="line">(<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name">f</span> (<span class="name">g</span> x)))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Q5：Make-a-List"><a href="#Q5：Make-a-List" class="headerlink" title="Q5：Make a List"></a>Q5：Make a List</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> lst </span><br><span class="line">(<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> nil) (<span class="name"><span class="built_in">cons</span></span> <span class="number">2</span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">3</span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">4</span> nil)) (<span class="name"><span class="built_in">cons</span></span> <span class="number">5</span> nil))))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="HW-07：Scheme"><a href="#HW-07：Scheme" class="headerlink" title="HW 07：Scheme"></a>HW 07：Scheme</h2><h3 id="Q1：Thane-of-Cadr"><a href="#Q1：Thane-of-Cadr" class="headerlink" title="Q1：Thane of Cadr"></a>Q1：Thane of Cadr</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">cadr</span></span> s) </span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> s))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">caddr</span> s) </span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">cdr</span></span> s)))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Q2：Ordered"><a href="#Q2：Ordered" class="headerlink" title="Q2：Ordered"></a>Q2：Ordered</h3><p>就是base case要搞清楚</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">ordered?</span> s) </span><br><span class="line">(<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> s) True)</span><br><span class="line">    ((<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">cdr</span></span> s)) True)</span><br><span class="line">    ((<span class="name"><span class="built_in">&lt;=</span></span> (<span class="name"><span class="built_in">car</span></span> s) (<span class="name"><span class="built_in">car</span></span>(<span class="name"><span class="built_in">cdr</span></span> s))) (<span class="name">ordered?</span> (<span class="name"><span class="built_in">cdr</span></span> s)))</span><br><span class="line">    (<span class="name"><span class="built_in">else</span></span> False)</span><br><span class="line">    )            #这里用cond就不用另打个括号了</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Q3：Pow"><a href="#Q3：Pow" class="headerlink" title="Q3：Pow"></a>Q3：Pow</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> x) (<span class="name"><span class="built_in">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pow</span> base exp) </span><br><span class="line">(<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> base <span class="number">1</span>) <span class="number">1</span>)</span><br><span class="line">    ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">1</span>) base)</span><br><span class="line">    ((<span class="name"><span class="built_in">even?</span></span> exp) (<span class="name"><span class="built_in">*</span></span> (<span class="name">pow</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>)) (<span class="name">pow</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>))))</span><br><span class="line">    ((<span class="name"><span class="built_in">odd?</span></span> exp) (<span class="name"><span class="built_in">*</span></span> base (<span class="name"><span class="built_in">*</span></span> (<span class="name">pow</span> base (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) <span class="number">2</span>)) (<span class="name">pow</span> base (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>) <span class="number">2</span>)))))</span><br><span class="line">)               #把后两排的pow改为二者相乘外就过了，原来的timeout，估计是recurse太多次了</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Disc-10：Scheme-Scheme-Lists"><a href="#Disc-10：Scheme-Scheme-Lists" class="headerlink" title="Disc 10：Scheme, Scheme Lists"></a>Disc 10：Scheme, Scheme Lists</h2><h3 id="Q1：Virahanka-Fibonacci"><a href="#Q1：Virahanka-Fibonacci" class="headerlink" title="Q1：Virahanka-Fibonacci"></a>Q1：Virahanka-Fibonacci</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">vir-fib</span> n)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> n <span class="number">0</span>) <span class="number">0</span>)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>) <span class="number">1</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">vir-fib</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">2</span>)) (<span class="name">vir-fib</span> (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>))))</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name">expect</span> (<span class="name">vir-fib</span> <span class="number">10</span>) <span class="number">55</span>)</span><br><span class="line">(<span class="name">expect</span> (<span class="name">vir-fib</span> <span class="number">1</span>) <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Q2：List-Making"><a href="#Q2：List-Making" class="headerlink" title="Q2：List Making"></a>Q2：List Making</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> with-list</span><br><span class="line">    (<span class="name"><span class="built_in">list</span></span></span><br><span class="line">        (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;a</span> <span class="symbol">&#x27;b</span>) <span class="symbol">&#x27;c</span> <span class="symbol">&#x27;d</span> (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;e</span>)</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">(<span class="name">draw</span> with-list)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> with-quote</span><br><span class="line">    &#x27;(</span><br><span class="line">        (a b) c d (e)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">(<span class="name">draw</span> with-quote)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> helpful-list</span><br><span class="line">   (<span class="name"><span class="built_in">cons</span></span> <span class="symbol">&#x27;a</span> (<span class="name"><span class="built_in">cons</span></span> <span class="symbol">&#x27;b</span> nil)))</span><br><span class="line">(<span class="name">draw</span> helpful-list)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> another-helpful-list</span><br><span class="line">    (<span class="name"><span class="built_in">cons</span></span> <span class="symbol">&#x27;c</span> (<span class="name"><span class="built_in">cons</span></span> <span class="symbol">&#x27;d</span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">cons</span></span> <span class="symbol">&#x27;e</span> nil) nil))))</span><br><span class="line">(<span class="name">draw</span> another-helpful-list)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> with-cons</span><br><span class="line">    (<span class="name"><span class="built_in">cons</span></span></span><br><span class="line">        helpful-list another-helpful-list</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">(<span class="name">draw</span> with-cons)</span><br></pre></td></tr></table></figure><h3 id="Q3：List-Concatenation"><a href="#Q3：List-Concatenation" class="headerlink" title="Q3：List Concatenation"></a>Q3：List Concatenation</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">list-concat</span> a b)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> a) b)</span><br><span class="line">        ((<span class="name"><span class="built_in">null?</span></span> b) a)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> a) (<span class="name">list-concat</span> (<span class="name"><span class="built_in">cdr</span></span> a) b)))</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name">expect</span> (<span class="name">list-concat</span> &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>) &#x27;(<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>)) (<span class="name">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>))</span><br><span class="line">(<span class="name">expect</span> (<span class="name">list-concat</span> &#x27;(<span class="number">3</span>) &#x27;(<span class="number">2</span> <span class="number">1</span> <span class="number">0</span>)) (<span class="name">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="Q4：Map"><a href="#Q4：Map" class="headerlink" title="Q4：Map"></a>Q4：Map</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">map-fn</span> fn lst)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> lst) nil)</span><br><span class="line">        ((<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">cdr</span></span> lst)) (<span class="name">fn</span> (<span class="name"><span class="built_in">car</span></span> lst)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name">fn</span> (<span class="name"><span class="built_in">car</span></span> lst)) (<span class="name">map-fn</span> fn (<span class="name"><span class="built_in">cdr</span></span> lst))))</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name">map-fn</span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">*</span></span> x x)) &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line"><span class="comment">; expect (1 4 9)</span></span><br></pre></td></tr></table></figure><h3 id="Q5：Make-Tree"><a href="#Q5：Make-Tree" class="headerlink" title="Q5：Make Tree"></a>Q5：Make Tree</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-tree</span> label branches) (<span class="name"><span class="built_in">cons</span></span> label branches))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">label</span> tree)</span><br><span class="line">    (<span class="name"><span class="built_in">car</span></span> tree)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">branches</span> tree)</span><br><span class="line">    (<span class="name"><span class="built_in">cdr</span></span> tree)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name">make-tree</span> <span class="number">1</span> (<span class="name"><span class="built_in">list</span></span> (<span class="name">make-tree</span> <span class="number">2</span> &#x27;()) (<span class="name">make-tree</span> <span class="number">3</span> &#x27;())))</span><br><span class="line"><span class="comment">; expect (1 (2) (3))</span></span><br></pre></td></tr></table></figure><h3 id="Q6：Tree-Sum"><a href="#Q6：Tree-Sum" class="headerlink" title="Q6：Tree Sum"></a>Q6：Tree Sum</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">tree-sum</span> tree)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> tree) <span class="number">0</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> ((<span class="name"><span class="built_in">null?</span></span> (<span class="name">branches</span> tree)) (<span class="name">label</span> tree))</span><br><span class="line">            (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name">label</span> tree) (<span class="name">tree-sum</span> (<span class="name">branches</span> tree))))</span><br><span class="line">        )</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> lst)</span><br><span class="line">    (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> lst) <span class="number">0</span>)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">+</span></span> (<span class="name"><span class="built_in">car</span></span> lst) (<span class="name">sum</span> (<span class="name"><span class="built_in">cdr</span></span> lst))))</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> t (<span class="name">make-tree</span> <span class="number">1</span> (<span class="name"><span class="built_in">list</span></span> (<span class="name">make-tree</span> <span class="number">2</span> &#x27;()) (<span class="name">make-tree</span> <span class="number">3</span> &#x27;()))))</span><br><span class="line">(<span class="name">expect</span> (<span class="name">tree-sum</span> t) <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h2 id="HW-08：Scheme-Lists"><a href="#HW-08：Scheme-Lists" class="headerlink" title="HW 08：Scheme Lists"></a>HW 08：Scheme Lists</h2><h3 id="Q1：My-Filter"><a href="#Q1：My-Filter" class="headerlink" title="Q1：My Filter"></a>Q1：My Filter</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">my-filter</span> func lst) </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> lst) nil)                       </span><br><span class="line">    ((<span class="name">func</span> (<span class="name"><span class="built_in">car</span></span> lst)) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> lst) (<span class="name">my-filter</span> func (<span class="name"><span class="built_in">cdr</span></span> lst))))</span><br><span class="line">    (<span class="name"><span class="built_in">else</span></span> (<span class="name">my-filter</span> func (<span class="name"><span class="built_in">cdr</span></span> lst)))</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Q2：Interleave"><a href="#Q2：Interleave" class="headerlink" title="Q2：Interleave"></a>Q2：Interleave</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">interleave</span> s1 s2) </span><br><span class="line">(<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> s1) s2)</span><br><span class="line">      ((<span class="name"><span class="built_in">null?</span></span> s2) s1)</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> s1) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> s2) (<span class="name">interleave</span> (<span class="name"><span class="built_in">cdr</span></span> s1) (<span class="name"><span class="built_in">cdr</span></span> s2)))))</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Q3：Accumulate"><a href="#Q3：Accumulate" class="headerlink" title="Q3：Accumulate"></a>Q3：Accumulate</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">accumulate</span> merger start n term)</span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">=</span></span> n <span class="number">1</span>) (<span class="name">merger</span> start (<span class="name">term</span> n)))</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name">merger</span> (<span class="name">term</span> n) (<span class="name">accumulate</span> merger start (<span class="name"><span class="built_in">-</span></span> n <span class="number">1</span>) term)))</span><br><span class="line">  )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h3 id="Q4：No-Repeats"><a href="#Q4：No-Repeats" class="headerlink" title="Q4：No Repeats"></a>Q4：No Repeats</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">no-repeats</span> lst) </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> lst) nil)</span><br><span class="line">        ((<span class="name"><span class="built_in">null?</span></span> (<span class="name"><span class="built_in">cdr</span></span> lst)) lst)</span><br><span class="line">        ((<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">car</span></span> lst) (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> lst))) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> lst) (<span class="name">no-repeats</span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">cdr</span></span> lst)))))</span><br><span class="line">        ((<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> (<span class="name"><span class="built_in">car</span></span> lst) (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> lst)))) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> lst) (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> (<span class="name"><span class="built_in">cdr</span></span> lst)) (<span class="name">no-repeats</span> (<span class="name"><span class="built_in">cdr</span></span> (<span class="name"><span class="built_in">cdr</span></span> lst))))))</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line">#这个版本无法判断后面的数字是否与前面的重复</span><br></pre></td></tr></table></figure><p>参考了他人代码：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">no-repeats</span> lst) </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> ((<span class="name"><span class="built_in">null?</span></span> lst) nil)</span><br><span class="line">        (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">cons</span></span> (<span class="name"><span class="built_in">car</span></span> lst) (<span class="name">no-repeats</span> (<span class="name">filter</span> (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">not</span></span> (<span class="name"><span class="built_in">=</span></span> x (<span class="name"><span class="built_in">car</span></span> lst)))) (<span class="name"><span class="built_in">cdr</span></span> lst))))))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>感受就是scheme里面的括号太多了，一下子就把自己绕晕了&#x2F;&#x2F;&#x2F;</p><h2 id="Lab-11：Interpreters"><a href="#Lab-11：Interpreters" class="headerlink" title="Lab 11：Interpreters"></a>Lab 11：Interpreters</h2><h3 id="Problem-1-2"><a href="#Problem-1-2" class="headerlink" title="Problem 1"></a>Problem 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pop_first</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Remove the next item from self and return it. If self has</span></span><br><span class="line"><span class="string">        exhausted its source, returns None.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">        current=self.current()</span><br><span class="line">        self.index+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">        <span class="comment"># END PROBLEM 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">current</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the current element, or None if none exists.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.more_on_line():</span><br><span class="line">            self.index=<span class="number">0</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">                self.current_line=<span class="built_in">next</span>(self.source)</span><br><span class="line">                <span class="comment"># END PROBLEM 1</span></span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                self.current_line = ()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.current_line[self.index]</span><br></pre></td></tr></table></figure><h3 id="Problem-2、3"><a href="#Problem-2、3" class="headerlink" title="Problem 2、3"></a>Problem 2、3</h3><p>照着题目意思写就可以了<del>（感觉像照着答案抄一样</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scheme_read</span>(<span class="params">src</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Read the next expression from SRC, a Buffer of tokens.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;nil&#x27;])))</span></span><br><span class="line"><span class="string">    nil</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;1&#x27;])))</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;true&#x27;])))</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scheme_read(Buffer(tokenize_lines([&#x27;(+ 1 2)&#x27;])))</span></span><br><span class="line"><span class="string">    Pair(&#x27;+&#x27;, Pair(1, Pair(2, nil)))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> src.current() <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> EOFError</span><br><span class="line">    val = src.pop_first()  <span class="comment"># Get and remove the first token</span></span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;nil&#x27;</span>:</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> nil</span><br><span class="line">        <span class="comment"># END PROBLEM 2</span></span><br><span class="line">    <span class="keyword">elif</span> val == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> read_tail(src)</span><br><span class="line">        <span class="comment"># END PROBLEM 2</span></span><br><span class="line">    <span class="keyword">elif</span> val == <span class="string">&quot;&#x27;&quot;</span>:</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Pair(<span class="string">&#x27;quote&#x27;</span>, Pair(scheme_read(src), nil))</span><br><span class="line">        <span class="comment"># END PROBLEM 3</span></span><br><span class="line">    <span class="keyword">elif</span> val <span class="keyword">not</span> <span class="keyword">in</span> DELIMITERS:</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> SyntaxError(<span class="string">&#x27;unexpected token: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(val))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_tail</span>(<span class="params">src</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the remainder of a list in SRC, starting before an element or ).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; read_tail(Buffer(tokenize_lines([&#x27;)&#x27;])))</span></span><br><span class="line"><span class="string">    nil</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; read_tail(Buffer(tokenize_lines([&#x27;2 3)&#x27;])))</span></span><br><span class="line"><span class="string">    Pair(2, Pair(3, nil))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> src.current() <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> SyntaxError(<span class="string">&#x27;unexpected end of file&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> src.current() == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">            <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            src.pop_first()</span><br><span class="line">            <span class="keyword">return</span> nil</span><br><span class="line">            <span class="comment"># END PROBLEM 2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            <span class="keyword">return</span> Pair(scheme_read(src), read_tail(src))</span><br><span class="line">            <span class="comment"># END PROBLEM 2</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">raise</span> SyntaxError(<span class="string">&#x27;unexpected end of file&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Disc-11：Interpreters"><a href="#Disc-11：Interpreters" class="headerlink" title="Disc 11：Interpreters"></a>Disc 11：Interpreters</h2><h3 id="Q2：New-Procedure"><a href="#Q2：New-Procedure" class="headerlink" title="Q2：New Procedure"></a>Q2：New Procedure</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_eval</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(exp, Pair): <span class="comment"># Call expressions</span></span><br><span class="line">        <span class="keyword">return</span> calc_apply(calc_eval(exp.first), exp.rest.<span class="built_in">map</span>(calc_eval))</span><br><span class="line">    <span class="keyword">elif</span> exp <span class="keyword">in</span> OPERATORS:      <span class="comment"># Names</span></span><br><span class="line">        <span class="keyword">return</span> OPERATORS[exp]</span><br><span class="line">    <span class="keyword">else</span>:                       <span class="comment"># Numbers</span></span><br><span class="line">        <span class="keyword">return</span> exp</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floor_div</span>(<span class="params">expr</span>):</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    dividend=expr.first</span><br><span class="line">    expr=expr.rest</span><br><span class="line">    <span class="keyword">while</span> expr.rest!=nil:</span><br><span class="line">        divisor=expr.first</span><br><span class="line">        dividend//=divisor</span><br><span class="line">        expr=expr.rest</span><br><span class="line">    <span class="keyword">return</span> dividend</span><br><span class="line"><span class="comment"># Assume OPERATORS[&#x27;//&#x27;] = floor_div is added for you in the code</span></span><br></pre></td></tr></table></figure><h3 id="Q3：New-Form"><a href="#Q3：New-Form" class="headerlink" title="Q3：New Form"></a>Q3：New Form</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_eval</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(exp, Pair):</span><br><span class="line">        <span class="keyword">if</span> expr.first==<span class="string">&#x27;and&#x27;</span>: <span class="comment"># and expressions</span></span><br><span class="line">            <span class="keyword">return</span> eval_and(exp.rest)</span><br><span class="line">        <span class="keyword">else</span>:                   <span class="comment"># Call expressions</span></span><br><span class="line">            <span class="keyword">return</span> calc_apply(calc_eval(exp.first), exp.rest.<span class="built_in">map</span>(calc_eval))</span><br><span class="line">    <span class="keyword">elif</span> exp <span class="keyword">in</span> OPERATORS:      <span class="comment"># Names</span></span><br><span class="line">        <span class="keyword">return</span> OPERATORS[exp]</span><br><span class="line">    <span class="keyword">else</span>:                       <span class="comment"># Numbers</span></span><br><span class="line">        <span class="keyword">return</span> exp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_and</span>(<span class="params">operands</span>):</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    ope=operands</span><br><span class="line">    jud=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> ope!=nil:</span><br><span class="line">        jud=calc_eval(ope.first)</span><br><span class="line">        <span class="keyword">if</span> jud==<span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        ope=ope.rest</span><br><span class="line">    <span class="keyword">return</span> jud</span><br></pre></td></tr></table></figure><h3 id="Q4：Saving-Values"><a href="#Q4：Saving-Values" class="headerlink" title="Q4：Saving Values"></a>Q4：Saving Values</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bindings = &#123;&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_eval</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(exp, Pair):</span><br><span class="line">        <span class="keyword">if</span> exp.first==<span class="string">&#x27;and&#x27;</span>: <span class="comment"># and expressions[paste your answer from the earlier]</span></span><br><span class="line">            <span class="keyword">return</span> eval_and(exp.rest)</span><br><span class="line">        <span class="keyword">elif</span> exp.first==<span class="string">&#x27;define&#x27;</span>: <span class="comment"># define expressions</span></span><br><span class="line">            <span class="keyword">return</span> eval_define(exp.rest)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:                   <span class="comment"># Call expressions</span></span><br><span class="line">            <span class="keyword">return</span> calc_apply(calc_eval(exp.first), exp.rest.<span class="built_in">map</span>(calc_eval))</span><br><span class="line">    <span class="keyword">elif</span> exp <span class="keyword">in</span> bindings: <span class="comment"># Looking up variables</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> bindings[exp]</span><br><span class="line">    <span class="keyword">elif</span> exp <span class="keyword">in</span> OPERATORS:      <span class="comment"># Looking up procedures</span></span><br><span class="line">        <span class="keyword">return</span> OPERATORS[exp]</span><br><span class="line">    <span class="keyword">else</span>:                       <span class="comment"># Numbers</span></span><br><span class="line">        <span class="keyword">return</span> exp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_define</span>(<span class="params">expr</span>):</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    bindings[expr.first]=expr.rest.first</span><br><span class="line">    <span class="keyword">return</span> expr.first</span><br></pre></td></tr></table></figure><h2 id="HW-09：Regular-Expressions"><a href="#HW-09：Regular-Expressions" class="headerlink" title="HW 09：Regular Expressions"></a>HW 09：Regular Expressions</h2><p>这个homework告诉我有时候自学的效果更好…其次就是光听还是不行（因为你不能保证你听懂了…），还是要动手</p><h3 id="Q2：Roman-Numerals"><a href="#Q2：Roman-Numerals" class="headerlink" title="Q2：Roman Numerals"></a>Q2：Roman Numerals</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">roman_numerals</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Finds any string of letters that could be a Roman numeral</span></span><br><span class="line"><span class="string">    (made up of the letters I, V, X, L, C, D, M).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; roman_numerals(&quot;Sir Richard IIV, can you tell Richard VI that Richard IV is on the phone?&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;IIV&#x27;, &#x27;VI&#x27;, &#x27;IV&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; roman_numerals(&quot;My TODOs: I. Groceries II. Learn how to count in Roman IV. Profit&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;I&#x27;, &#x27;II&#x27;, &#x27;IV&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; roman_numerals(&quot;I. Act 1 II. Act 2 III. Act 3 IV. Act 4 V. Act 5&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;I&#x27;, &#x27;II&#x27;, &#x27;III&#x27;, &#x27;IV&#x27;, &#x27;V&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; roman_numerals(&quot;Let&#x27;s play Civ VII&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;VII&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; roman_numerals(&quot;i love vi so much more than emacs.&quot;)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; roman_numerals(&quot;she loves ALL editors equally.&quot;)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r&#x27;\b([IVXLCDM]+)\b&#x27;</span>, text)</span><br></pre></td></tr></table></figure><h3 id="Q3：CS-Classes"><a href="#Q3：CS-Classes" class="headerlink" title="Q3：CS Classes"></a>Q3：CS Classes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cs_classes</span>(<span class="params">post</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns strings that look like a Berkeley CS class,</span></span><br><span class="line"><span class="string">    starting with &quot;CS&quot;, followed by a number, optionally ending with A, B, or C</span></span><br><span class="line"><span class="string">    and potentially with a space between &quot;CS&quot; and the number.</span></span><br><span class="line"><span class="string">    Case insensitive.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cs_classes(&quot;Is it unreasonable to take CS61A, CS61B, CS70, and EE16A in the summer?&quot;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cs_classes(&quot;how do I become a TA for cs61a? that job sounds so fun&quot;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cs_classes(&quot;Can I take ECON101 as a CS major?&quot;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cs_classes(&quot;Should I do the lab lites or regular labs in EE16A?&quot;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; cs_classes(&quot;What are some good CS upper division courses? I was thinking about CS 161 or CS 169a&quot;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(re.search(<span class="string">&#x27;[Cc][Ss][0-9]+[ABCabc]*&#x27;</span>, post)) <span class="keyword">or</span> <span class="built_in">bool</span>(re.search(<span class="string">r&#x27;[Cc][Ss]\s[0-9]+[ABCabc]*&#x27;</span>, post))</span><br></pre></td></tr></table></figure><h3 id="Q4：Time-for-Times"><a href="#Q4：Time-for-Times" class="headerlink" title="Q4：Time for Times"></a>Q4：Time for Times</h3><p>根据别人的提示去看了题目给的提示（没办法，英语不太好</p><blockquote><p><code>(?:...)</code>, 表示我们想匹配但是不把 <code>()</code> 里的结果保存下来返回.</p><p> (? : …)?后面的那个问号表示可选择性</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match_time</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_time(&quot;At 05:24AM, I had sesame bagels with cream cheese before my coffee at 7:23.&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;05:24AM&#x27;, &#x27;7:23&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_time(&quot;At 23:59 I was sound asleep as the time turned to 00:00.&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;23:59&#x27;, &#x27;00:00&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_time(&quot;Mix water in a 1:2 ratio with chicken stock.&quot;)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_time(&quot;At 2:00 I pinged 127.0.0.1:80.&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;2:00&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r&#x27;(?:[01]?[0-9]|2[0-3]):[0-5][0-9](?:AM)?&#x27;</span>, text)</span><br></pre></td></tr></table></figure><h3 id="Q5：Most-Common-Area-Code"><a href="#Q5：Most-Common-Area-Code" class="headerlink" title="Q5：Most Common Area Code"></a>Q5：Most Common Area Code</h3><p>区号：</p><ul><li>十位电话号码的前三位</li><li>可能会用空格括起来，可能会与后面的数字有空格</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">area_codes</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Finds all phone numbers in text and captures the area code. Phone numbers</span></span><br><span class="line"><span class="string">    have 10 digits total and may have parentheses around the area code, and</span></span><br><span class="line"><span class="string">    hyphens or spaces after the third and sixth digits.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; area_codes(&#x27;(111) 111 1111, 1234567890 and 123 345 6789 should be matched.&#x27;)</span></span><br><span class="line"><span class="string">    [&#x27;111&#x27;, &#x27;123&#x27;, &#x27;123&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; area_codes(&quot;1234567890 should, but 54321 and 654 456 78901 should not match&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;123&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; area_codes(&quot;no matches for 12 3456 7890 or 09876-54321&quot;)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r&#x27;(?:\()?(\d&#123;3&#125;)(?:\))?(?:\s|-)?\d&#123;3&#125;(?:\s|-)?\d&#123;4&#125;\b&#x27;</span>, text)</span><br></pre></td></tr></table></figure><blockquote><p>\d等同于[0-9]</p><p>\d{n}表示有n个[0-9]数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下面这个求最常见的区号方法比较常规</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">most_common_code</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Takes in an input string which contains at least one phone number (and</span></span><br><span class="line"><span class="string">    may contain more) and returns the most common area code among all phone</span></span><br><span class="line"><span class="string">    numbers in the input. If there are multiple area codes with the same</span></span><br><span class="line"><span class="string">    frequency, return the first one that appears in the input text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; most_common_code(&#x27;(501) 333 3333&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;501&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; input_text = &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    ... (123) 000 1234 and 12454, 098-123-0941, 123 451 0951 and 410-501-3021 has</span></span><br><span class="line"><span class="string">    ... some phone numbers. &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; most_common_code(input_text)</span></span><br><span class="line"><span class="string">    &#x27;123&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    mylist=area_codes(text)</span><br><span class="line">    mycount=<span class="number">0</span></span><br><span class="line">    <span class="built_in">max</span>=<span class="number">0</span></span><br><span class="line">    mycode=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> code <span class="keyword">in</span> mylist:</span><br><span class="line">        mycount=mylist.count(code)</span><br><span class="line">        <span class="keyword">if</span> mycount&gt;<span class="built_in">max</span>:</span><br><span class="line">            <span class="built_in">max</span>=mycount</span><br><span class="line">            mycode=code</span><br><span class="line">    <span class="keyword">return</span> mycode</span><br></pre></td></tr></table></figure><p><strong>注意list.count的使用</strong></p><blockquote><p><code>list.count</code>(<em>x</em>)</p><p>Return the number of times <em>x</em> appears in the list.</p></blockquote><h2 id="Project-4：Scheme"><a href="#Project-4：Scheme" class="headerlink" title="Project 4：Scheme"></a>Project 4：Scheme</h2><h3 id="Problem-1-3"><a href="#Problem-1-3" class="headerlink" title="Problem 1"></a>Problem 1</h3><p>把题目说的三种情况都写出来就可以了，注意第二种情况是调用lookup函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">define</span>(<span class="params">self, symbol, value</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Define Scheme SYMBOL to have VALUE.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.bindings[symbol]=value</span><br><span class="line">        <span class="comment"># END PROBLEM 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lookup</span>(<span class="params">self, symbol</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the value bound to SYMBOL. Errors if SYMBOL is not found.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> symbol <span class="keyword">in</span> self.bindings:</span><br><span class="line">            <span class="keyword">return</span> self.bindings[symbol]</span><br><span class="line">        <span class="comment"># END PROBLEM 1</span></span><br><span class="line">        <span class="keyword">elif</span> self.parent!=<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self.parent.lookup(symbol)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> SchemeError(<span class="string">&#x27;unknown identifier: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(symbol))</span><br></pre></td></tr></table></figure><h3 id="Problem-2-2"><a href="#Problem-2-2" class="headerlink" title="Problem 2"></a>Problem 2</h3><p>可以记住把link化成list的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(procedure, BuiltinProcedure):</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment">#第一步：把args转化为list</span></span><br><span class="line">        args_list=[]</span><br><span class="line">        <span class="keyword">while</span> args:</span><br><span class="line">            args_list.append(args.first)</span><br><span class="line">            args=args.rest</span><br><span class="line">        <span class="keyword">if</span> procedure.expect_env:</span><br><span class="line">            args_list.append(env)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> procedure.py_func(*args_list)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="keyword">raise</span> SchemeError(<span class="string">&#x27;incorrect number of arguments&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一遍过的感觉真爽</p><h3 id="Problem-3-2"><a href="#Problem-3-2" class="headerlink" title="Problem 3"></a>Problem 3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># All non-atomic expressions are lists (combinations)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> scheme_listp(expr):</span><br><span class="line">        <span class="keyword">raise</span> SchemeError(<span class="string">&#x27;malformed list: &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(repl_str(expr)))</span><br><span class="line">    first, rest = expr.first, expr.rest</span><br><span class="line">    <span class="keyword">if</span> scheme_symbolp(first) <span class="keyword">and</span> first <span class="keyword">in</span> scheme_forms.SPECIAL_FORMS:</span><br><span class="line">        <span class="keyword">return</span> scheme_forms.SPECIAL_FORMS[first](rest, env)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        operator=scheme_eval(first,env)</span><br><span class="line">        operands=rest.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:scheme_eval(x,env))</span><br><span class="line">        <span class="keyword">return</span> scheme_apply(operator,operands,env)</span><br><span class="line">        <span class="comment"># END PROBLEM 3</span></span><br></pre></td></tr></table></figure><h3 id="Problem-4-2"><a href="#Problem-4-2" class="headerlink" title="Problem 4"></a>Problem 4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> scheme_symbolp(signature):</span><br><span class="line">        <span class="comment"># assigning a name to a value e.g. (define x (+ 1 2))</span></span><br><span class="line">        validate_form(expressions, <span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># Checks that expressions is a list of length exactly 2</span></span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 4</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        env.define(signature,scheme_eval(expressions.rest.first,env))</span><br><span class="line">        <span class="keyword">return</span> signature</span><br><span class="line">        <span class="comment"># END PROBLEM 4</span></span><br></pre></td></tr></table></figure><h3 id="Problem-5-2"><a href="#Problem-5-2" class="headerlink" title="Problem 5"></a>Problem 5</h3><p>注意expressions的结构：</p><blockquote><p>Pair(A, nil)</p><p>A is the quoted expression</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_quote_form</span>(<span class="params">expressions, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate a quote form.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; env = create_global_frame()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_quote_form(read_line(&quot;((+ x 2))&quot;), env) # evaluating (quote (+ x 2))</span></span><br><span class="line"><span class="string">    Pair(&#x27;+&#x27;, Pair(&#x27;x&#x27;, Pair(2, nil)))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    validate_form(expressions, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> expressions.first</span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br></pre></td></tr></table></figure><h3 id="Problem-6-2"><a href="#Problem-6-2" class="headerlink" title="Problem 6"></a>Problem 6</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eval_all</span>(<span class="params">expressions, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate each expression in the Scheme list EXPRESSIONS in</span></span><br><span class="line"><span class="string">    Frame ENV (the current environment) and return the value of the last.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; eval_all(read_line(&quot;(1)&quot;), create_global_frame())</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; eval_all(read_line(&quot;(1 2)&quot;), create_global_frame())</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = eval_all(read_line(&quot;((print 1) 2)&quot;), create_global_frame())</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; eval_all(read_line(&quot;((define x 2) x)&quot;), create_global_frame())</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="keyword">if</span> expressions==nil:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    res=nil</span><br><span class="line">    <span class="keyword">while</span> expressions!=nil:</span><br><span class="line">        res=scheme_eval(expressions.first,env)</span><br><span class="line">        expressions=expressions.rest</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br></pre></td></tr></table></figure><h3 id="Problem-7-2"><a href="#Problem-7-2" class="headerlink" title="Problem 7"></a>Problem 7</h3><p>unlocked questions:</p><blockquote><p>lambda_line &#x3D; read_line(“(lambda (a b c) (+ a b c))”)</p><p>lambda_proc &#x3D; do_lambda_form(lambda_line.rest, env)</p><p>lambda_proc.formals:</p><p>—Pair(‘a’, Pair(‘b’, Pair(‘c’, nil)))</p><p>lambda_proc.body:</p><p>—Pair(Pair(‘+’, Pair(‘a’, Pair(‘b’, Pair(‘c’, nil)))), nil)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_lambda_form</span>(<span class="params">expressions, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate a lambda form.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; env = create_global_frame()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_lambda_form(read_line(&quot;((x) (+ x 2))&quot;), env) # evaluating (lambda (x) (+ x 2))</span></span><br><span class="line"><span class="string">    LambdaProcedure(Pair(&#x27;x&#x27;, nil), Pair(Pair(&#x27;+&#x27;, Pair(&#x27;x&#x27;, Pair(2, nil))), nil), &lt;Global Frame&gt;)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    validate_form(expressions, <span class="number">2</span>)</span><br><span class="line">    formals = expressions.first</span><br><span class="line">    validate_formals(formals)</span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 7</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> LambdaProcedure(formals,expressions.rest,env)</span><br><span class="line">    <span class="comment"># END PROBLEM 7</span></span><br></pre></td></tr></table></figure><p>搞清楚formals&#x3D;expressions.first，body&#x3D;expressions.rest</p><h3 id="Problem-8-2"><a href="#Problem-8-2" class="headerlink" title="Problem 8"></a>Problem 8</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_child_frame</span>(<span class="params">self, formals, vals</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return a new local frame whose parent is SELF, in which the symbols</span></span><br><span class="line"><span class="string">        in a Scheme list of formal parameters FORMALS are bound to the Scheme</span></span><br><span class="line"><span class="string">        values in the Scheme list VALS. Both FORMALS and VALS are represented as Pairs.</span></span><br><span class="line"><span class="string">        Raise an error if too many or too few</span></span><br><span class="line"><span class="string">        vals are given.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; env = create_global_frame()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; formals, expressions = read_line(&#x27;(a b c)&#x27;), read_line(&#x27;(1 2 3)&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; env.make_child_frame(formals, expressions)</span></span><br><span class="line"><span class="string">        &lt;&#123;a: 1, b: 2, c: 3&#125; -&gt; &lt;Global Frame&gt;&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(formals) != <span class="built_in">len</span>(vals):</span><br><span class="line">            <span class="keyword">raise</span> SchemeError(<span class="string">&#x27;Incorrect number of arguments to function call&#x27;</span>)</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        child_frame=Frame(self)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(formals)):</span><br><span class="line">            child_frame.define(formals.first,vals.first)</span><br><span class="line">            formals=formals.rest</span><br><span class="line">            vals=vals.rest</span><br><span class="line">        <span class="keyword">return</span> child_frame</span><br><span class="line">        <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure><h3 id="Problem-9-2"><a href="#Problem-9-2" class="headerlink" title="Problem 9"></a>Problem 9</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">isinstance</span>(procedure, LambdaProcedure):</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 9</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        expr=procedure.env.make_child_frame(procedure.formals,args)</span><br><span class="line">        <span class="keyword">return</span> eval_all(procedure.body,expr)</span><br></pre></td></tr></table></figure><h3 id="Problem-10-2"><a href="#Problem-10-2" class="headerlink" title="Problem 10"></a>Problem 10</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">isinstance</span>(signature, Pair) <span class="keyword">and</span> scheme_symbolp(signature.first):</span><br><span class="line">        <span class="comment"># defining a named procedure e.g. (define (f x y) (+ x y))</span></span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 10</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        formals=signature.rest</span><br><span class="line">        validate_formals(formals)</span><br><span class="line">        env.define(signature.first,LambdaProcedure(formals,expressions.rest,env))</span><br><span class="line">        <span class="keyword">return</span> signature.first</span><br><span class="line">        <span class="comment"># END PROBLEM 10</span></span><br></pre></td></tr></table></figure><h3 id="Problem-11-1"><a href="#Problem-11-1" class="headerlink" title="Problem 11"></a>Problem 11</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> <span class="built_in">isinstance</span>(procedure, MuProcedure):</span><br><span class="line">        <span class="comment"># BEGIN PROBLEM 11</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        child=env.make_child_frame(procedure.formals,args)</span><br><span class="line">        <span class="keyword">return</span> eval_all(procedure.body,child)</span><br><span class="line">        <span class="comment"># END PROBLEM 11</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_mu_form</span>(<span class="params">expressions, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate a mu form.&quot;&quot;&quot;</span></span><br><span class="line">    validate_form(expressions, <span class="number">2</span>)</span><br><span class="line">    formals = expressions.first</span><br><span class="line">    validate_formals(formals)</span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 11</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> MuProcedure(formals,expressions.rest)</span><br><span class="line">    <span class="comment"># END PROBLEM 11</span></span><br></pre></td></tr></table></figure><h3 id="Problem-12"><a href="#Problem-12" class="headerlink" title="Problem 12"></a>Problem 12</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_and_form</span>(<span class="params">expressions, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate a (short-circuited) and form.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; env = create_global_frame()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_and_form(read_line(&quot;(#f (print 1))&quot;), env) # evaluating (and #f (print 1))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # evaluating (and (print 1) (print 2) (print 4) 3 #f)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_and_form(read_line(&quot;((print 1) (print 2) (print 3) (print 4) 3 #f)&quot;), env)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 12</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> expressions==nil:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> expressions.rest==nil:</span><br><span class="line">        <span class="keyword">return</span> scheme_eval(expressions.first,env)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        first_expr=scheme_eval(expressions.first,env)</span><br><span class="line">        <span class="keyword">if</span> is_scheme_true(first_expr):</span><br><span class="line">            <span class="keyword">return</span> do_and_form(expressions.rest,env)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># END PROBLEM 12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_or_form</span>(<span class="params">expressions, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate a (short-circuited) or form.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; env = create_global_frame()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_or_form(read_line(&quot;(10 (print 1))&quot;), env) # evaluating (or 10 (print 1))</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_or_form(read_line(&quot;(#f 2 3 #t #f)&quot;), env) # evaluating (or #f 2 3 #t #f)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # evaluating (or (begin (print 1) #f) (begin (print 2) #f) 6 (begin (print 3) 7))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_or_form(read_line(&quot;((begin (print 1) #f) (begin (print 2) #f) 6 (begin (print 3) 7))&quot;), env)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 12</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> expressions==nil:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> expressions.rest==nil:</span><br><span class="line">        <span class="keyword">return</span> scheme_eval(expressions.first,env)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fir=scheme_eval(expressions.first,env)</span><br><span class="line">        <span class="keyword">if</span> is_scheme_false(fir):</span><br><span class="line">            <span class="keyword">return</span> do_or_form(expressions.rest,env)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> fir</span><br><span class="line">    <span class="comment"># END PROBLEM 12</span></span><br></pre></td></tr></table></figure><h3 id="Problem-13"><a href="#Problem-13" class="headerlink" title="Problem 13"></a>Problem 13</h3><p>这个比较简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do_cond_form</span>(<span class="params">expressions, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Evaluate a cond form.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_cond_form(read_line(&quot;((#f (print 2)) (#t 3))&quot;), create_global_frame())</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> expressions <span class="keyword">is</span> <span class="keyword">not</span> nil:</span><br><span class="line">        clause = expressions.first</span><br><span class="line">        validate_form(clause, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> clause.first == <span class="string">&#x27;else&#x27;</span>:</span><br><span class="line">            test = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> expressions.rest != nil:</span><br><span class="line">                <span class="keyword">raise</span> SchemeError(<span class="string">&#x27;else must be last&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            test = scheme_eval(clause.first, env)</span><br><span class="line">        <span class="keyword">if</span> is_scheme_true(test):</span><br><span class="line">            <span class="comment"># BEGIN PROBLEM 13</span></span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            <span class="keyword">if</span> clause.rest==nil:</span><br><span class="line">                <span class="keyword">return</span> test</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> eval_all(clause.rest,env)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># END PROBLEM 13</span></span><br><span class="line">            expressions = expressions.rest</span><br></pre></td></tr></table></figure><h3 id="Problem-14"><a href="#Problem-14" class="headerlink" title="Problem 14"></a>Problem 14</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_let_frame</span>(<span class="params">bindings, env</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Create a child frame of Frame ENV that contains the definitions given in</span></span><br><span class="line"><span class="string">    BINDINGS. The Scheme list BINDINGS must have the form of a proper bindings</span></span><br><span class="line"><span class="string">    list in a let expression: each item must be a list containing a symbol</span></span><br><span class="line"><span class="string">    and a Scheme expression.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> scheme_listp(bindings):</span><br><span class="line">        <span class="keyword">raise</span> SchemeError(<span class="string">&#x27;bad bindings list in let form&#x27;</span>)</span><br><span class="line">    names = values = nil</span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 14</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> bindings!=nil:</span><br><span class="line">        validate_form(bindings.first,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">        names=Pair(bindings.first.first,names)</span><br><span class="line">        values=Pair(scheme_eval(bindings.first.rest.first,env),values)</span><br><span class="line">        bindings=bindings.rest</span><br><span class="line">    validate_formals(names)</span><br><span class="line">    <span class="comment"># END PROBLEM 14</span></span><br><span class="line">    <span class="keyword">return</span> env.make_child_frame(names, values)</span><br></pre></td></tr></table></figure><h3 id="Problem-15"><a href="#Problem-15" class="headerlink" title="Problem 15"></a>Problem 15</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(define (<span class="built_in">enumerate</span> s)</span><br><span class="line">  ; BEGIN PROBLEM <span class="number">15</span></span><br><span class="line">  (define (helper index s)</span><br><span class="line">    (<span class="keyword">if</span> (null? s) nil</span><br><span class="line">        (cons (<span class="built_in">list</span> index (car s)) (helper (+ <span class="number">1</span> index) (cdr s)))</span><br><span class="line">    )</span><br><span class="line">    )</span><br><span class="line">    (helper <span class="number">0</span> s)</span><br><span class="line">  )</span><br><span class="line">  ; END PROBLEM <span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="Problem-16"><a href="#Problem-16" class="headerlink" title="Problem 16"></a>Problem 16</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(define (merge inorder? list1 list2)</span><br><span class="line">  ; BEGIN PROBLEM <span class="number">16</span></span><br><span class="line">  (cond ((null? list1) list2)</span><br><span class="line">        ((null? list2) list1)</span><br><span class="line">        ((inorder? (car list1) (car list2)) (cons (car list1) (merge inorder? (cdr list1) list2)))</span><br><span class="line">        (<span class="keyword">else</span> (cons (car list2) (merge inorder? list1 (cdr list2))))</span><br><span class="line">  )</span><br><span class="line">  )</span><br><span class="line">  ; END PROBLEM <span class="number">16</span></span><br></pre></td></tr></table></figure><p>终于把scheme这个project写完了</p><p>（虽然有好几题都是参考别人的思路与代码，因为不太能理解题目的英文以及不熟悉题目给的函数ww</p><h2 id="Lab-12：Regular-Expressions-BNF"><a href="#Lab-12：Regular-Expressions-BNF" class="headerlink" title="Lab 12：Regular Expressions, BNF"></a>Lab 12：Regular Expressions, BNF</h2><h3 id="Q1：Calculator-Ops"><a href="#Q1：Calculator-Ops" class="headerlink" title="Q1：Calculator Ops"></a>Q1：Calculator Ops</h3><p>就是要找出类似“(* 2 4)”这样的格式</p><p>注意多位数是由[0-9]+打出来的，不要漏了+号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculator_ops</span>(<span class="params">calc_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Finds expressions from the Calculator language that have two</span></span><br><span class="line"><span class="string">    numeric operands and returns the expression without the parentheses.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; calculator_ops(&quot;(* 2 4)&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;* 2 4&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; calculator_ops(&quot;(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))&quot;)</span></span><br><span class="line"><span class="string">    [&#x27;* 2 4&#x27;, &#x27;+ 3 5&#x27;, &#x27;- 10 7&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; calculator_ops(&quot;(* 2)&quot;)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">r&#x27;[+*-/]\s[0-9]+\s[0-9]+&#x27;</span>, calc_str)</span><br></pre></td></tr></table></figure><h3 id="Q3：Linked-List-BNF"><a href="#Q3：Linked-List-BNF" class="headerlink" title="Q3：Linked List BNF"></a>Q3：Linked List BNF</h3><p>就是要写一个能匹配链表的grammer</p><p>注：NUMBER指数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">link: &quot;Link(&quot;link_first&quot;)&quot;|&quot;Link(&quot;link_first&quot;,&quot;link_rest&quot;)&quot;</span><br><span class="line">    </span><br><span class="line">    ?link_first: NUMBER | link</span><br><span class="line">    </span><br><span class="line">    ?link_rest: NUMBER | link</span><br><span class="line">    </span><br><span class="line">    %ignore /\s+/</span><br><span class="line">    %import common.NUMBER</span><br></pre></td></tr></table></figure><h3 id="Q4：Tree-BNF"><a href="#Q4：Tree-BNF" class="headerlink" title="Q4：Tree BNF"></a>Q4：Tree BNF</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tree_node: &quot;Tree(&quot;label&quot;)&quot;|&quot;Tree(&quot;label&quot;,&quot;branches&quot;)&quot;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ?label: NUMBER</span><br><span class="line">    </span><br><span class="line">    branches: &quot;[&quot;tree_node&quot;]&quot;|&quot;[&quot;tree_node&quot;,&quot;tree_node+&quot;]&quot;</span><br><span class="line">    </span><br><span class="line">    %ignore /\s+/</span><br><span class="line">    %import common.NUMBER</span><br></pre></td></tr></table></figure><h2 id="Disc-12：Regular-Expressions-BNF-SQL"><a href="#Disc-12：Regular-Expressions-BNF-SQL" class="headerlink" title="Disc 12：Regular Expressions, BNF, SQL"></a>Disc 12：Regular Expressions, BNF, SQL</h2><h3 id="Q2：SELECTs-in-BNF"><a href="#Q2：SELECTs-in-BNF" class="headerlink" title="Q2：SELECTs in BNF"></a>Q2：SELECTs in BNF</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Q3-5"><a href="#Q3-5" class="headerlink" title="Q3~5"></a>Q3~5</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> records <span class="keyword">WHERE</span> supervisor<span class="operator">=</span>&quot;Oliver Warbucks&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> records <span class="keyword">WHERE</span> supervisor<span class="operator">=</span>name</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> records <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">50000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> name <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h3 id="Q6：Email-Domain-Validator"><a href="#Q6：Email-Domain-Validator" class="headerlink" title="Q6：Email Domain Validator"></a>Q6：Email Domain Validator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">email_validator</span>(<span class="params">email, domains</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; email_validator(&quot;oski@berkeley.edu&quot;, [&quot;berkeley.edu&quot;, &quot;gmail.com&quot;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; email_validator(&quot;oski@gmail.com&quot;, [&quot;berkeley.edu&quot;, &quot;gmail.com&quot;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; email_validator(&quot;oski@berkeley.com&quot;, [&quot;berkeley.edu&quot;, &quot;gmail.com&quot;])</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; email_validator(&quot;oski@berkeley.edu&quot;, [&quot;yahoo.com&quot;])</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; email_validator(&quot;xX123_iii_OSKI_iii_123Xx@berkeley.edu&quot;, [&quot;berkeley.edu&quot;, &quot;gmail.com&quot;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; email_validator(&quot;oski@oski@berkeley.edu&quot;, [&quot;berkeley.edu&quot;, &quot;gmail.com&quot;])</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; email_validator(&quot;oski@berkeleysedu&quot;, [&quot;berkeley.edu&quot;, &quot;gmail.com&quot;])</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pattern = <span class="string">r&quot;^\w+@(&quot;</span></span><br><span class="line">    <span class="keyword">for</span> domain <span class="keyword">in</span> domains:</span><br><span class="line">        <span class="keyword">if</span> domain ==domains[-<span class="number">1</span>]:</span><br><span class="line">            pattern+=domain[:-<span class="number">4</span>]+<span class="string">r&quot;\.&quot;</span>+domain[-<span class="number">3</span>:]+<span class="string">r&quot;)$&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pattern+=domain[:-<span class="number">4</span>]+<span class="string">r&quot;\.&quot;</span>+domain[-<span class="number">3</span>:]+<span class="string">&quot;|&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(re.search(pattern, email))</span><br></pre></td></tr></table></figure><h2 id="HW-10：BNF-SQL"><a href="#HW-10：BNF-SQL" class="headerlink" title="HW 10：BNF, SQL"></a>HW 10：BNF, SQL</h2><p>决定了，从这里开始暂时都鸽掉…</p><h3 id="Q4：Size-of-Dogs"><a href="#Q4：Size-of-Dogs" class="headerlink" title="Q4：Size of Dogs"></a>Q4：Size of Dogs</h3><p>将两个table联系起来可以用dot</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> size_of_dogs <span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">SELECT</span> d.name, s.size <span class="keyword">from</span> dogs <span class="keyword">as</span> d, sizes <span class="keyword">as</span> s <span class="keyword">where</span> d.height<span class="operator">&lt;=</span>s.max <span class="keyword">and</span> d.height<span class="operator">&gt;</span>s.min;</span><br></pre></td></tr></table></figure><h3 id="Q5：By-Parent-Height"><a href="#Q5：By-Parent-Height" class="headerlink" title="Q5：By Parent Height"></a>Q5：By Parent Height</h3><h2 id="Lab-13：SQL"><a href="#Lab-13：SQL" class="headerlink" title="Lab 13：SQL"></a>Lab 13：SQL</h2><h2 id="Lab-14：Final-Review"><a href="#Lab-14：Final-Review" class="headerlink" title="Lab 14：Final Review"></a>Lab 14：Final Review</h2><h2 id="Disc-14：Final-Review"><a href="#Disc-14：Final-Review" class="headerlink" title="Disc 14：Final Review"></a>Disc 14：Final Review</h2>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs, python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>种星星的人</title>
      <link href="/2022/07/01/stars/"/>
      <url>/2022/07/01/stars/</url>
      
        <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>与二三好友于2022年7月1日夜共同观影《人生大事》，中有一友为二刷。</p><p>有感而作此文。</p><h2 id="Some-feelings"><a href="#Some-feelings" class="headerlink" title="Some feelings"></a>Some feelings</h2><p>死生莫大焉，这是古人的话。</p><p>尽管有些情节比较拉跨，但瑕不掩瑜。</p><p>只是我惊讶于自己刚开始的冷漠，惊讶于小文不知道“死”这个概念的纯真。不过想到小文刚上幼儿园，倒也说的过去。</p><p>在我七八岁的时候，我的爷爷奶奶就相继去世了。对爷爷的葬礼我最大的印象就是一个密闭的大黑盒子，一群让晚辈跪着哭的泼水的人，以及身边人或真或假的哭声。</p><p>我曾经以为爱与家庭能抚慰这种悲伤，甚至在平凡琐碎的日子里连生存都要拼尽全力，哪有时间悲伤。</p><p>但我代入了一下，如果那一天真的到来了，我还是会悲伤的不能自已的。</p><p>这是没办法的事，人类就是这么渺小，无法阻止黑白无常，无法避免生死。</p><p>电影让我第一次走进这个职业，并赋予了它一个好听的名字：种星星的人。</p><p>“逝去的人会变成天上的星星”早就成为了哄小孩子的话，我更相信死去元知万事空。但孩子不一样，孩子就像白纸一般，甚至傻的有点可爱。</p><p>电影里外婆给小文发的语音都成了小文对外婆的怀念。在现在这个社会，人与人的交流才是最难的吧，比如我更倾向于打字而不是语音，还是要与亲人多交流，说不定哪天他们就化为天上的星星了。</p><p>在不太敞亮的小巷小店里，也有人在用自己的方式生活。</p><p>我不由思考，就算我到时候混的不好，也应该不会差到哪里去吧。</p><p>人生的出路那么多，尽管实现不了理想会很遗憾。</p><p>电影最后以放烟花的方式来发配三哥爸爸的骨灰，真的浪漫极了。之前我想到的最浪漫的方式是把骨灰洒向大海，大海潮起潮路，就像亲人在和你说话。</p><p>烟花绽放，变成了无数的星星。尽管短暂，但足够夺目，足够让人念念不忘。</p><p><img src="/2022/07/01/stars/cover8.jpg"></p><p>等到了我死的那一天，我会不会喜欢这种方式呢？</p><p>也许我和我的孩子都足够保守，采用最寻常的入土为安。也许会任由那一丝的叛逆主导，留一小撮骨灰当作烟花的原料。在大江大河的边上绽放，烟花变成星星掉落进江河里，守护着后来的人。</p><p>以后的事，谁说的准呢，生前哪管身后事，领悟到此刻的感动，这就够了。</p>]]></content>
      
      
      <categories>
          
          <category> 观影杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs61a：从入门到入土</title>
      <link href="/2022/06/30/cs61a/"/>
      <url>/2022/06/30/cs61a/</url>
      
        <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>一直想学，无奈，由于平时的作业很多，学业压力比较重，学了几节课就没有学了。</p><p>决定前面的就简单温习一下吧。不复习又不行，<del>基本全忘记了，只记得自己学过</del>。</p><p>炎热的夏天不想出门，适合在房间<del>开着空调吃着西瓜玩着手机</del>学习python。</p><p>希望这个暑假能肝完。</p><p>版本：CS 61A Fall 2021</p><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="使用ok的方法"><a href="#使用ok的方法" class="headerlink" title="使用ok的方法"></a>使用ok的方法</h3><p>这是这门课的亮点之一，利用简单的命令行的知识来检测你写出来的程序是否正确，并且每一个case都会告诉你是什么应该输出什么而你输出了什么，从而判断正确与否。</p><p>（在此点名华大的oj，什么都不给，只告诉你AC或WA等等，改都不知道怎么改）</p><p>之前没学过git，估计用git更简单。</p><blockquote><p>win+R，输入cmd</p><p>然后在命令行界面输入powshell</p><p>在powershell里用cd ~&#x2F;Desktop&#x2F;cs61a&#x2F;…来进入相应的位置</p><p>然后粘贴题目提供的含ok语句即可</p></blockquote><p><strong>vscode可以和power shell交互，故可省去第一步</strong></p><p><strong>可以直接用git bash here进入相应的位置，然后粘贴ok语句即可</strong></p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><h4 id="expressions"><a href="#expressions" class="headerlink" title="expressions"></a>expressions</h4><p>即表达式，具体讲解了表达式嵌套时应遵循一定的顺序</p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><ul><li><p><strong>from math import</strong> pi</p></li><li><p>可自行定义一个function的名称，例如：</p></li><li><pre><code class="python">def square(x)    return mul(x,x)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```python</span><br><span class="line">  def area()</span><br><span class="line">  return pi*radius*radius</span><br></pre></td></tr></table></figure></code></pre></li><li><p>可通过更改radius的值来改变area的值</p></li></ul><h4 id="environment-diagrams"><a href="#environment-diagrams" class="headerlink" title="environment diagrams"></a>environment diagrams</h4><p>to visualize the interpreter’s process</p><p>（个人认为就是把程序的进行过程列出来方便理解</p><h4 id="defining-functions"><a href="#defining-functions" class="headerlink" title="defining functions"></a>defining functions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;name&gt;(&lt;formal parameters&gt;):</span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;</span><br></pre></td></tr></table></figure><p>def这一行的后面一定不要忘了有冒号！</p><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h3><h4 id="Print-and-None"><a href="#Print-and-None" class="headerlink" title="Print and None"></a>Print and None</h4><p>我理解的是，print输出了一个数，但是返回None（即什么都不返回）</p><p>而return返回了这个数</p><h4 id="Multiple-Environments"><a href="#Multiple-Environments" class="headerlink" title="Multiple Environments"></a>Multiple Environments</h4><p>指的是def的函数嵌套，应该从里向外展开</p><h4 id="Some-features"><a href="#Some-features" class="headerlink" title="Some features"></a>Some features</h4><p>除法 “&#x2F;“</p><blockquote><p>2013&#x2F;10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv,floordiv</span><br><span class="line">&gt;&gt;&gt;truediv(<span class="number">2013</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">201.3</span></span><br></pre></td></tr></table></figure><p>2013&#x2F;&#x2F;10（舍去后面的数，非四舍五入）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv,floordiv</span><br><span class="line">&gt;&gt;&gt;floordiv(<span class="number">2013</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure></blockquote><p>A%B&#x3D;mod(A,B)</p><p>定义函数的时候可以给形参赋值，调用时可以不把已被赋值的参数写出来</p><h4 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h4><p>类似于C++中的if语句，仅语法有所差别</p><p>关心的是Boolean语句的对或错，而不关注表达式本身</p><h4 id="Iteration（迭代）"><a href="#Iteration（迭代）" class="headerlink" title="Iteration（迭代）"></a>Iteration（迭代）</h4><p>讲的是while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition):</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><h3 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h3><h4 id="when-designing-functions"><a href="#when-designing-functions" class="headerlink" title="when designing functions"></a>when designing functions</h4><ul><li>give each function exactly one job</li><li>do not repeat yourself (DRY). implement a process just once,but execute it many times.</li><li>define functions generally</li></ul><h4 id="可以用assert来检查输入的数据是否符合标准"><a href="#可以用assert来检查输入的数据是否符合标准" class="headerlink" title="可以用assert来检查输入的数据是否符合标准"></a>可以用assert来检查输入的数据是否符合标准</h4><p>格式：assert  （A），（B）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> r&gt;<span class="number">0</span>,<span class="string">&#x27;A length must be positive.&#x27;</span></span><br></pre></td></tr></table></figure><p>即A语句为一个bool语句。如果判断为false，则程序报错并输出B语句</p><h4 id="不要忘了pow函数！pow-k-3-即为求k的三次方"><a href="#不要忘了pow函数！pow-k-3-即为求k的三次方" class="headerlink" title="不要忘了pow函数！pow(k,3)即为求k的三次方"></a>不要忘了pow函数！pow(k,3)即为求k的三次方</h4><h4 id="higher-order-functions"><a href="#higher-order-functions" class="headerlink" title="higher-order functions"></a>higher-order functions</h4><p>A <strong>higher order function</strong> (HOF) is a function that manipulates other functions by taking in functions as arguments, returning a function, or both.</p><p>类似C++中函数之间的相互调用</p><ul><li>Express general methods of computation</li><li>Remove repetition from programs</li><li>Separate concerns among functions</li></ul><h4 id="lambda-expressions"><a href="#lambda-expressions" class="headerlink" title="lambda expressions"></a>lambda expressions</h4><p>与def类似，但是lambda expressions不能包含statements</p><p>lambda的是变量</p><p>使用格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square=<span class="keyword">lambda</span> x:x*x</span><br><span class="line">&gt;&gt;&gt;square(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>与def的区别：</p><p><img src="/2022/06/30/cs61a/cs61a_assert1.png"></p><p>即def给了函数一个具体的名称，而lambda没有给，除非自己给它命名一个</p><h4 id="conditional-expressions"><a href="#conditional-expressions" class="headerlink" title="conditional expressions"></a>conditional expressions</h4><p>form：<consequent>if<predicate>else<alternative></alternative></predicate></consequent></p><p>evaluation rule:</p><ul><li>Evaluate the <predicate> expression.</predicate></li><li>If it’s a true value, the value of the whole expression is the value of the <consequent></consequent></li><li>Otherwise, the value of the whole expression is the value of the <alternative></alternative></li></ul><h3 id="Environments-for-Higher-Order-Functions"><a href="#Environments-for-Higher-Order-Functions" class="headerlink" title="Environments for Higher-Order Functions"></a>Environments for Higher-Order Functions</h3><h4 id="nested-functions（嵌套）"><a href="#nested-functions（嵌套）" class="headerlink" title="nested functions（嵌套）"></a>nested functions（嵌套）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">return</span> k+n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure><h4 id="How-to-draw-an-environment-dragram"><a href="#How-to-draw-an-environment-dragram" class="headerlink" title="How to draw an environment dragram"></a>How to draw an environment dragram</h4><p><img src="/2022/06/30/cs61a/cs61a_assert2.png"></p><h4 id="function-currying"><a href="#function-currying" class="headerlink" title="function currying"></a>function currying</h4><p>即higher-order function</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">curry2</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">y</span>):</span><br><span class="line">            <span class="keyword">return</span> f(x,y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;curry2=<span class="keyword">lambda</span> f:<span class="keyword">lambda</span> x:<span class="keyword">lambda</span> y:f(x,y)</span><br><span class="line">&gt;&gt;&gt;m=curry2(add)</span><br><span class="line">&gt;&gt;&gt;m(<span class="number">2</span>)(<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>currying：Transforming a multi-argument function into a single-argument,higher-order function</p><h3 id="Disc-01-Control-Environment-Diagrams"><a href="#Disc-01-Control-Environment-Diagrams" class="headerlink" title="Disc 01: Control,Environment Diagrams"></a>Disc 01: Control,Environment Diagrams</h3><p>罗列几个与C++不同的注意点</p><ul><li>Boolean Operators中不要像C++一样使用&amp;&amp;和||，而是要使用and，or，not</li><li>不要使用i++，用i&#x3D;i+1或i+&#x3D;1</li><li>python打印是自动换行的</li></ul><h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><h4 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h4><ul><li>不注重正确性而注重可读性。应该包含变量的meaning or purpose</li><li>长的name通常易读，如：average_age&#x3D;average(age, students)</li><li>短的name通常是大家常用的符号。如：n, k, i for integers; x, y, z for real numbers and f, g, h for functions</li></ul><h2 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h2><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>Definition：the body of the function calls itself，either directly or indirectly</p><p>Anatomy：</p><ul><li>Base case：Evaluated without a recursive call（the smallest subproblem）</li><li>Recursive case：Evaluated with a recursive call（breaking down the problem further）</li><li>Conditional atatement：to decide of it’s a base case</li></ul><h3 id="Recursion-and-Iteration"><a href="#Recursion-and-Iteration" class="headerlink" title="Recursion and Iteration"></a>Recursion and Iteration</h3><p>Recursion：updates via assignment become…</p><p>​如digit_sum&#x3D;digit_sum+last</p><p>Iteration：…arguments to a recursive call</p><p>​如return sum_digits_rec(n,digit_sum+last)</p><h3 id="Tree-Recursion"><a href="#Tree-Recursion" class="headerlink" title="Tree Recursion"></a>Tree Recursion</h3><p>Tree-shaped processes arise whenever executing the body of a recursive function makes more than one call to that function</p><h2 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h2><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;digits=[<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure><p>The number of elements：len(digits)</p><p>An element selected by its index：digits[3]  or  getitem(digits,3)</p><p>Concatenation and repetition：[2,7]+digits*2  or  add([2,7],mul(digits,2))   &#x3D;[2,7,1,8,2,8,1,8,2,8]</p><p>Nested lists：pairs&#x3D;[[10,20],[30,40]]</p><p>​                        pairs[1]&#x3D;[30,40]           pairs[1][0]&#x3D;30</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">1</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">5</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;1&#x27;</span>==<span class="number">1</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="For-Statements"><a href="#For-Statements" class="headerlink" title="For Statements"></a>For Statements</h4><p><strong>for循环与lists很搭</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;expression&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pairs=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">4</span>]]</span><br><span class="line">same_count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> pairs:</span><br><span class="line">    <span class="keyword">if</span> x==y:</span><br><span class="line">        same_count+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Ranges"><a href="#Ranges" class="headerlink" title="Ranges"></a>Ranges</h4><p>A range is a sequence of <strong>consecutive integers.</strong></p><p>如range(-2,2)表示-2，-1，0，1；range(4)&#x3D;range(0,4)表示0，1，2，3</p><p>Length：ending value - starting value</p><p>Element selection：starting value + index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">[-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cheer</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="List-Comprehentions"><a href="#List-Comprehentions" class="headerlink" title="List Comprehentions"></a>List Comprehentions</h4><p>构建list的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;odds=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;[x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> odds]</span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt;[x <span class="keyword">for</span> x <span class="keyword">in</span> odds <span class="keyword">if</span> <span class="number">25</span>%x==<span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">lambda</span> n:[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n) <span class="keyword">if</span> n%x==<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>“” or ‘’均可</p><p>“””…”””注释</p><p>Length and element selection are similar to all sequences.</p><p>However, the “in” and “not in” operators match substrings.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;city=<span class="string">&#x27;Berkeley&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">len</span>(city)</span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;city[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;k&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;here&#x27;</span> <span class="keyword">in</span> <span class="string">&quot;where&#x27;s Waldo?&quot;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="Sequences"><a href="#Sequences" class="headerlink" title="Sequences"></a>Sequences</h3><h4 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;odds=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;[odds[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>)]</span><br><span class="line">[<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;odds[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;odds[:<span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;odds[<span class="number">1</span>:]</span><br><span class="line">[<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line">&gt;&gt;&gt;odds[:]</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>Slicing creates new values.</p><p>String is like a list and the functions can use slicing. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse(s[:<span class="number">1</span>])+s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="Processing-Container-Values"><a href="#Processing-Container-Values" class="headerlink" title="Processing Container Values"></a>Processing Container Values</h4><ul><li><strong>sum</strong>(iterable[, start])–&gt;value</li></ul><p>（not strings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>[[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>max</strong>(iterable[, key&#x3D;func])–&gt;value</p><p><strong>max</strong>(a, b, c, …[, key&#x3D;func])–&gt;value</p></li><li><p><strong>all</strong>(iterable)–&gt;bool</p></li></ul><p>Return True if bool(x) is True for all values x in the iterable.</p><p>If the iterable is empty, return True.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">bool</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span> <span class="comment">#除此之外均为True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">bool</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;[x&lt;<span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">all</span>([x&lt;<span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">all</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">Flase</span><br></pre></td></tr></table></figure><h3 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h3><p>类似C++中的类</p><h4 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h4><p>Dictionaries are collections of key-value pairs.</p><p>Dictionary keys do have two restrictions:</p><ul><li>A key of a dictionary cannot be a list or a dictionary.</li><li>Two keys cannot be equal; There can be at most one value for a given key.</li></ul><p>如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;numerals= &#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">&gt;&gt;&gt;numerals&#123;<span class="string">&#x27;X&#x27;</span>&#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(numerals)</span><br><span class="line">[<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;numerals.values()</span><br><span class="line">dict_values([<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>])</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(numerals.values())</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(numerals.values())</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=&#123;<span class="number">1</span>:[<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;second&#x27;</span>],<span class="number">3</span>:<span class="string">&#x27;third&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">len</span>(d)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;d[<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;second&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;d[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;third&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Dictionary-Comprehensions"><a href="#Dictionary-Comprehensions" class="headerlink" title="Dictionary Comprehensions"></a>Dictionary Comprehensions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&lt;key exp&gt;:&lt;value exp&gt; <span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;<span class="built_in">iter</span> exp&gt; <span class="keyword">if</span> &lt;<span class="built_in">filter</span> exp&gt;&#125;</span><br><span class="line">&#123;&lt;key exp&#125;:&lt;value exp&gt; <span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;<span class="built_in">iter</span> exp&gt;</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;x*x:x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="keyword">if</span> x&gt;<span class="number">2</span>&#125; == &#123;<span class="number">9</span>:<span class="number">3</span>,<span class="number">16</span>:<span class="number">4</span>,<span class="number">25</span>:<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h2><h3 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h3><h4 id="The-Tree-Abstraction"><a href="#The-Tree-Abstraction" class="headerlink" title="The Tree Abstraction"></a>The Tree Abstraction</h4><p>A <strong>tree</strong> has a root <strong>label</strong> and a list of <strong>branches</strong>.</p><p>Each branch is a tree.</p><ul><li><strong>root</strong>: the node at the top of the tree</li><li><strong>label</strong>: the value in a node</li><li><strong>branches</strong>: a list of trees directly under the tree’s root</li><li><strong>leaf</strong>: a tree with zero branches</li><li><strong>node</strong>: any location within the tree (e.g., root node, leaf nodes, etc.)</li><li><strong>Depth</strong>: the distance of a node and the root</li><li><strong>Height</strong>: The depth of the lowest (furthest from the root) leaf.</li></ul><p><img src="/2022/06/30/cs61a/assert1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label,branches=[]</span>):</span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branches)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">branches</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_tree</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree)!=<span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree)&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;tree(<span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;is_leaf(tree(<span class="number">1</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;t=tree(<span class="number">1</span>,[tree(<span class="number">5</span>,[tree(<span class="number">7</span>)]),tree(<span class="number">6</span>)])</span><br><span class="line">&gt;&gt;&gt;t</span><br><span class="line">[<span class="number">1</span>,[<span class="number">5</span>,[<span class="number">7</span>]],[<span class="number">6</span>]]</span><br><span class="line">&gt;&gt;&gt;label(t)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;branches(t)</span><br><span class="line">[[<span class="number">5</span>,[<span class="number">7</span>]],[<span class="number">6</span>]]</span><br></pre></td></tr></table></figure><blockquote><p>补充：the difference from tree class and tree abstraction</p><table><thead><tr><th align="left">-</th><th align="left">Tree constructor and selector functions</th><th align="left">Tree class</th></tr></thead><tbody><tr><td align="left">Constructing a tree</td><td align="left">To construct a tree given a <code>label</code> and a list of <code>branches</code>, we call <code>tree(label, branches)</code></td><td align="left">To construct a tree object given a <code>label</code> and a list of <code>branches</code>, we call <code>Tree(label, branches)</code> (which calls the <code>Tree.__init__</code> method).</td></tr><tr><td align="left">Label and branches</td><td align="left">To get the label or branches of a tree <code>t</code>, we call <code>label(t)</code> or <code>branches(t)</code> respectively</td><td align="left">To get the label or branches of a tree <code>t</code>, we access the instance attributes <code>t.label</code> or <code>t.branches</code> respectively.</td></tr><tr><td align="left">Mutability</td><td align="left">The functional tree data abstraction is immutable because we cannot assign values to call expressions</td><td align="left">The <code>label</code> and <code>branches</code> attributes of a <code>Tree</code> instance can be reassigned, mutating the tree.</td></tr><tr><td align="left">Checking if a tree is a leaf</td><td align="left">To check whether a tree <code>t</code> is a leaf, we call the convenience function <code>is_leaf(t)</code></td><td align="left">To check whether a tree <code>t</code> is a leaf, we call the bound method <code>t.is_leaf()</code>. This method can only be called on <code>Tree</code> objects.</td></tr></tbody></table></blockquote><h4 id="Tree-Progressing"><a href="#Tree-Progressing" class="headerlink" title="Tree Progressing"></a>Tree Progressing</h4><p>Creating Trees：A function that creats a tree from another tree is typically alse recursive.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">increment_leaves</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bs=[increment_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),bs)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">increment</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> tree(label(t)+<span class="number">1</span>,[increment(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><h4 id="Example-Printing-Trees"><a href="#Example-Printing-Trees" class="headerlink" title="Example-Printing Trees"></a>Example-Printing Trees</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="built_in">print</span>(label(t))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b)</span><br></pre></td></tr></table></figure><p>优化后能显示树的结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_tree</span>(<span class="params">t,indent=<span class="number">0</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*indent+<span class="built_in">str</span>(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b,indent+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="Example-Summing-Paths"><a href="#Example-Summing-Paths" class="headerlink" title="Example-Summing Paths"></a>Example-Summing Paths</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_sums</span>(<span class="params">t,so_far</span>):</span><br><span class="line">    so_far=so_far+label(t)</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="built_in">print</span>(so_far)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            print_sums(b,so_far)</span><br></pre></td></tr></table></figure><h4 id="Example-Counting-Paths"><a href="#Example-Counting-Paths" class="headerlink" title="Example-Counting Paths"></a>Example-Counting Paths</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_paths</span>(<span class="params">t,total</span>):</span><br><span class="line">    <span class="keyword">if</span> label(t)==total:</span><br><span class="line">        found=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        found=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> found+<span class="built_in">sum</span>([count_paths(b,total-label(t)) <span class="keyword">for</span> b <span class="keyword">in</span> branches])</span><br></pre></td></tr></table></figure><h3 id="Mutability"><a href="#Mutability" class="headerlink" title="Mutability"></a>Mutability</h3><h4 id="Mutation-Operations"><a href="#Mutation-Operations" class="headerlink" title="Mutation Operations"></a>Mutation Operations</h4><p>对list的操作：</p><p>移出元素：.pop()和.remove(…)。前者弹出最后一个元素，后者可移出任意一个元素</p><p>增加元素：.append(…)和.extend(…)</p><p>替换元素：采取切片赋值的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;suits=[<span class="string">&#x27;coin&#x27;</span>,<span class="string">&#x27;string&#x27;</span>,<span class="string">&#x27;myriad&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;original_suits=suits</span><br><span class="line">&gt;&gt;&gt;suits.pop()</span><br><span class="line"><span class="string">&#x27;myriad&#x27;</span></span><br><span class="line">&gt;&gt;&gt;suits.remove(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;suits.append(<span class="string">&#x27;cup&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;suits.extend([<span class="string">&#x27;sword&#x27;</span>,<span class="string">&#x27;club&#x27;</span>])</span><br><span class="line">&gt;&gt;&gt;suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>,<span class="string">&#x27;cup&#x27;</span>,<span class="string">&#x27;sword&#x27;</span>,<span class="string">&#x27;club&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;suits[<span class="number">2</span>]=<span class="string">&#x27;spade&#x27;</span></span><br><span class="line">&gt;&gt;&gt;suits[<span class="number">0</span>:<span class="number">2</span>]=[<span class="string">&#x27;heart&#x27;</span>,<span class="string">&#x27;diamond&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;suits</span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>,<span class="string">&#x27;diamond&#x27;</span>,<span class="string">&#x27;spade&#x27;</span>,<span class="string">&#x27;club&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;original_suits</span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>,<span class="string">&#x27;diamond&#x27;</span>,<span class="string">&#x27;spade&#x27;</span>,<span class="string">&#x27;club&#x27;</span>]   <span class="comment">#interesting!</span></span><br></pre></td></tr></table></figure><p><strong>Some Objects Can CHange</strong></p><p>The same object can change in value throughout the course of computation.</p><p>All names that refer to the same object are affected by a mutation.</p><p><strong>Only objects of mutable types can change: lists &amp; dictionaries.</strong></p><h4 id="Tuples（元组）"><a href="#Tuples（元组）" class="headerlink" title="Tuples（元组）"></a>Tuples（元组）</h4><p><strong>immutable sequences</strong>, meanings of these cannot be changed.</p><p>使用()，其余与list基本类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">&gt;&gt;&gt;(<span class="number">1</span>,<span class="number">2</span>)+(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;()</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">tuple</span>()</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">tuple</span>([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>,</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>A dictionary cannot use a list as its index but can use a tuple. However, a tuple used as a index cannot include a list. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&#123;(<span class="number">1</span>,<span class="number">2</span>):<span class="number">3</span>&#125;</span><br><span class="line">&#123;(<span class="number">1</span>,<span class="number">2</span>):<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;&#123;[<span class="number">1</span>,<span class="number">2</span>]:<span class="number">3</span>&#125;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line">&gt;&gt;&gt;&#123;(<span class="number">1</span>,[<span class="number">2</span>]):<span class="number">3</span>&#125;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure><p>An immutable sequence may still change if it contains a mutable value as an element. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s=([<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;s[<span class="number">0</span>]=<span class="number">4</span></span><br><span class="line">ERROR</span><br><span class="line">&gt;&gt;&gt;s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">([<span class="number">4</span>,<span class="number">2</span>],<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><h5 id="Sameness-and-Change"><a href="#Sameness-and-Change" class="headerlink" title="Sameness and Change"></a>Sameness and Change</h5><ul><li>A compound data object has an “identity” in addition to the pieces of which it is composed</li><li>A list is still “the same” list even if we change its contents</li><li>Conversely, we could have two lists that happen to have the same contents, but are different</li></ul><h5 id="Identity-Operators"><a href="#Identity-Operators" class="headerlink" title="Identity Operators"></a>Identity Operators</h5><ul><li>Identity：<exp0> is <exp1>用<ul><li>evaluates to True if both <exp0> and <exp1> evaluate to the same object</exp1></exp0></li></ul></exp1></exp0></li><li>Equality：<exp0>&#x3D;&#x3D;<exp1><ul><li>evaluates to True if both <exp0> and <exp1> evaluate to equal values</exp1></exp0></li></ul></exp1></exp0></li></ul><p>Identical objects are always equal values.</p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><h4 id="Data-Abstraction-for-Syntax"><a href="#Data-Abstraction-for-Syntax" class="headerlink" title="Data Abstraction for Syntax"></a>Data Abstraction for Syntax</h4><p>用树的观念来分析英语语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phrase</span>(<span class="params">tag, branches</span>):</span><br><span class="line">    <span class="keyword">return</span> tree(tag, branches)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">word</span>(<span class="params">tag, text</span>):</span><br><span class="line">    <span class="keyword">return</span> tree([tag, text])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the tag of a phrase or word.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="keyword">return</span> label(word)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h4><p>Some files are plain text and can be read into Python as either.</p><ul><li>open(…) . read()：One string containing the whole contents of the file</li><li>open(…) . readlines()：A list of strings, each containing one line</li></ul><p>Useful string methods for processing the contents of a file.</p><ul><li><p>.strip()：returns a string without whitespace (spaces, tabs, etc.) on the ends</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;hello &#x27;</span>.strip()</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>.split()：returns a list of strings that were separated by whitespace</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;hi there&#x27;</span>.split()</span><br><span class="line">[<span class="string">&#x27;hi&#x27;</span>,<span class="string">&#x27;there&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>.replace(a,b)：returns a string with all instances of string <strong>a</strong> replaces by string <strong>b</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;2+2&#x27;</span>.replace(<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27; + &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2 + 2&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>From lines to tokens：</p><p>use open(…).readlines()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;(ROOT (S (NP (NN this)) (VP (COP is) (NP (DT a) (NN book))) (. ?)))\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span>,..</span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;ROOT&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NP&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NN&#x27;</span>, <span class="string">&#x27;this&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;VP&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;COP&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NP&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;DT&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NN&#x27;</span>, <span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>],</span><br><span class="line">...]</span><br></pre></td></tr></table></figure><p>read_sentences takes care of this：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lines = <span class="built_in">open</span>(<span class="string">&#x27;suppes.parsed&#x27;</span>).readlines()</span><br><span class="line">tokens = read_sentences(lines)</span><br></pre></td></tr></table></figure><h4 id="Generating-Language"><a href="#Generating-Language" class="headerlink" title="Generating Language"></a>Generating Language</h4><p>language models：A statistical（or probabilistic） language model describes how likely some text would be.</p><p><strong>Sampling</strong> from a statistical language model uses what description to generate language.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">详见https://code.cs61a.org/</span><br><span class="line"><span class="comment">#Syntax</span></span><br><span class="line">treebank_examples = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(ROOT (SBARQ (WHNP (WP what))</span></span><br><span class="line"><span class="string">     (SQ (VP (AUX is)) (NP (DT the) (NN rabbit)) (VP (VBG doing)))</span></span><br><span class="line"><span class="string">     (. ?)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(ROOT (SQ (AUX is) (NP (PRP he)) (VP (VBG hopping)) (. ?)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phrase</span>(<span class="params">tag,branches</span>):</span><br><span class="line">    <span class="keyword">return</span> tree(tag,branches)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">word</span>(<span class="params">tag,text</span>):</span><br><span class="line">    <span class="keyword">return</span> tree([tag,text])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the tag of a phrase or word.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)[<span class="number">0</span>]    <span class="comment">#树叶包含tag和text</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="keyword">return</span> label(word)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_sentences</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">     <span class="string">&quot;&quot;&quot;Yield parsed sentences as lists of tokens for a list of lines.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for s in read_sentences(treebank_examples):</span></span><br><span class="line"><span class="string">    ...     print(&#x27; &#x27;.join(s[:20]), &#x27;...&#x27;)</span></span><br><span class="line"><span class="string">    ( ROOT ( SBARQ ( WHNP ( WP what ) ) ( SQ ( VP ( AUX is ) ) ...</span></span><br><span class="line"><span class="string">    ( ROOT ( SQ ( AUX is ) ( NP ( PRP he ) ) ( VP ( VBG hopping ...</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sentences=[]</span><br><span class="line">    tokens=[]</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        <span class="keyword">if</span> line.strip():</span><br><span class="line">            tokens.extend(line.replace(<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27; ( &#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27; ) &#x27;</span>)).split()</span><br><span class="line">            <span class="keyword">if</span> tokens.count(<span class="string">&#x27;(&#x27;</span>)==tokens.count(<span class="string">&#x27;)&#x27;</span>):</span><br><span class="line">                sentences.append(tokens)</span><br><span class="line">                tokens=[]</span><br><span class="line">    <span class="keyword">return</span> sentences</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_sentences</span>():</span><br><span class="line">    <span class="keyword">return</span> read_sentences(<span class="built_in">open</span>(<span class="string">&#x27;suppes.parsed&#x27;</span>).readlines())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tokens_to_parse_tree</span>(<span class="params">tokens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree for a list of tokens representing a parsed sentence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tokens_to_parse_tree(read_sentences(treebank_examples)[0]))</span></span><br><span class="line"><span class="string">    ROOT</span></span><br><span class="line"><span class="string">      SBARQ</span></span><br><span class="line"><span class="string">        WHNP</span></span><br><span class="line"><span class="string">          [&#x27;WP&#x27;, &#x27;what&#x27;]</span></span><br><span class="line"><span class="string">        SQ</span></span><br><span class="line"><span class="string">          VP</span></span><br><span class="line"><span class="string">            [&#x27;AUX&#x27;, &#x27;is&#x27;]</span></span><br><span class="line"><span class="string">          NP</span></span><br><span class="line"><span class="string">            [&#x27;DT&#x27;, &#x27;the&#x27;]</span></span><br><span class="line"><span class="string">            [&#x27;NN&#x27;, &#x27;rabbit&#x27;]</span></span><br><span class="line"><span class="string">          VP</span></span><br><span class="line"><span class="string">            [&#x27;VBG&#x27;, &#x27;doing&#x27;]</span></span><br><span class="line"><span class="string">        [&#x27;.&#x27;, &#x27;?&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> tokens[<span class="number">0</span>] == <span class="string">&#x27;(&#x27;</span>, tokens</span><br><span class="line">    t, end = read_parse_tree(tokens, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> t <span class="keyword">and</span> tag(t)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_parse_tree</span>(<span class="params">tokens, i</span>):   <span class="comment">#这个好难懂</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree for the next constitutent of a token iterator and the end index.&quot;&quot;&quot;</span></span><br><span class="line">    tag = tokens[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> tokens[i] != <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        <span class="keyword">assert</span> tokens[i+<span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> word(tag, tokens[i]), i + <span class="number">2</span></span><br><span class="line">    branches = []</span><br><span class="line">    <span class="keyword">while</span> tokens[i] != <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        <span class="keyword">assert</span> tokens[i] == <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        branch, i = read_parse_tree(tokens, i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> is_valid_tree(branch):</span><br><span class="line">            branches.append(branch)</span><br><span class="line">    <span class="keyword">if</span> branches:</span><br><span class="line">        <span class="keyword">return</span> phrase(tag, branches), i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h2><h3 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h3><h4 id="Iterators-1"><a href="#Iterators-1" class="headerlink" title="Iterators"></a>Iterators</h4><p>A container can provide an iterator that provides access to its elements in some order.</p><ul><li>iter(iterable)：Return an iterator over the elements of an iterable value</li><li>next(iterator)：Return the next element in an iterator</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s=[[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;t=<span class="built_in">iter</span>(s)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(t)</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><blockquote><p>There are also some built-in functions that take in iterables and return useful results:</p><ul><li><code>map(f, iterable)</code> - Creates an iterator over <code>f(x)</code> for <code>x</code> in <code>iterable</code>. In some cases, computing a list of the values in this iterable will give us the same result as [<code>func(x)</code> for <code>x</code> in <code>iterable</code>]. However, it’s important to keep in mind that iterators can potentially have infinite values because they are evaluated lazily, while lists cannot have infinite elements.</li><li><code>filter(f, iterable)</code> - Creates an iterator over <code>x</code> for each <code>x</code> in <code>iterable</code> if <code>f(x)</code></li><li><code>zip(iterables*)</code> - Creates an iterator over co-indexed tuples with elements from each of the <code>iterables</code></li><li><code>reversed(iterable)</code> - Creates an iterator over all the elements in the input iterable in reverse order</li><li><code>list(iterable)</code> - Creates a list containing all the elements in the input <code>iterable</code></li><li><code>tuple(iterable)</code> - Creates a tuple containing all the elements in the input <code>iterable</code></li><li><code>sorted(iterable)</code> - Creates a sorted list containing all the elements in the input <code>iterable</code></li><li><code>reduce(f, iterable)</code> - Must be imported with <code>functools</code>. Apply function of two arguments <code>f</code> cumulatively to the items of <code>iterable</code>, from left to right, so as to reduce the sequence to a single value.</li></ul></blockquote><h4 id="Dictionary-Iteration"><a href="#Dictionary-Iteration" class="headerlink" title="Dictionary Iteration"></a>Dictionary Iteration</h4><p>An iterable value is any value that can be passed to <strong>iter</strong> to produce an iterator.</p><p>An iterator is returned from iter and can be passed to <strong>next</strong>; all iterators are mutable.</p><p>A dictionary, its keys, its values, and its items are all iterable values.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=&#123;<span class="string">&#x27;one&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;d[<span class="string">&#x27;zero&#x27;</span>]=<span class="number">0</span>    <span class="comment">#往d中新增加了元素</span></span><br><span class="line">&gt;&gt;&gt;k=<span class="built_in">iter</span>(d.keys())   <span class="comment">#or k=iter(d)</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;two&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;three&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;zero&#x27;</span></span><br><span class="line">&gt;&gt;&gt;v=<span class="built_in">iter</span>(d.values())</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;i=<span class="built_in">iter</span>(d.items())</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;one&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;two&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;three&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;zero&#x27;</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>ATTENTION</strong>：dictionary cannot change size during iteration. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=&#123;<span class="string">&#x27;one&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;two&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">&gt;&gt;&gt;k=<span class="built_in">iter</span>(d)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line">&gt;&gt;&gt;d[<span class="string">&#x27;zero&#x27;</span>]=<span class="number">0</span></span><br><span class="line">RuntimeError:dictionary changed size during iteration</span><br></pre></td></tr></table></figure><h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><ul><li><p>The built-in <strong>zip</strong> function returns an iterator over co-indexed tuples.</p></li><li><p>If one iterable is longer than the other, <strong>zip</strong> only iterates over matches and skips extras</p></li><li><p>More than two iterables can be passed to <strong>zip</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line">[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line">[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>]))</span><br><span class="line">[(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>),(<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>)]</span><br></pre></td></tr></table></figure><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><h4 id="Generator-Function"><a href="#Generator-Function" class="headerlink" title="Generator Function"></a>Generator Function</h4><ul><li>A generator function is a function that <strong>yield</strong>s values instead of <strong>return</strong>ing them.</li><li>A normal function <strong>return</strong>s once; a <strong>generator function</strong> can <strong>yield</strong> multiple times</li><li>A <strong>generator</strong> is an iterator created automatically by calling a <strong>generator function</strong></li><li>When a <strong>generator function</strong> is called, it returns a <strong>generator</strong> that iterates over its yields</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">def</span> <span class="title function_">plus_minus</span>(<span class="params">x</span>):</span><br><span class="line">    tield x</span><br><span class="line">    <span class="keyword">yield</span> -x</span><br><span class="line">&gt;&gt;&gt;t=plus_minus(<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> coutdown(k-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">yield</span> x</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">from</span> coutdown(k-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>A <strong>yield from</strong> statement can be used to yield the values from an iterable one at a time.</p><h4 id="A-Return-Statement-Within-a-Generator-Function"><a href="#A-Return-Statement-Within-a-Generator-Function" class="headerlink" title="A Return Statement Within a Generator Function"></a>A Return Statement Within a Generator Function</h4><p>Upon executing a return statement, a generator function exits and cannot yield more values.</p><p>What’s more, providing a value to be returned is allowed, but this value is not yielded.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">yield</span> x</span><br><span class="line">    <span class="keyword">yield</span> x+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">yield</span> x+<span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(f(<span class="number">2</span>))</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">yield</span> x</span><br><span class="line">    <span class="keyword">yield</span> x+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">2</span></span><br><span class="line"><span class="keyword">yield</span> x+<span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(g(<span class="number">2</span>))</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>It’s possible to access the returned value:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">x</span>):</span><br><span class="line">    y=<span class="keyword">yield</span> <span class="keyword">from</span> g(x)</span><br><span class="line">    <span class="keyword">yield</span> y</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(h(<span class="number">2</span>))</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>开始面向对象了…</p><h4 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h4><p><img src="/cs61a/assert2.jpg"></p><ul><li><strong>class</strong>: a template for creating objects</li><li><strong>instance</strong>: a single object created from a class</li><li><strong>instance variable</strong>: a data attribute of an object, specific to an instance</li><li><strong>class variable</strong>: a data attribute of an object, shared by all instances of a class</li><li><strong>method</strong>: a bound function that may be called on all instances of a class</li></ul><h4 id="Class-Statements"><a href="#Class-Statements" class="headerlink" title="Class Statements"></a>Class Statements</h4><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>&lt;name&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>Every call to a class creates a new instance(对象). There’re many instances but only one class.</p><p>Binding an object to a new name using assignment does not create a new object. It just gives a new name to the object. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c=a</span><br><span class="line">&gt;&gt;&gt;c <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><p>Methods are defined in the suite of a class statement.  </p><p>The def statements create function objects as always, but their names are bound as attributes of the class.</p><p>All invoked methods have access to the object via the <strong>self</strong> parameter, and so they can all access and manipulate the object’s state. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self,amount</span>):            <span class="comment">#Defined with two arguments</span></span><br><span class="line">        self.balance=self.balance+amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line">&gt;&gt;&gt;tom_account=Account(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;tom_account.deposit(<span class="number">100</span>)              <span class="comment">#Invoked with one argument</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="Class-Methods"><a href="#Class-Methods" class="headerlink" title="Class Methods(*)"></a>Class Methods(*)</h4><p>Now we’ll try out another feature of Python classes: class methods. A method can be turned into a class method by adding the <a href="https://docs.python.org/3/library/functions.html#classmethod">classmethod</a> decorator. Then, instead of receiving the instance as the first argument (<code>self</code>), the method will receive the class itself (<code>cls</code>).</p><p>Class methods are commonly used to create “factory methods”: methods whose job is to construct and return a new instance of the class.</p><p>For example, we can add a <code>robo_factory</code> class method to our <code>Dog</code> class that makes robo-dogs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Pet):</span><br><span class="line">    # With the previously defined methods not written out</span><br><span class="line">    @classmethod</span><br><span class="line">    def robo_factory(cls, owner):</span><br><span class="line">        return cls(&quot;RoboDog&quot;, owner)</span><br></pre></td></tr></table></figure><p>Then a call to <code>Dog.robo_factory(&#39;Sally&#39;)</code> would return a new <code>Dog</code> instance with the name “RoboDog” and owner “Sally”.</p><h4 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h4><p>Attributes are all public.</p><p><img src="/2022/06/30/cs61a/assert3.jpg"></p><p><strong>Accessing Attributes</strong>:</p><ul><li><strong>getattr(object,’…’)</strong>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">getattr</span>(tom_account,<span class="string">&#x27;balance&#x27;</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>getattr and dot expressions look up a name in the same way.</p><ul><li><strong>hasattr(object,’…’)</strong>: 用来判断对象是否包含对应的属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">hasattr</span>(tom_account,<span class="string">&#x27;deposit&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>Class attributes are “shared” across all instances of a class because they are attributes of the class, not the instance. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    interest=<span class="number">0.02</span>  <span class="comment">#A class attribute</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self,account_holder</span>):</span><br><span class="line">        self.balance=<span class="number">0</span></span><br><span class="line">        self.holder=account_holder</span><br><span class="line">    <span class="comment">#Additional methods would be difined here</span></span><br><span class="line">&gt;&gt;&gt;tom_account=Account(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;jim_account=Account(<span class="string">&#x27;Jim&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;tom_account.interest</span><br><span class="line"><span class="number">0.02</span></span><br><span class="line">&gt;&gt;&gt;jim_account.interest</span><br><span class="line"><span class="number">0.02</span></span><br></pre></td></tr></table></figure><ul><li>Instance Attribute Assignment: tom_account.interest&#x3D;0.08<ul><li>adds or modifies the attribute named “interest” of tom_account（仅改变这个对象中这个属性的值</li></ul></li><li>Class Attribute Assignment: Account.interest&#x3D;0.04<ul><li>改变整个class中这个属性的值</li></ul></li></ul><h2 id="Week-8"><a href="#Week-8" class="headerlink" title="Week 8"></a>Week 8</h2><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Inheritance is a method for relating classes together.</p><p>A common use：Two similar classes differ in their degree of specialization.</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;name&gt;(&lt;base <span class="keyword">class</span>&gt;):   <span class="comment">#单继承</span></span><br><span class="line">    &lt;suite&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> &lt;name&gt;(&lt;base <span class="keyword">class</span>&gt;,&lt;base <span class="keyword">class</span>&gt;...):   <span class="comment">#多继承</span></span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CheckingAccount</span>(<span class="title class_ inherited__">Account</span>):     <span class="comment">#CheckingAccount继承了Account</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bank zccount that charges for withdrawals.&quot;&quot;&quot;</span></span><br><span class="line">    withdraw_fee=<span class="number">1</span></span><br><span class="line">    interest=<span class="number">0.01</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self,amount</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.withdraw(self.amount+self.withdraw_fee)</span><br></pre></td></tr></table></figure><p>The new subclass shares attributes with its base class.</p><p>Using inheritance, we implement a subclass by specifying its differences from the base class.</p><h4 id="Looking-Up-Attribute-Names-on-Classes"><a href="#Looking-Up-Attribute-Names-on-Classes" class="headerlink" title="Looking Up Attribute Names on Classes"></a>Looking Up Attribute Names on Classes</h4><p>To look up a name in a class:</p><ul><li>if it names an attribute in the class, return the attribute value.</li><li>Otherwise, look up the name in the base class, if there is one.</li></ul><p>即如果自己定义了新属性按新属性来，没有新定义的话就找继承的class看有没有相应的属性</p><blockquote><p>类的继承，调用父类的属性和方法参考：</p><p><a href="https://blog.csdn.net/yilulvxing/article/details/85374142?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-85374142-blog-123801693.pc_relevant_multi_platform_featuressortv2removedup&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-85374142-blog-123801693.pc_relevant_multi_platform_featuressortv2removedup&amp;utm_relevant_index=1">https://blog.csdn.net/yilulvxing/article/details/85374142?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-85374142-blog-123801693.pc_relevant_multi_platform_featuressortv2removedup&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-85374142-blog-123801693.pc_relevant_multi_platform_featuressortv2removedup&amp;utm_relevant_index=1</a></p></blockquote><h3 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h3><h4 id="String-Representation"><a href="#String-Representation" class="headerlink" title="String Representation"></a>String Representation</h4><ul><li><strong>dir(object)：</strong>returns a list of all the attributes on an object</li><li><strong>_str_()：</strong>returns a human readable string representation of an object</li><li><strong>_repr_()：</strong>returns a string that would evaluate to an object with the same values</li></ul><h4 id="f-string"><a href="#f-string" class="headerlink" title="f string"></a>f string</h4><p>String interpolation involves evaluating a string literal that contains expressions.</p><ul><li><p>Using string concatenation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;pi starts with&#x27;</span>+<span class="built_in">str</span>(pi)+<span class="string">&#x27;...&#x27;</span></span><br><span class="line"><span class="string">&#x27;pi starts with 3.141592653589793...&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;pi starts with&#x27;</span>+<span class="built_in">str</span>(pi)+<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">pi starts <span class="keyword">with</span> <span class="number">3.141592653589793</span>...</span><br></pre></td></tr></table></figure></li><li><p>Using string interpolation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">f&#x27;pi starts with (pi)...&#x27;</span></span><br><span class="line"><span class="string">&#x27;pi starts with 3.141592653589793...&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">f&#x27;pi starts with (pi)...&#x27;</span>)</span><br><span class="line">pi starts <span class="keyword">with</span> <span class="number">3.141592653589793</span>...</span><br></pre></td></tr></table></figure></li></ul><p>**{}**中的值会被算出来</p><h4 id="Polymorphic-Functions（多态）"><a href="#Polymorphic-Functions（多态）" class="headerlink" title="Polymorphic Functions（多态）"></a>Polymorphic Functions（多态）</h4><p>Polymorphic function：A function that applies to many (poly) different forms (morph) of data</p><p>For example：<strong>str</strong> and <strong>repr</strong> are both polymorphic.</p><blockquote><p><strong>repr</strong> 和<strong>_<em>repr</em>_<strong>的区别：</strong>repr</strong> invokes a zero-argument method <strong>_<em>repr</em>_</strong> on its argument</p></blockquote><p>…to be continued</p><h4 id="Special-Method-Names"><a href="#Special-Method-Names" class="headerlink" title="Special Method Names"></a>Special Method Names</h4><table><thead><tr><th><strong>Name</strong></th><th><strong>Behavior</strong></th></tr></thead><tbody><tr><td>_<em>init</em>_</td><td>Method invoked automatically when an object is constructed</td></tr><tr><td>_<em>repr</em>_</td><td>Method invoked to display an object as a Python expression</td></tr><tr><td>_<em>str</em>_</td><td>Methof invoked to stringify an object</td></tr><tr><td>_<em>add</em>_</td><td>Method invoked to add one object to another</td></tr><tr><td>_<em>bool</em>_</td><td>Method invoked to convert an object to True or False</td></tr><tr><td>_<em>float</em>_</td><td>Method invoked to convert an object to a float(real number)</td></tr></tbody></table><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;one+two</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;one.__add__(two)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>……</p><p>就是一些有特殊功能的函数前后会各有两个下划线</p><h3 id="Recursive-Objects"><a href="#Recursive-Objects" class="headerlink" title="Recursive Objects"></a>Recursive Objects</h3><p><strong>Linked Lists(链表)</strong></p><h4 id="Linked-List-Class"><a href="#Linked-List-Class" class="headerlink" title="Linked List Class"></a>Linked List Class</h4><p>A linked list is either empty or a first value and the rest of the linked list.</p><p>每个link分为first和rest两部分</p><p><img src="/2022/06/30/cs61a/assert4.jpg"></p><p>linked list class: attributes are passed to _<em>init</em>_</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,first,rest=empty</span>):</span><br><span class="line">        <span class="keyword">assert</span> rest <span class="keyword">is</span> Link.empty <span class="keyword">or</span> <span class="built_in">isinstance</span>(rest,Link)   <span class="comment">#Returns whether rest is a Link</span></span><br><span class="line">        self.first=first</span><br><span class="line">        self.rest=rest</span><br></pre></td></tr></table></figure><h4 id="Linked-Lists-Can-Change"><a href="#Linked-Lists-Can-Change" class="headerlink" title="Linked Lists Can Change"></a>Linked Lists Can Change</h4><p>Attribute assignment statements can change first and rest attributes of a Link.</p><p>The rest of a linked list can contain the linked list as a sub-list</p><p>如果想在链表下标0处插入一个元素，可以直接将新元素的下一位指向原先的链表头</p><h2 id="Week-9"><a href="#Week-9" class="headerlink" title="Week 9"></a>Week 9</h2><h3 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h3><p>开始考虑程序的运行时间了…</p><h3 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">memo</span>(<span class="params">f</span>):</span><br><span class="line">    cache=&#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">memorized</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">            cache[n]=f(n)</span><br><span class="line">        <span class="keyword">return</span> cache[n]</span><br><span class="line">    <span class="keyword">return</span> memorized</span><br></pre></td></tr></table></figure><p>本节用的是斐不那几树的例子：</p><p>即如果这一个分支在前面已经出现过了，那么在这一步中就会跳过，这样大大地减少了迭代的次数</p><h3 id="Orders-of-growth"><a href="#Orders-of-growth" class="headerlink" title="Orders of growth"></a>Orders of growth</h3><p><img src="/2022/06/30/cs61a/assert5.jpg"></p><p>​    <strong>Constant growth</strong>. Increasing <em>n</em> doesn’t affect time.</p><h3 id="Decomposition（分解"><a href="#Decomposition（分解" class="headerlink" title="Decomposition（分解"></a>Decomposition（分解</h3><p>也就是将各个功能分开撰写与调试</p><h2 id="Week-11"><a href="#Week-11" class="headerlink" title="Week 11"></a>Week 11</h2><p>似乎到这里换了种语言——scheme</p><h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><p>Scheme 编程语言是一种Lisp方言</p><p>是第一个引入“干净宏”的编程语言</p><p>Scheme programs consist of expressions, whichcan be: </p><ul><li>Primitive expressions：2, 3.3, true, +,quotinent…</li><li>Combinations：(quotient 10 2),  (not true), …</li></ul><p>For example:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (<span class="name"><span class="built_in">quotient</span></span> <span class="number">10</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line">scm&gt;(<span class="name"><span class="built_in">+</span></span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">scm&gt;(<span class="name"><span class="built_in">*</span></span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">scm&gt;(<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">864</span></span><br></pre></td></tr></table></figure><h4 id="Special-forms"><a href="#Special-forms" class="headerlink" title="Special forms"></a>Special forms</h4><p>A combination that is not a call expression is a special form:</p><ul><li><p><strong>If</strong> expression： (if <predicate> <consequent> <alternative>)</alternative></consequent></predicate></p></li><li><p><strong>And</strong> and <strong>or</strong>：  (and <e_1>…<e_n> )  (or <e_1>…<e_n>)</e_n></e_1></e_n></e_1></p></li><li><p>Binding symbols（定义常量）：(define <symbol> <expression>)</expression></symbol></p></li><li><p>New procedures（定义函数，symbol是函数名，formal parameters是变量名）： </p><p>(define (<symbol><formal parameters>) <body>)</body></formal></symbol></p></li></ul><p>For example:</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name"><span class="built_in">define</span></span> pi <span class="number">3.14</span>)</span><br><span class="line">&gt;(<span class="name"><span class="built_in">*</span></span> pi <span class="number">2</span>)</span><br><span class="line"><span class="number">6.28</span></span><br><span class="line">&gt;(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">abs</span></span> x)</span><br><span class="line">   (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">0</span>)</span><br><span class="line">       (<span class="name"><span class="built_in">-</span></span> x)</span><br><span class="line">       x))</span><br><span class="line">&gt;(<span class="name"><span class="built_in">abs</span></span> <span class="number">-3</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li><strong>Lambda expressions</strong>： (lambda (<formal-parameters>) <body>)</body></formal-parameters></li></ul><p>Two equivalent expressions：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(define (plus4 x) (+ x 4))</span><br><span class="line">(define plus4 (lambda (x) (+ x 4)))</span><br></pre></td></tr></table></figure><p>An operator can be a call expression too：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((<span class="name"><span class="built_in">lambda</span></span> (s y z) (<span class="name"><span class="built_in">+</span></span> x y (<span class="name">square</span> z))) <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="More-special-forms"><a href="#More-special-forms" class="headerlink" title="More special forms"></a>More special forms</h4><p><strong>Cond</strong></p><p>The cond special form that behaves like if-elif-else statements in Python</p><p><img src="/2022/06/30/cs61a/assert6.jpg"></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cond</span></span> ((<span class="name">&lt;条件&gt;</span>) (<span class="name">&lt;expressions&gt;</span>))</span><br><span class="line">      ((<span class="name">&lt;条件&gt;</span>) (<span class="name">&lt;expressions&gt;</span>))</span><br><span class="line">      ...</span><br><span class="line">      (<span class="name"><span class="built_in">else</span></span> (<span class="name">&lt;expressions&gt;</span>)))</span><br></pre></td></tr></table></figure><p><strong>Begin</strong></p><p>The begin special form combines multiple expressions into expression</p><p><img src="/2022/06/30/cs61a/assert7.jpg"></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...begin(<span class="name">&lt;expression1&gt;</span>)(<span class="name">&lt;expression2&gt;</span>)</span><br></pre></td></tr></table></figure><p><strong>Let</strong></p><p>The let special form binds symbols to values temporarily; just for one expression</p><p><img src="/2022/06/30/cs61a/assert8.jpg"></p><h4 id="Lists-1"><a href="#Lists-1" class="headerlink" title="Lists"></a>Lists</h4><ul><li><strong>cons</strong>：Two-argument procedure that creates a linked list</li><li><strong>car</strong>：Procedure that returns the first element of a list</li><li><strong>cdr</strong>：Procedure that returns the rest of a list</li><li><strong>nil</strong>：The empty list</li></ul><p><strong>Important! Scheme lists are written in parentheses with elements separated by spaces</strong></p><p>For example：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="name"><span class="built_in">cons</span></span> <span class="number">1</span> (<span class="name"><span class="built_in">cons</span></span> <span class="number">2</span> nil))</span><br><span class="line">(<span class="name">1</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="Symbolic-Programming"><a href="#Symbolic-Programming" class="headerlink" title="Symbolic Programming"></a>Symbolic Programming</h4><p>Symbols normally refer to values; how do we refer to symbols?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;(define a 1)</span><br><span class="line">&gt;(define b 2)</span><br><span class="line">&gt;(list a b)</span><br><span class="line">(1 2)  #No sign of &quot;a&quot; and &quot;b&quot; in the resulting value</span><br></pre></td></tr></table></figure><p>Quotation is used to refer to symbols directly in Lisp</p><p>‘a &#x3D;&#x3D; (quote a)</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;(<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;a</span> <span class="symbol">&#x27;b</span>)</span><br><span class="line">(<span class="name">a</span> b)</span><br><span class="line">&gt;(<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;a</span> b)</span><br><span class="line">(<span class="name">a</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Quotation can also be applied to combinations to form lists</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#x27;(a b c)</span><br><span class="line">(a b c)</span><br><span class="line">&gt;(car &#x27;(a b c))</span><br><span class="line">a</span><br><span class="line">&gt;(cdr &#x27;(a b c))</span><br><span class="line">(b c)</span><br></pre></td></tr></table></figure><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><h4 id="Quasiquotation"><a href="#Quasiquotation" class="headerlink" title="Quasiquotation"></a>Quasiquotation</h4><p>Two ways to quote an expression</p><p>Quote:  ‘(a b)  &#x3D;&gt;  (a b)</p><p>Quasiquote:  &#96;(a b)  &#x3D;&gt;  (a b)</p><p>They are different because parts of a quasiquoted expression can be unquoted with</p><p>​(define b 4)</p><p>Quote:  ‘(a, (+ b 1))  &#x3D;&gt;  (a (unquote (+ b 1)))</p><p>Quasiquote:  &#96;(a, (+ b 1))  &#x3D;&gt;  (a 5)</p><h4 id="Example：While-Statements"><a href="#Example：While-Statements" class="headerlink" title="Example：While Statements"></a>Example：While Statements</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line">x=<span class="number">2</span></span><br><span class="line">total=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x&lt;<span class="number">10</span>:</span><br><span class="line">    total=total+x*x</span><br><span class="line">    x=x+<span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#scheme</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">f</span> x total)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&lt;</span></span> x <span class="number">10</span>)</span><br><span class="line">      (<span class="name">f</span> (<span class="name"><span class="built_in">+</span></span> x <span class="number">2</span>) (<span class="name"><span class="built_in">+</span></span> total (<span class="name"><span class="built_in">*</span></span> x x)))</span><br><span class="line">      total))</span><br><span class="line">(<span class="name">f</span> <span class="number">2</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="Exceptions-1"><a href="#Exceptions-1" class="headerlink" title="Exceptions"></a>Exceptions</h4><h5 id="Assert-Statements"><a href="#Assert-Statements" class="headerlink" title="Assert Statements"></a>Assert Statements</h5><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert &lt;expression&gt;, &lt;string&gt;</span><br></pre></td></tr></table></figure><p>Assertions are disigned to be used liberally. They can be ignored to increase efficiency by running Python with the “-0” flag. “0” stands for optimized.</p><h5 id="Raise-Statements"><a href="#Raise-Statements" class="headerlink" title="Raise Statements"></a>Raise Statements</h5><p>Exceptions are raised with a raise statement.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raise &lt;expression&gt;</span><br></pre></td></tr></table></figure><p>E.g. raise TypeError(‘Bad argument!’)</p><ul><li>TypeError——A function was passed the wrong number&#x2F;type of argument</li><li>NameError——A name wasn’t found</li><li>KeyError——A key wasn’t found in a dictionary</li><li>RuntimeError——Catch-all for troubles during interpretation</li></ul><h4 id="Try-Statements"><a href="#Try-Statements" class="headerlink" title="Try Statements"></a>Try Statements</h4><p>是在面临上述exceptions时</p><p>Try statements handle exceptions</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    &lt;<span class="keyword">try</span> suite&gt;</span><br><span class="line"><span class="keyword">except</span> &lt;exception <span class="keyword">class</span>&gt; <span class="keyword">as</span> &lt;name&gt;:</span><br><span class="line">    &lt;<span class="keyword">except</span> suite&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>Executing rule</strong>:</p><p>The <try suite> is executed first</try></p><p>If, during the course of executing the <try suite>, an exception is raised that is not handled otherwise, and if the class of the exception inherits from <exception class>,</exception></try></p><p>Then the <except suite> is executed, with <name> bound to the exception.</name></except></p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">try</span>:</span><br><span class="line">    x=<span class="number">1</span>/<span class="number">0</span></span><br><span class="line">   <span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;handling a&#x27;</span>, <span class="built_in">type</span>(e))</span><br><span class="line">        x=<span class="number">0</span></span><br><span class="line">handling a &lt;<span class="keyword">class</span> <span class="string">&#x27;ZeroDivisionError&#x27;</span>&gt;</span><br><span class="line">&gt;&gt;&gt;x</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>Multiple try statements:</strong> Control jumpps to the except suite of the most recent try statement that handles that type of exception.</p><h3 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h3><p>The Pair class represents Scheme pairs and lists. A list is a pair whose second element is either a list or nil</p><p>Scheme expressions are represented as Scheme lists!</p><h4 id="Calculator-Semantics"><a href="#Calculator-Semantics" class="headerlink" title="Calculator Semantics"></a>Calculator Semantics</h4><p>The value of a calculator expression is defined recursively.</p><p><strong>Primitive:</strong> A number evaluates to itself</p><p><strong>Call:</strong> A call expression evaluates to its argument values combined by an operator</p><p><img src="/2022/06/30/cs61a/assert9.jpg"></p><h2 id="week-12"><a href="#week-12" class="headerlink" title="week 12"></a>week 12</h2><h3 id="Tail-Calls"><a href="#Tail-Calls" class="headerlink" title="Tail Calls"></a>Tail Calls</h3><p>A procedure call taht has not yet returned is active. Some procedure calls are tail calls. A Scheme interpreter should support an unbounded number of active tail calls using only a constant amount of space.</p><p>A tail call is a call expression in a tail context:</p><ul><li>The last body sub-expression in a lambda expression</li><li>Sub-expressions 2&amp;3 in a tail context <strong>if</strong> expression</li><li>All non-predicate sub-expressions in a tail context <strong>cond</strong></li><li>The last sub-expression in a tail context <strong>and</strong> or <strong>or</strong></li><li>The last sub-expression in a tail context <strong>begin</strong></li></ul><p><strong>Tail Recursion</strong>：尾递归</p><p>在尾递归中只有前进的过程，而在普通递归中还有压栈、栈的回退、栈空等过程。</p><blockquote><p>【1】在尾递归中，其实只有前进的过程，也就是顺藤摸瓜（瓜就是返回结果）。摸到瓜结束。<br>【2】在普通递归中，我们摸到了瓜（这个瓜在这里指的是递归的base case），你还得记住你怎了顺的藤（将中间过程压栈），然后在把瓜顺着藤捣腾回去（栈的回退），直到到了最初的起点（栈空）。然后返回。</p></blockquote><h3 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h3><h4 id="Types-of-Programming"><a href="#Types-of-Programming" class="headerlink" title="Types of Programming"></a>Types of Programming</h4><ul><li><p>Imperative programming（命令式编程）：Describe what you want a computer to do</p><p>Often involves mutation for the purpose of computing a result</p><p>Computational efficiency is often determined by the details of the program</p><p>E.g. oop is a useful way of organizing imperative programs.</p></li><li><p>Declarative programming（声明式编程）：Describe the result you want a computer to produce</p><p>Often abstracts away the details of how memory is changing during computation</p><p>Computational efficiency is often determined by the interpreter or language</p><p>E.g. functional programming（函数式编程） describes a result using function composition</p></li><li><p>General-purpose languages：Designed to describe any computation</p><p>Python, Scheme, Javascript, Java, C, C++, etc</p><p>Languages differ in the programming styles that they promote</p><p>Language features make some languages more suitable to certain applications</p></li><li><p>Domain-specific languages：Designed to solve particular classes of problems</p><p>SQL, HTML, CSS, regular expressions, etc</p><p>Often declarative in character：the language describes what to compute&#x2F;create, not how</p><p>Often embedded into general-purpose languages</p></li></ul><h4 id="Character-classes"><a href="#Character-classes" class="headerlink" title="Character classes"></a>Character classes</h4><table><thead><tr><th align="left">Class</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>[abc]</code></td><td align="left">Matches a, b, or c</td></tr><tr><td align="left"><code>[a-z]</code></td><td align="left">Matches any character between a and z</td></tr><tr><td align="left"><code>[^A-Z]</code></td><td align="left">Matches any character that is not between A and Z.</td></tr><tr><td align="left"><code>\w</code></td><td align="left">Matches any “word” character. Equivalent to <code>[A-Za-z0-9_]</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">Matches any digit. Equivalent to <code>[0-9]</code>.</td></tr><tr><td align="left"><code>[0-9]</code></td><td align="left">Matches a single digit in the range 0 - 9. Equivalent to <code>\d</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">Matches any whitespace character (spaces, tabs, line breaks).</td></tr><tr><td align="left"><code>.</code></td><td align="left">Matches any character besides new line.</td></tr></tbody></table><h2 id="Week-13"><a href="#Week-13" class="headerlink" title="Week 13"></a>Week 13</h2><h3 id="Backus-Naur-Form"><a href="#Backus-Naur-Form" class="headerlink" title="Backus-Naur Form"></a>Backus-Naur Form</h3><p>详见百度百科或wiki</p><blockquote><p>尖括号( &lt; &gt; )内包含的为必选项。</p><p>方括号( [ ] )内包含的为可选项。</p><p>大括号( { } )内包含的为可重复0至无数次的项。</p><p>竖线( | )表示在其左右两边任选一项，相当于”OR”的意思。</p><p>::&#x3D; 是“被定义为”的意思</p></blockquote><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h4><p>数据库</p><p>In <strong>declarative languages</strong> such as SQL &amp;Prolog:</p><ul><li>A “program” is a description of the desired result</li><li>The interpreter figures out how to generate the result</li></ul><p>In <strong>imperative languages</strong> such as Python &amp; Scheme:</p><ul><li>A “program” is a description of computational processes</li><li>The interpreter carries out execution&#x2F;evaluation rules</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> cities <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">38</span> <span class="keyword">as</span> latitude, <span class="number">122</span> <span class="keyword">as</span> longitude, &quot;Berkeley&quot; <span class="keyword">as</span> name <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">42</span> <span class="keyword">as</span> latitude, <span class="number">71</span> <span class="keyword">as</span> longitude, &quot;Cambridge&quot; <span class="keyword">as</span> name <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">45</span> <span class="keyword">as</span> latitude, <span class="number">93</span> <span class="keyword">as</span> longitude, &quot;Minneapolis&quot;;</span><br><span class="line"><span class="keyword">select</span> &quot;west coast&quot; <span class="keyword">as</span> region, name <span class="keyword">from</span> cities <span class="keyword">where</span> longitude <span class="operator">&gt;=</span><span class="number">115</span> <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> &quot;other&quot;, <span class="keyword">as</span> region, name <span class="keyword">from</span> cities <span class="keyword">where</span> longitude <span class="operator">&lt;</span> <span class="number">115</span>;</span><br></pre></td></tr></table></figure><h4 id="Structured-Query-Language（SQL）"><a href="#Structured-Query-Language（SQL）" class="headerlink" title="Structured Query Language（SQL）"></a>Structured Query Language（SQL）</h4><ul><li>A select statement creates a new table, either from scratch or by projecting a table</li><li>A create table statement gives a global name to a table</li><li>Lots of other statements exist：analyze, delete, explain, insert, replace, update, etc</li><li>Most of the important action is in the select statement</li><li>The code for executing select statements fits on a single sheet of paper</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [expression] <span class="keyword">as</span> [name], [expression] <span class="keyword">as</span> [name]</span><br></pre></td></tr></table></figure><p>The result of a <strong>select</strong> statement is displayed to the user, but not stored</p><p>A <strong>create table</strong> statement gives the result a name</p><p>For example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> parents <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> &quot;abraham&quot; <span class="keyword">as</span> parent, &quot;barack&quot; <span class="keyword">as</span> child <span class="keyword">union</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">select</span> &quot;eisenhower&quot; <span class="keyword">as</span> parent, &quot;fillmore&quot;;</span><br></pre></td></tr></table></figure><p><strong>projecting tables</strong></p><p><img src="/2022/06/30/cs61a/assert10.jpg"></p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><h4 id="Creating-tables-with-SELECT"><a href="#Creating-tables-with-SELECT" class="headerlink" title="Creating tables with SELECT"></a>Creating tables with SELECT</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> top_music_videos <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> title, views <span class="keyword">from</span> songs <span class="keyword">order</span> <span class="keyword">by</span> views <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="Creating-tables-with-UNION"><a href="#Creating-tables-with-UNION" class="headerlink" title="Creating tables with UNION"></a>Creating tables with UNION</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> music_movies <span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> &quot;Mamma Mia&quot; <span class="keyword">as</span> title, <span class="number">2008</span> <span class="keyword">as</span> release_year <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> &quot;Olaf&#x27;s Frozen Adventure&quot;, <span class="number">2017</span> <span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> &quot;Moulin Rouge&quot;, <span class="number">2001</span>;</span><br></pre></td></tr></table></figure><h4 id="2-step-table-creation"><a href="#2-step-table-creation" class="headerlink" title="2-step table creation"></a>2-step table creation</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">createtable musical_movies (title text, releas_year interger);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> musical_movies <span class="keyword">values</span> (&quot;Mamma Mia&quot;,<span class="number">2008</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> musical_movies <span class="keyword">values</span> (&quot;Olaf&#x27;s Frozen Adventure&quot;, <span class="number">2017</span>);</span><br></pre></td></tr></table></figure><h2 id="Week14"><a href="#Week14" class="headerlink" title="Week14"></a>Week14</h2><h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><h4 id="Aggregate-functions"><a href="#Aggregate-functions" class="headerlink" title="Aggregate functions"></a>Aggregate functions</h4><blockquote><p>SELECT [columns] FROM [table] WHERE [expression];</p></blockquote><blockquote><p>SELECT MAX(columns) FROM [table];</p></blockquote><p>For example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> body, <span class="built_in">max</span>(mean_radius) <span class="keyword">from</span> solar_system_objects;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(mass) <span class="keyword">from</span> solar_system_objects;</span><br></pre></td></tr></table></figure><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><p><strong>Grouping rows</strong></p><p>rows in a table can be grouped using <strong>group by</strong></p><blockquote><p>SELECT [columns] FROM [table] GROUP BY [expression];</p></blockquote><p>For example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> legs, <span class="built_in">max</span>(weight) <span class="keyword">from</span> animals <span class="keyword">group</span> <span class="keyword">by</span> legs;</span><br></pre></td></tr></table></figure><p><strong>Filtering groups</strong></p><p>using <strong>having</strong> clause</p><blockquote><p>SELECT [columns] FROM [table] GROUP BY [expression] HAVING [expression];</p></blockquote><p>For example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> weight<span class="operator">/</span>legs, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> animals <span class="keyword">group</span> <span class="keyword">by</span> weight<span class="operator">/</span>legs <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="Week-15"><a href="#Week-15" class="headerlink" title="Week 15"></a>Week 15</h2><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>I love John DeNero！</p><blockquote><p>don’t compare</p><p>In real life how you compare how you compare to somebody else doesn’t matter very much at all</p><p>what does matter is what you’re capable of what you do how you choose to spend your time and what impact you have on the world </p><p>and so it turns out your self-worth has nothing to do with what other people achieve and has everything to do with what you achieve</p></blockquote><p>完结撒花~~~</p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs, python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行水问路·大一学年总结</title>
      <link href="/2022/06/30/a/"/>
      <url>/2022/06/30/a/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="42e21f7d296534b8610becebeb88cf17f65bb2dae44b42fbb85e7005e47f762b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">想阅读此文请输入密码哦！什么？你不知道密码是什么？那就没有必要知道了...</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 过往云烟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结, 大一, 逃离 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
