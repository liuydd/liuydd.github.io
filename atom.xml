<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>等到天亮我们都寻找到最漂亮的愿望</title>
  
  <subtitle>Sheeta Liu&#39;s Paradise Regained </subtitle>
  <link href="http://liuydd.github.io/atom.xml" rel="self"/>
  
  <link href="http://liuydd.github.io/"/>
  <updated>2022-07-18T14:51:57.744Z</updated>
  <id>http://liuydd.github.io/</id>
  
  <author>
    <name>Sheeta Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数学模型：人类的构思</title>
    <link href="http://liuydd.github.io/2022/07/06/shumo/"/>
    <id>http://liuydd.github.io/2022/07/06/shumo/</id>
    <published>2022-07-06T13:28:46.000Z</published>
    <updated>2022-07-18T14:51:57.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><p>参考书：《数学模型（第四版）》姜启源</p><p>目的：备战国赛</p><p>updated：估计就去打打酱油hhh，毕竟没怎么认真学</p><h1 id="第1章-建立数学模型"><a href="#第1章-建立数学模型" class="headerlink" title="第1章 建立数学模型"></a>第1章 建立数学模型</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>原型：人们在现实世界里关心、研究或者从事生产、管理的<strong>实际对象</strong>。</p><p>模型：<strong>为了某个特定目的</strong>将原型的某一部分信息简缩、提炼而构造的原型替代物</p><blockquote><p>原型有各个方面和各种层次的特征，而模型只要求反映与某种目的有关的那些方面和层次。</p></blockquote><p>模型：</p><ul><li>物质模型&#x2F;形象模型：<ul><li>直观模型：把原型的尺寸按比例缩小或放大</li><li>物理模型：可显示原型的外形或某些特征，也可以用来进行模拟实验，间接研究原型的某些规律</li></ul></li><li>理想模型&#x2F;抽象模型：<ul><li>思维模型：如司机对方向盘的操纵等</li><li>符号模型：在一些约定或假设下借助专门的符号、线条等，按一定形式组合起来描述原型。如地图等</li><li>数学模型：由<strong>数字、字母或其他数学符号</strong>组成，描述现实对象<strong>数量规律的数学公式、图形或算法</strong></li></ul></li></ul><p>数学模型：对于现实世界的一个<strong>特定对象</strong>，为了一个<strong>特定目的</strong>，根据特有的<strong>内在规律</strong>，作出一些必要的<strong>简化假设</strong>，运用恰当的<strong>数学工具</strong>，得到的一个<strong>数学结构</strong>。</p><h2 id="基本方法-amp-一般步骤"><a href="#基本方法-amp-一般步骤" class="headerlink" title="基本方法&amp;一般步骤"></a>基本方法&amp;一般步骤</h2><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>1.机理分析：找出<strong>反映内部机理</strong>的数量规律</p><p>2.测试分析：将研究对象看作一个“黑箱”系统（即<strong>内部机理看不清楚</strong>），通过对系统输入、输出数据的测量和统计分析，按照一定准测找出与数据拟合得最好的模型</p><p>通常采用两种方法结合起来进行建模，即用机理分析建立模型的结构，用测试分析确定模型的参数</p><h3 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h3><p><img src="/shumo/assert1.jpg"></p><ul><li><strong>模型准备：</strong>了解问题的实际背景，明确建模目的，搜集资料</li><li><strong>模型假设：</strong>抓住问题本质，作出并简化假设</li><li><strong>模型构成：</strong>根据假设，采用数学的语言建立模型</li><li><strong>模型求解：</strong>可以采用解方程、画图形、优化方法、数值计算、统计分析等各种数学方法，特别是数学软件和计算机技术</li><li><strong>模型分析：</strong>对求解结果进行数学上的分析，如结果的误差分析、统计分析、模型对数据的灵敏性分析、对假设的强健性分析等</li><li><strong>模型检验：</strong>回到实际问题。若结果不符，则通常是模型假设有误。</li><li><strong>模型应用：</strong>应用方式等</li></ul><p>即将实际问题抽象成数学模型，经过计算后得到模型的解答，再拟合实际问题</p><h1 id="第2章-初等模型"><a href="#第2章-初等模型" class="headerlink" title="第2章 初等模型"></a>第2章 初等模型</h1><p>研究对象机理较简单，采用静态、线性、确定性模型描述就能达到建模目的。</p><h2 id="2-1光盘的数据容量"><a href="#2-1光盘的数据容量" class="headerlink" title="2.1光盘的数据容量"></a>2.1光盘的数据容量</h2><h3 id="模型准备"><a href="#模型准备" class="headerlink" title="模型准备"></a>模型准备</h3><p>1.盘片上环形区域面积一定时，数据信息容量的大小取决于信道的<strong>总长度</strong>与信道上存储数据的<strong>线密度</strong>。而二者又取决于<strong>激光波长</strong>和驱动光盘的<strong>机械形式</strong>。</p><p>2.由于光的衍射作用，激光束会形成光斑。光斑大小与激光波长成正比，线密度与光斑大小成反比。</p><p>3.驱动光盘的机械形式分为两种：恒定角速度CAV和恒定线速度CLV</p><ul><li>CAV：转速固定，每一圈螺旋线上要储存同等数量的数据信息。故由内向外，线密度递减。<strong>信息容量取决于螺旋线最内圈的长度、线密度以及总圈数</strong>。</li><li>CLV：线速度固定，线密度不变。<strong>信息容量取决于固定的线密度和螺旋线总长度</strong>。</li></ul><h3 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h3><p>螺旋线的长度：</p><ul><li>用同心圆周长之和来近似</li><li>用环形区域面积除以信道间距</li><li>用同心圆平均周长乘以总圈数</li></ul><h2 id="2-2双层玻璃窗的功效"><a href="#2-2双层玻璃窗的功效" class="headerlink" title="2.2双层玻璃窗的功效"></a>2.2双层玻璃窗的功效</h2><p>简单的高中物理热学知识</p><h2 id="2-3划船比赛的成绩"><a href="#2-3划船比赛的成绩" class="headerlink" title="2.3划船比赛的成绩"></a>2.3划船比赛的成绩</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>以研究目的为中心，找相关的影响因素。</p><p>比如建模目的是寻求桨手数量与比赛成绩之间的数量规律。</p><p>影响因素是阻力，影响阻力的因素有桨手数、桨手体重、划桨功率、船速等等。</p><h3 id="模型假设："><a href="#模型假设：" class="headerlink" title="模型假设："></a>模型假设：</h3><p>艇的静态特征（艇的几何形状，艇重与桨手数的关系）、动态特征（船速，阻力），其他因素（桨手体重，每个桨手的划桨功率）</p><h3 id="模型检验"><a href="#模型检验" class="headerlink" title="模型检验"></a>模型检验</h3><p>一般是将实际数据代入模型中看是否吻合</p><h2 id="2-4实物交换"><a href="#2-4实物交换" class="headerlink" title="2.4实物交换"></a>2.4实物交换</h2><p>采用无差别曲线，利用图形方法建立实物交换模型的基础。</p><p>确定曲线需要大量的数据。</p><p><img src="/shumo/assert2.jpg"></p><p>some thoughts：如果双方交换的物品是三种，可否提出无差别曲面的概念？</p><h2 id="2-5污水均流地的设计"><a href="#2-5污水均流地的设计" class="headerlink" title="2.5污水均流地的设计"></a>2.5污水均流地的设计</h2><h2 id="2-6交通流与道路通行能力"><a href="#2-6交通流与道路通行能力" class="headerlink" title="2.6交通流与道路通行能力"></a>2.6交通流与道路通行能力</h2><ul><li><strong>流量q</strong>：辆&#x2F;h</li><li><strong>速度v</strong>：km&#x2F;h</li><li><strong>密度k</strong>：辆&#x2F;km</li></ul><p>一般认为三者为常数，且q&#x3D;vk</p><h3 id="模型一"><a href="#模型一" class="headerlink" title="模型一"></a>模型一</h3><p>Greenshields提出速度与密度之间存在线性关系：<br>$$<br>v&#x3D;v_f(1-k&#x2F;k_j)<br>$$<br>v_f是密度为0时的车速，即理论上的最高车速，称为<strong>畅行车速</strong></p><p>k_j是速度为0时的密度，称为<strong>阻塞密度</strong></p><p>适用于密度适中的情况</p><p>带入上述公式，可得到流量与密度的关系，为一条抛物线。最大流量出现在畅行车速的一半处</p><h3 id="模型二"><a href="#模型二" class="headerlink" title="模型二"></a>模型二</h3><p>对数模型，适用于密度较大的情况<br>$$<br>v&#x3D;v_1ln(k_j&#x2F;k)<br>$$</p><h3 id="模型三"><a href="#模型三" class="headerlink" title="模型三"></a>模型三</h3><p>指数模型，适用于密度较小的情况<br>$$<br>v&#x3D;v_fexp(-k&#x2F;k_j)<br>$$</p><h2 id="2-7核军备竞赛"><a href="#2-7核军备竞赛" class="headerlink" title="2.7核军备竞赛"></a>2.7核军备竞赛</h2><p>也是建立图的模型</p><p>采用最小逼近方法</p><h2 id="2-8扬帆远航"><a href="#2-8扬帆远航" class="headerlink" title="2.8扬帆远航"></a>2.8扬帆远航</h2><p>简单的物理速度分解知识以及没学过的流体力学知识</p><h2 id="2-9天气预防的评价"><a href="#2-9天气预防的评价" class="headerlink" title="2.9天气预防的评价"></a>2.9天气预防的评价</h2><h1 id="第三章-简单的优化模型"><a href="#第三章-简单的优化模型" class="headerlink" title="第三章 简单的优化模型"></a>第三章 简单的优化模型</h1><p>首先确定优化的目标是什么，寻求的决策是什么，限制条件，用什么数学工具（变量、常数、函数等）表示，怎样简化假设等等</p><h2 id="3-1存贮模型"><a href="#3-1存贮模型" class="headerlink" title="3.1存贮模型"></a>3.1存贮模型</h2><h3 id="不允许缺货的存贮模型"><a href="#不允许缺货的存贮模型" class="headerlink" title="不允许缺货的存贮模型"></a>不允许缺货的存贮模型</h3><p>经济订货批量公式（EOQ公式）</p><h3 id="允许缺货的存贮模型"><a href="#允许缺货的存贮模型" class="headerlink" title="允许缺货的存贮模型"></a>允许缺货的存贮模型</h3><p>将假设3改为：每天每件产品缺货损失费为c_3</p><h2 id="3-2生猪的出售时机"><a href="#3-2生猪的出售时机" class="headerlink" title="3.2生猪的出售时机"></a>3.2生猪的出售时机</h2><p>敏感性分析和强健性分析：本质是模型需要考虑到现实中的各种因素，不能过于理想化。</p>]]></content>
    
    
    <summary type="html">在寻找理想中数学的样子...</summary>
    
    
    
    <category term="理想中的数学" scheme="http://liuydd.github.io/categories/%E7%90%86%E6%83%B3%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="数模" scheme="http://liuydd.github.io/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>cs61a：从入土到入门</title>
    <link href="http://liuydd.github.io/2022/07/02/cs61aa/"/>
    <id>http://liuydd.github.io/2022/07/02/cs61aa/</id>
    <published>2022-07-02T13:03:32.000Z</published>
    <updated>2022-07-21T16:08:48.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>版本：CS 61A Fall 2021</p><p>记录homework, lab and projects.</p><h2 id="HW-01-Control"><a href="#HW-01-Control" class="headerlink" title="HW 01:Control"></a>HW 01:Control</h2><p>可能刚开始，连ok用的都不太熟练，所以hw01做的比较水…</p><p>cs61a每一题都会给出大概的模板，(<del>是为了避免让你造轮子吗</del></p><h3 id="Q2-A-Plus-Abs-B"><a href="#Q2-A-Plus-Abs-B" class="headerlink" title="Q2:A Plus Abs B"></a>Q2:A Plus Abs B</h3><p>Fill in the blanks in the following function for adding <code>a</code> to the absolute value of <code>b</code>, without calling <code>abs</code>. You may <strong>not</strong> modify any of the provided code other than the two blanks.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q a_plus_abs_b</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = a-b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = a+b</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><h3 id="Q3-Two-of-Three"><a href="#Q3-Two-of-Three" class="headerlink" title="Q3: Two of Three"></a>Q3: Two of Three</h3><p>Write a function that takes three <em>positive</em> numbers as arguments and returns the sum of the squares of the two smallest numbers.<strong>Use only a single line for the body of the function.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> _____</span><br></pre></td></tr></table></figure><blockquote><p><strong>Hint:</strong> Consider using the <code>max</code> or <code>min</code> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>)</span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure></blockquote><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q two_of_three</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x*x+y*y+z*z-<span class="built_in">max</span>(x,y,z)*<span class="built_in">max</span>(x,y,z)</span><br></pre></td></tr></table></figure><h3 id="Q4-Largest-Factor"><a href="#Q4-Largest-Factor" class="headerlink" title="Q4: Largest Factor"></a>Q4: Largest Factor</h3><p>Write a function that takes an integer <code>n</code> that is <strong>greater than 1</strong> andreturns the largest integer that is smaller than <code>n</code> and evenly divides <code>n</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Hint:</strong> To check if <code>b</code> evenly divides <code>a</code>, you can use the expression <code>a % b == 0</code>, which can be read as, “the remainder of dividing <code>a</code> by <code>b</code> is 0.”</p></blockquote><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q largest_factor</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i=n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n%i!=<span class="number">0</span>:</span><br><span class="line">        i=i-<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="Q6-Hailstone"><a href="#Q6-Hailstone" class="headerlink" title="Q6: Hailstone"></a>Q6: Hailstone</h3><p>Douglas Hofstadter’s Pulitzer-prize-winning book, <em>Gödel, Escher, Bach</em>, poses the following mathematical puzzle.</p><ol><li>Pick a positive integer <code>n</code> as the start.</li><li>If <code>n</code> is even, divide it by 2.</li><li>If <code>n</code> is odd, multiply it by 3 and add 1.</li><li>Continue this process until <code>n</code> is 1.</li></ol><p>The number <code>n</code> will travel up and down but eventually end at 1 (at least for all numbers that have ever been tried – nobody has ever proved that the sequence will terminate). Analogously, a hailstone travels up and down in the atmosphere before eventually landing on earth.</p><p>This sequence of values of <code>n</code> is often called a Hailstone sequence. Write a function that takes a single argument with formal parameter name <code>n</code>, prints out the hailstone sequence starting at <code>n</code>, and returns the number of steps in the sequence:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the hailstone sequence starting at n and return its</span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Hailstone sequences can get quite long! Try 27. What’s the longest you can find?</p><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q hailstone</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hw01 Q6:Hailstone</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n!=<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(n))</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            n=n/<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=n*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#print(int(i))</span></span><br></pre></td></tr></table></figure><h2 id="Lab-01-Variables-amp-Functions-Control"><a href="#Lab-01-Variables-amp-Functions-Control" class="headerlink" title="Lab 01: Variables &amp; Functions,Control"></a>Lab 01: Variables &amp; Functions,Control</h2><h3 id="Q4：-Falling-Factorial"><a href="#Q4：-Falling-Factorial" class="headerlink" title="Q4： Falling Factorial"></a>Q4： Falling Factorial</h3><p>Let’s write a function <code>falling</code>, which is a “falling” factorial that takes two arguments, <code>n</code> and <code>k</code>, and returns the product of <code>k</code> consecutive numbers, starting from <code>n</code> and working downwards. When <code>k</code> is 0, the function should return 1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">falling</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q falling</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">falling</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;  if(k==0):</span></span><br><span class="line"><span class="string">        temp=1</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        temp=n</span></span><br><span class="line"><span class="string">        while(k!=1):</span></span><br><span class="line"><span class="string">            k-=1</span></span><br><span class="line"><span class="string">            temp*=(n-1)</span></span><br><span class="line"><span class="string">            n-=1</span></span><br><span class="line"><span class="string">    return temp    &#x27;&#x27;&#x27;</span></span><br><span class="line">    total,stop=<span class="number">1</span>,n-k</span><br><span class="line">    <span class="keyword">while</span> n&gt;stop:</span><br><span class="line">        total,n=total*n,n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total                <span class="comment">#感觉python有很多都和C++不同，而我的思维还在C++上面</span></span><br></pre></td></tr></table></figure><h3 id="Q5-Sum-Digits"><a href="#Q5-Sum-Digits" class="headerlink" title="Q5: Sum Digits"></a>Q5: Sum Digits</h3><p>Write a function that takes in a nonnegative integer and sums its digits. (Using floor division and modulo might be helpful here!)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q sum_digits</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    total=y%<span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span>(y!=<span class="number">0</span>):</span><br><span class="line">        y=y//<span class="number">10</span></span><br><span class="line">        total+=y%<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> total         <span class="comment">#这个过的挺轻松的</span></span><br></pre></td></tr></table></figure><h3 id="Q7-Double-Eights"><a href="#Q7-Double-Eights" class="headerlink" title="Q7: Double Eights"></a>Q7: Double Eights</h3><p>Write a function that takes in a number and determines if the digits contain two<br>adjacent 8s.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_eights</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q double_eights</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_eights</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>):</span><br><span class="line">        t=n%<span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">8</span>):</span><br><span class="line">            n//=<span class="number">10</span></span><br><span class="line">            _t=n%<span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span>(_t==<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n//=<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>    <span class="comment">#最后这里不要忘了还有个return，针对while循环走完的情况</span></span><br></pre></td></tr></table></figure><h2 id="Project1：The-Game-of-Hog"><a href="#Project1：The-Game-of-Hog" class="headerlink" title="Project1：The Game of Hog"></a>Project1：The Game of Hog</h2><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><ul><li><strong>Sow Sad:</strong> If any of the dice outcomes is a 1, the current player’s score for the turn is <code>1</code>.<ul><li>所有骰子中有一个数为1，则得1分</li></ul></li><li><strong>Picky Piggy:</strong> A player who chooses to roll zero dice scores the <code>n</code>th digit of the decimal expansion of 1&#x2F;7 (0.14285714…), where <code>n</code> is the opponent’s score. As a special case, if <code>n</code> is 0, the player scores 7 points.<ul><li>玩家选择不掷骰子，则对手分数为几，他的分数就为1&#x2F;7的第几位数字</li></ul></li><li><strong>Hog Pile:</strong> After points for the turn are added to the current player’s score, if  the players’ scores are the same, the current player’s score doubles.<ul><li>如果当前玩家掷骰子后的分数与对手相同，则当前玩家分数翻倍</li></ul></li></ul><h3 id="Phase1-Simulator"><a href="#Phase1-Simulator" class="headerlink" title="Phase1: Simulator"></a>Phase1: Simulator</h3><p>In the first phase, you will develop a simulator for the game of Hog.</p><h4 id="Problem-0"><a href="#Problem-0" class="headerlink" title="Problem 0"></a>Problem 0</h4><ul><li>a fair dice：正常的骰子</li><li>a test dice：在输入进去的数中选一个输出</li></ul><h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><p>num_rolls：要掷的骰子数量</p><p>dice：所掷的骰子情况</p><blockquote><p>cs61a的project会先设置一个unlocking环节，以填空的形式确保你真的理解了题目的意思</p><p>居然还会给你debugging tips，有点感动</p></blockquote><p><strong>www我破防了，为什么unlocking只能用vscode交互而不能用git</strong></p><p><del>刚夸了这个理解程序的功能，结果在这耗了四五十分钟…</del></p><p>讲个笑话：</p><p><img src="/cs61aa/img1.png"></p><blockquote><p>死者：lyd</p><p>死因：python3.9 -q 01 -u –local的50+cases</p><p><del>太好了，不是50+，只有几个cases</del></p></blockquote><p>attention：令a&#x3D;make_test_dice(4,1,2,6)，roll_dice(3,a)输出后，roll_dice(1,a)中a的值会接着来。</p><p>anyway，Berkerly的这门课程让我喜欢的就在这，给出了error、是哪个suite出了问题、过了多少个cases</p><p><img src="/cs61aa/img2.png"></p><p><del>又到了愉快的debug时间</del></p><p><img src="/cs61aa/img3.png"></p><p>好开心！！！虽然是个很简单的函数，虽然不知道前几次为什么过不了…</p><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">roll_dice</span>(<span class="params">num_rolls, dice=six_sided</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate rolling the DICE exactly NUM_ROLLS &gt; 0 times. Return the sum of</span></span><br><span class="line"><span class="string">    the outcomes unless any of the outcomes is 1. In that case, return 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    num_rolls:  The number of dice rolls that will be made.</span></span><br><span class="line"><span class="string">    dice:       A function that simulates a single dice roll outcome.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># These assert statements ensure that num_rolls is a positive integer.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(num_rolls) == <span class="built_in">int</span>, <span class="string">&#x27;num_rolls must be an integer.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &gt; <span class="number">0</span>, <span class="string">&#x27;Must roll at least once.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="built_in">sum</span>,f=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    num_of_rolls=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num_of_rolls&lt;=num_rolls:</span><br><span class="line">        c=dice()</span><br><span class="line">        <span class="built_in">sum</span>+=c</span><br><span class="line">        num_of_rolls+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c==<span class="number">1</span>:</span><br><span class="line">            f=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> f==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>        </span><br><span class="line">    <span class="comment"># END PROBLEM 1</span></span><br></pre></td></tr></table></figure><h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h4><p>写的比较水…用枚举的方法直接AC</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">picky_piggy</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the points scored from rolling 0 dice.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    score:  The opponent&#x27;s current score.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> score%<span class="number">6</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s=score%<span class="number">6</span></span><br><span class="line">        <span class="keyword">if</span> s==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">        <span class="keyword">elif</span> s==<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># END PROBLEM 2</span></span><br></pre></td></tr></table></figure><h4 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem 3"></a>Problem 3</h4><p>函数take_turn：综合考虑roll_dice和picky_piggy情况。即若num_rolls&gt;0，按roll_dice考虑，若num_rolls&#x3D;0，按picky_piggy考虑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">take_turn</span>(<span class="params">num_rolls, opponent_score, dice=six_sided, goal=GOAL_SCORE</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate a turn rolling NUM_ROLLS dice, which may be 0 in the case</span></span><br><span class="line"><span class="string">    of a player using Picky Piggy.</span></span><br><span class="line"><span class="string">    Return the points scored for the turn by the current player.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    num_rolls:       The number of dice rolls that will be made.</span></span><br><span class="line"><span class="string">    opponent_score:  The total score of the opponent.</span></span><br><span class="line"><span class="string">    dice:            A function that simulates a single dice roll outcome.</span></span><br><span class="line"><span class="string">    goal:            The goal score of the game.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Leave these assert statements here; they help check for errors.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(num_rolls) == <span class="built_in">int</span>, <span class="string">&#x27;num_rolls must be an integer.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &gt;= <span class="number">0</span>, <span class="string">&#x27;Cannot roll a negative number of dice in take_turn.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &lt;= <span class="number">10</span>, <span class="string">&#x27;Cannot roll more than 10 dice.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> opponent_score &lt; goal, <span class="string">&#x27;The game should be over.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> num_rolls==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> picky_piggy(opponent_score)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> roll_dice(num_rolls,dice)</span><br><span class="line">    <span class="comment"># END PROBLEM 3</span></span><br></pre></td></tr></table></figure><h4 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem 4"></a>Problem 4</h4><p>函数hog_pile：return的是current player增加的points，而非总points</p><p>如果player_score!&#x3D;opponent_score，则return 0；反之，return player_score</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hog_pile</span>(<span class="params">player_score, opponent_score</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the points scored by player due to Hog Pile.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    player_score:   The total score of the current player.</span></span><br><span class="line"><span class="string">    opponent_score: The total score of the other player.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 4</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> player_score!=opponent_score:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> player_score</span><br><span class="line">    <span class="comment"># END PROBLEM 4</span></span><br></pre></td></tr></table></figure><h4 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem 5"></a>Problem 5</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">strategy0, strategy1, score0=<span class="number">0</span>, score1=<span class="number">0</span>, dice=six_sided,</span></span><br><span class="line"><span class="params">         goal=GOAL_SCORE, say=silence</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate a game and return the final scores of both players, with Player</span></span><br><span class="line"><span class="string">    0&#x27;s score first, and Player 1&#x27;s score second.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A strategy is a function that takes two total scores as arguments (the</span></span><br><span class="line"><span class="string">    current player&#x27;s score, and the opponent&#x27;s score), and returns a number of</span></span><br><span class="line"><span class="string">    dice that the current player will roll this turn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    strategy0:  The strategy function for Player 0, who plays first.</span></span><br><span class="line"><span class="string">    strategy1:  The strategy function for Player 1, who plays second.</span></span><br><span class="line"><span class="string">    score0:     Starting score for Player 0</span></span><br><span class="line"><span class="string">    score1:     Starting score for Player 1</span></span><br><span class="line"><span class="string">    dice:       A function of zero arguments that simulates a dice roll.</span></span><br><span class="line"><span class="string">    goal:       The game ends and someone wins when this score is reached.</span></span><br><span class="line"><span class="string">    say:        The commentary function to call at the end of the first turn.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    who = <span class="number">0</span>  <span class="comment"># Who is about to take a turn, 0 (first) or 1 (second)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> score0&lt;goal <span class="keyword">and</span> score1&lt;goal:</span><br><span class="line">        <span class="keyword">if</span> next_player(who)==<span class="number">1</span>:</span><br><span class="line">            score0+=take_turn(strategy0(score0,score1), score1, dice, goal)</span><br><span class="line">            a=hog_pile(score0,score1)</span><br><span class="line">            score0+=a</span><br><span class="line">            who=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> next_player(who)==<span class="number">0</span>:</span><br><span class="line">            score1+=take_turn(strategy1(score1,score0),score0,dice,goal) <span class="comment">#这里如果继续的话可能会有score0&gt;goal而游戏还没停止，所以应该增加判断</span></span><br><span class="line">            b=hog_pile(score1,score0)</span><br><span class="line">            score1+=b</span><br><span class="line">            who=<span class="number">0</span></span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br><span class="line">    <span class="comment"># (note that the indentation for the problem 6 prompt (***YOUR CODE HERE***) might be misleading)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br><span class="line">    <span class="keyword">return</span> score0, score1</span><br></pre></td></tr></table></figure><h3 id="Phase-2：Commentary"><a href="#Phase-2：Commentary" class="headerlink" title="Phase 2：Commentary"></a>Phase 2：Commentary</h3><p>这个phase不重要吧，我就不改了（暴论</p><h4 id="Problem-6"><a href="#Problem-6" class="headerlink" title="Problem 6"></a>Problem 6</h4><p>比较简单，不知为何，-u环节我的line2过不了，总报not quite。</p><h4 id="Problem-7"><a href="#Problem-7" class="headerlink" title="Problem 7"></a>Problem 7</h4><p>…比较离谱</p><p><strong>to be debug</strong></p><p>执行了python3 hog_gui.py后发现bug：</p><ul><li><p>底下的文字不会消失，本应该报历史最大新增，但却报的是当前的points，如</p><blockquote><p>8 point(s)! That’s a record gain for Player 0! 8 point(s)! That’s a record gain for Player 1!</p></blockquote></li></ul><h3 id="Phase3：Strategies"><a href="#Phase3：Strategies" class="headerlink" title="Phase3：Strategies"></a>Phase3：Strategies</h3><h4 id="Problem-8"><a href="#Problem-8" class="headerlink" title="Problem 8"></a>Problem 8</h4><blockquote><p><strong>a new piece of Python syntax</strong></p><p>We would like to write a function that accepts an arbitrary number of arguments, and then calls another function using exactly those arguments. Here’s how it works.</p><p>Instead of listing formal parameters for a function, you can write <code>*args</code>, which represents all of the <strong>arg</strong>ument<strong>s</strong> that get passed into the function. We can then call another function with these same arguments by passing these <code>*args</code> into this other function. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">def</span> <span class="title function_">printed</span>(<span class="params">f</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_and_return</span>(<span class="params">*args</span>):</span><br><span class="line">         result=f(*args)</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&#x27;Result:&#x27;</span>,result)</span><br><span class="line">         <span class="keyword">return</span> result</span><br><span class="line">     <span class="keyword">return</span> print_and_return</span><br></pre></td></tr></table></figure></blockquote><p>简单的循环计算sum</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_averaged</span>(<span class="params">original_function, trials_count=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that returns the average value of ORIGINAL_FUNCTION</span></span><br><span class="line"><span class="string">    called TRIALS_COUNT times.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To implement this function, you will have to use *args syntax, a new Python</span></span><br><span class="line"><span class="string">    feature introduced in this project.  See the project description.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dice = make_test_dice(4, 2, 5, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice = make_averaged(roll_dice, 1000)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice(1, dice)</span></span><br><span class="line"><span class="string">    3.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">*args</span>):</span><br><span class="line">        dice_nums=<span class="number">1</span></span><br><span class="line">        <span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> dice_nums&lt;=trials_count:</span><br><span class="line">            <span class="built_in">sum</span>+=original_function(*args)</span><br><span class="line">            dice_nums+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>/trials_count</span><br><span class="line">    <span class="keyword">return</span> average</span><br><span class="line">    <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure><h4 id="Problem-9"><a href="#Problem-9" class="headerlink" title="Problem 9"></a>Problem 9</h4><p>注意调用含*args函数的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_scoring_num_rolls</span>(<span class="params">dice=six_sided, trials_count=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of dice (1 to 10) that gives the highest average turn score</span></span><br><span class="line"><span class="string">    by calling roll_dice with the provided DICE a total of TRIALS_COUNT times.</span></span><br><span class="line"><span class="string">    Assume that the dice always return positive outcomes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dice = make_test_dice(1, 6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_scoring_num_rolls(dice)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 9</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment">#要用到make_averaged和roll_dice(num_rolls,dice)</span></span><br><span class="line">    max_ave,num=<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    flag=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num&lt;=<span class="number">10</span>:</span><br><span class="line">        a=make_averaged(roll_dice,trials_count)</span><br><span class="line">        b=a(num,dice)</span><br><span class="line">        <span class="keyword">if</span> max_ave&lt;b:</span><br><span class="line">            max_ave=b</span><br><span class="line">            flag=num</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line">    <span class="comment"># END PROBLEM 9</span></span><br></pre></td></tr></table></figure><h4 id="Problem-10"><a href="#Problem-10" class="headerlink" title="Problem 10"></a>Problem 10</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">picky_piggy_strategy</span>(<span class="params">score, opponent_score, cutoff=<span class="number">8</span>, num_rolls=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;This strategy returns 0 dice if that gives at least CUTOFF points, and</span></span><br><span class="line"><span class="string">    returns NUM_ROLLS otherwise.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 10</span></span><br><span class="line">    <span class="keyword">if</span> picky_piggy(opponent_score)&gt;=cutoff:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num_rolls</span><br><span class="line">    <span class="comment"># END PROBLEM 10</span></span><br></pre></td></tr></table></figure><h4 id="Problem-11"><a href="#Problem-11" class="headerlink" title="Problem 11"></a>Problem 11</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hog_pile_strategy</span>(<span class="params">score, opponent_score, cutoff=<span class="number">8</span>, num_rolls=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;This strategy returns 0 dice when this would result in Hog Pile taking</span></span><br><span class="line"><span class="string">    effect. It also returns 0 dice if it gives at least CUTOFF points.</span></span><br><span class="line"><span class="string">    Otherwise, it returns NUM_ROLLS.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 11</span></span><br><span class="line">    a=hog_pile(score+picky_piggy(opponent_score),opponent_score)</span><br><span class="line">    <span class="keyword">if</span> a!=<span class="number">0</span>:  <span class="comment">#触发了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> picky_piggy(opponent_score)&gt;=cutoff:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num_rolls</span><br><span class="line">    <span class="comment"># END PROBLEM 11</span></span><br></pre></td></tr></table></figure><h3 id="Some-feelings-when-finishing-the-project"><a href="#Some-feelings-when-finishing-the-project" class="headerlink" title="Some feelings when finishing the project"></a>Some feelings when finishing the project</h3><p>写的过程比较痛苦。</p><p>这个痛苦主要在于语言。毕竟是第一次做project，还是全英文，有好几处都不能理解，还好有部分cases来帮助我理解这个函数的作用。</p><p>写的过程有部分借鉴，但95%均为本人完成（有的看上去就写的很烂的代码除了你还有谁会写出来啊喂</p><p>写完的成就感还是很高的，高于写的过程中感受到的痛苦。</p><p>喜欢这种一个problem一个problem给我让我完成的，等我一步步写完后发现，我居然也能写个小游戏出来了（x</p><p>课程本身帮你写好了GUI，代码每完成一部分，就可以执行python3 hog_gui.py来试试功能。</p><p>挺好的，我就喜欢这种一看就知道重点在哪的project。</p><h2 id="HW-02-Higher-Order-Functions"><a href="#HW-02-Higher-Order-Functions" class="headerlink" title="HW 02: Higher-Order Functions"></a>HW 02: Higher-Order Functions</h2><h3 id="Required-questions"><a href="#Required-questions" class="headerlink" title="Required questions"></a>Required questions</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul</span><br><span class="line"></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line">identity = <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line">triple = <span class="keyword">lambda</span> x: <span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Q1：Product"><a href="#Q1：Product" class="headerlink" title="Q1：Product"></a>Q1：Product</h3><p>The <code>summation(n, term)</code> function from the higher-order functions lecture adds up <code>term(1) + ... + term(n)</code>. Write a similar function called <code>product</code> that returns <code>term(1) * ... * term(n)</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the product of the first n terms in a sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n: a positive integer</span></span><br><span class="line"><span class="string">    term:  a function that takes one argument to produce the term</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, identity)  # 1 * 2 * 3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, identity)  # 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, square)    # 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span><br><span class="line"><span class="string">    14400</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, increment) # (1+1) * (2+1) * (3+1)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, triple)    # 1*3 * 2*3 * 3*3</span></span><br><span class="line"><span class="string">    162</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">n, term</span>):</span><br><span class="line">    a,pro=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a&lt;=n:</span><br><span class="line">        pro*=term(a)</span><br><span class="line">        a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pro</span><br></pre></td></tr></table></figure><h3 id="Q2：Accumulate"><a href="#Q2：Accumulate" class="headerlink" title="Q2：Accumulate"></a>Q2：Accumulate</h3><p>Let’s take a look at how <code>summation</code> and <code>product</code> are instances of a more general function called <code>accumulate</code>, which we would like to implement:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">merger, base, n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the result of merging the first n terms in a sequence and base.</span></span><br><span class="line"><span class="string">    The terms to be merged are term(1), term(2), ..., term(n). merger is a</span></span><br><span class="line"><span class="string">    two-argument commutative function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    26</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 0, identity) # 11</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: x + y + 1, 2, 3, square)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ((2 * 1^2 * 2) * 2^2 * 2) * 3^2 * 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: 2 * x * y, 2, 3, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: (x + y) % 17, 19, 20, square)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>After implementing <code>accumulate</code>, show how <code>summation</code> and <code>product</code> can both be defined as function calls to <code>accumulate</code>.</p><p><strong>Important:</strong> You should have a single line of code (which should be a <code>return</code> statement) in each of your implementations for <code>summation_using_accumulate</code> and <code>product_using_accumulate</code>, which the syntax check will check for.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">summation_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the sum: term(1) + ... + term(n), using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, square)</span></span><br><span class="line"><span class="string">    55</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, triple)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the product: term(1) * ... * term(n), using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(4, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(6, triple)</span></span><br><span class="line"><span class="string">    524880</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">merger, base, n, term</span>):</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a&lt;=n:</span><br><span class="line">         base=merger(base,term(a))</span><br><span class="line">         a+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> base</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summation_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(add,<span class="number">1</span>,n,term)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="keyword">return</span> accumulate(mul,<span class="number">1</span>,n,term)</span><br></pre></td></tr></table></figure><p>一点点感触：果然简洁的才是最美的</p><h3 id="Q3：Church-numerals（just-for-fun-question"><a href="#Q3：Church-numerals（just-for-fun-question" class="headerlink" title="Q3：Church numerals（just for fun question)"></a>Q3：Church numerals（just for fun question)</h3><blockquote><p>This question is out of scope for 61A. You can try it if you want an extra challenge, but it’s just a puzzle that is not required or recommended at all. <strong>Almost all students will skip it, and that’s fine.</strong></p></blockquote><p>to be debug…</p><h2 id="Lab2：Higher-Order-Functions，Lambda-Expressions"><a href="#Lab2：Higher-Order-Functions，Lambda-Expressions" class="headerlink" title="Lab2：Higher-Order Functions，Lambda Expressions"></a>Lab2：Higher-Order Functions，Lambda Expressions</h2><h3 id="Q3：Lambdas-and-Currying"><a href="#Q3：Lambdas-and-Currying" class="headerlink" title="Q3：Lambdas and Currying"></a>Q3：Lambdas and Currying</h3><p>We can transform multiple-argument functions into a chain of single-argument, higher order functions by taking advantage of lambda expressions. For example, we can write a function <code>f(x, y)</code> as a different function <code>g(x)(y)</code>. This is known as <strong>currying</strong>. It’s useful when dealing with functions that take only single-argument functions. We will see some examples of these later on.</p><p>Write a function <code>lambda_curry2</code> that will curry any two argument function using lambdas. Refer to the <a href="http://composingprograms.com/pages/16-higher-order-functions.html#currying">textbook</a> for more details about currying.</p><p><strong>Your solution to this problem should fit entirely on the return line.</strong> You can try first writing a solution without the restriction, and then rewriting it into one line after.</p><blockquote><p><strong>If the syntax check isn’t passing:</strong> Make sure you’ve removed the line containing <code>&quot;***YOUR CODE HERE***&quot;</code> so that it doesn’t get treated as part of the function for the syntax check.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_curry2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns a Curried version of a two-argument function FUNC.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from operator import add, mul, mod</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; curried_add = lambda_curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = curried_add(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; curried_mul = lambda_curry2(mul)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_5 = curried_mul(5)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_5(42)</span></span><br><span class="line"><span class="string">    210</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lambda_curry2(mod)(123)(10)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> ______</span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q lambda_curry2</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_curry2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x:<span class="keyword">lambda</span> y:func(x,y)</span><br></pre></td></tr></table></figure><h3 id="Q4：Count-van-Count"><a href="#Q4：Count-van-Count" class="headerlink" title="Q4：Count van Count"></a>Q4：Count van Count</h3><p>Consider the following implementations of <code>count_factors</code> and <code>count_primes</code>:</p><p>The implementations look quite similar! Generalize this logic by writing a function <code>count_cond</code>, which takes in a two-argument predicate function <code>condition(n, i)</code>. <code>count_cond</code> returns a one-argument function that takes in <code>n</code>, which counts all the numbers from 1 to <code>n</code> that satisfy <code>condition</code> when called.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_cond</span>(<span class="params">condition</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function with one parameter N that counts all the numbers from</span></span><br><span class="line"><span class="string">    1 to N that satisfy the two-argument predicate function Condition, where</span></span><br><span class="line"><span class="string">    the first argument for Condition is N and the second argument is the</span></span><br><span class="line"><span class="string">    number from 1 to N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors = count_cond(lambda n, i: n % i == 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(2)   # 1, 2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(4)   # 1, 2, 4</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(12)  # 1, 2, 3, 4, 6, 12</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime = lambda n, i: count_factors(i) == 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes = count_cond(is_prime)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(2)    # 2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(3)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(4)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(5)    # 2, 3, 5</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(20)   # 2, 3, 5, 7, 11, 13, 17, 19</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q count_cond</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_cond</span>(<span class="params">condition</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count_func</span>(<span class="params">n</span>):</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=n:</span><br><span class="line">            <span class="keyword">if</span> condition(n,i):</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> count_func</span><br></pre></td></tr></table></figure><h3 id="Q7：Composite-Identity-Function"><a href="#Q7：Composite-Identity-Function" class="headerlink" title="Q7：Composite Identity Function"></a>Q7：Composite Identity Function</h3><p>optional</p><p>Write a function that takes in two single-argument functions, <code>f</code> and <code>g</code>, and returns another <strong>function</strong> that has a single parameter <code>x</code>. The returned function should return <code>True</code> if <code>f(g(x))</code> is equal to <code>g(f(x))</code>. You can assume the output of <code>g(x)</code> is a valid input for <code>f</code> and vice versa. Try to use the <code>composer</code> function defined below for more HOF practice.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">composer</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the composition function which given x, computes f(g(x)).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1 = composer(square, add_one)   # (x + 1)^2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1(4)</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_three = lambda x: x * 3      # multiplies 3 to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2 = composer(mul_three, a1)    # ((x + 1)^2) * 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(4)</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(5)</span></span><br><span class="line"><span class="string">    108</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">composite_identity</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a function with one parameter x that returns True if f(g(x)) is</span></span><br><span class="line"><span class="string">    equal to g(f(x)). You can assume the result of g(x) is a valid input for f</span></span><br><span class="line"><span class="string">    and vice versa.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1 = composite_identity(square, add_one)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(0)                            # (0 + 1)^2 == 0^2 + 1</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(4)                            # (4 + 1)^2 != 4^2 + 1</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q composite_identity</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">composite_identity</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">judge</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> composer(f,g)(x)==composer(g,f)(x):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> judge</span><br></pre></td></tr></table></figure><h3 id="Q8：I-Heard-You-Liked-Functions…"><a href="#Q8：I-Heard-You-Liked-Functions…" class="headerlink" title="Q8：I Heard You Liked Functions…"></a>Q8：I Heard You Liked Functions…</h3><p>optional</p><p>Define a function <code>cycle</code> that takes in three functions <code>f1</code>, <code>f2</code>, <code>f3</code>, as arguments. <code>cycle</code> will return another function that should take in an integer argument <code>n</code> and return another function. That final function should take in an argument <code>x</code> and cycle through applying <code>f1</code>, <code>f2</code>, and <code>f3</code> to <code>x</code>, depending on what <code>n</code> was. Here’s what the final function should do to <code>x</code> for a few values of <code>n</code>:</p><ul><li><code>n = 0</code>, return <code>x</code></li><li><code>n = 1</code>, apply <code>f1</code> to <code>x</code>, or return <code>f1(x)</code></li><li><code>n = 2</code>, apply <code>f1</code> to <code>x</code> and then <code>f2</code> to the result of that, or return <code>f2(f1(x))</code></li><li><code>n = 3</code>, apply <code>f1</code> to <code>x</code>, <code>f2</code> to the result of applying <code>f1</code>, and then <code>f3</code> to the result of applying <code>f2</code>, or <code>f3(f2(f1(x)))</code></li><li><code>n = 4</code>, start the cycle again applying <code>f1</code>, then <code>f2</code>, then <code>f3</code>, then <code>f1</code> again, or <code>f1(f3(f2(f1(x))))</code></li><li>And so forth.</li></ul><p><em>Hint</em>: most of the work goes inside the most nested function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cycle</span>(<span class="params">f1, f2, f3</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function that is itself a higher-order function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add1(x):</span></span><br><span class="line"><span class="string">    ...     return x + 1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def times2(x):</span></span><br><span class="line"><span class="string">    ...     return x * 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add3(x):</span></span><br><span class="line"><span class="string">    ...     return x + 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_cycle = cycle(add1, times2, add3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity = my_cycle(0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity(5)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double = my_cycle(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double(1)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions = my_cycle(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions(2)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle = my_cycle(4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle(2)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles = my_cycle(6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles(1)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q cycle</span><br></pre></td></tr></table></figure><p><strong>my answer：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cycle</span>(<span class="params">f1, f2, f3</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func2</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x</span>):</span><br><span class="line">                <span class="keyword">return</span> f1(x)</span><br><span class="line">            <span class="keyword">return</span> f2(f1(x))</span><br><span class="line">        <span class="keyword">return</span> f3(f2(f1(x)))</span><br><span class="line">    <span class="keyword">return</span> func1</span><br></pre></td></tr></table></figure><h2 id="Disc-2：Higher-Order-Functions，Self-Reference"><a href="#Disc-2：Higher-Order-Functions，Self-Reference" class="headerlink" title="Disc 2：Higher-Order Functions，Self Reference"></a>Disc 2：Higher-Order Functions，Self Reference</h2><h3 id="Q1：Make-Keeper"><a href="#Q1：Make-Keeper" class="headerlink" title="Q1：Make Keeper"></a>Q1：Make Keeper</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_keeper</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function which takes one parameter cond and prints</span></span><br><span class="line"><span class="string">    out all integers 1..i..n where calling cond(i) returns True.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def is_even(x):</span></span><br><span class="line"><span class="string">    ...     # Even numbers have remainder 0 when divided by 2.</span></span><br><span class="line"><span class="string">    ...     return x % 2 == 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_keeper(5)(is_even)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">cond</span>):</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=n:</span><br><span class="line">            <span class="keyword">if</span> cond(i):</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> func</span><br></pre></td></tr></table></figure><h3 id="Q5：Print-N"><a href="#Q5：Print-N" class="headerlink" title="Q5：Print N"></a>Q5：Print N</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_n</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = print_n(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = f(&quot;hi&quot;)</span></span><br><span class="line"><span class="string">    hi</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = f(&quot;hello&quot;)</span></span><br><span class="line"><span class="string">    hello</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f = f(&quot;bye&quot;)</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g = print_n(1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; g(&quot;first&quot;)(&quot;second&quot;)(&quot;third&quot;)</span></span><br><span class="line"><span class="string">    first</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">    &lt;function inner_print&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_print</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> n&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="keyword">return</span> print_n(n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> inner_print</span><br></pre></td></tr></table></figure><h3 id="Q8：Match-Maker"><a href="#Q8：Match-Maker" class="headerlink" title="Q8：Match Maker"></a>Q8：Match Maker</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">match_k</span>(<span class="params">k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return a function that checks if digits k apart match</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(2)(1010)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(2)(2010)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(1)(1010)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(1)(1)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(1)(2111111111111111)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(3)(123123)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match_k(2)(123123)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> x!=<span class="number">0</span> <span class="keyword">and</span> x//(<span class="number">10</span>**k)!=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x%<span class="number">10</span>==x//(<span class="number">10</span>**k)%<span class="number">10</span>:</span><br><span class="line">                x=x//<span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> func</span><br></pre></td></tr></table></figure><h3 id="Q9：Three-Memory-amp-Q10：Natural-Chain"><a href="#Q9：Three-Memory-amp-Q10：Natural-Chain" class="headerlink" title="Q9：Three Memory &amp; Q10：Natural Chain"></a>Q9：Three Memory &amp; Q10：Natural Chain</h3><p>咕了…</p><p>等能力再强点再来补坑吧</p><h2 id="Lab-3：Midterm-Review"><a href="#Lab-3：Midterm-Review" class="headerlink" title="Lab 3：Midterm Review"></a>Lab 3：Midterm Review</h2><h3 id="Q1：Unique-Digits"><a href="#Q1：Unique-Digits" class="headerlink" title="Q1：Unique Digits"></a>Q1：Unique Digits</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unique_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of unique digits in positive integer n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(8675309) # All are unique</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(1313131) # 1 and 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(13173131) # 1, 3, and 7</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(10000) # 0 and 1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(101) # 0 and 1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; unique_digits(10) # 0 and 1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">if</span> has_digit(n,i):</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_digit</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns whether K is a digit in N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_digit(10, 1)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_digit(12, 7)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">10</span>==k:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=n//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="Q2：Ordered-Digits"><a href="#Q2：Ordered-Digits" class="headerlink" title="Q2：Ordered Digits"></a>Q2：Ordered Digits</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ordered_digits</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return True if the (base 10) digits of X&gt;0 are in non-decreasing</span></span><br><span class="line"><span class="string">    order, and False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(5)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(11)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(127)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(1357)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ordered_digits(21)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = ordered_digits(1375) # Return, don&#x27;t print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    vis=x%<span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span> x!=<span class="number">0</span>:</span><br><span class="line">        x=x//<span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> vis&gt;=x%<span class="number">10</span>:</span><br><span class="line">            vis=x%<span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="Q3：K-Runner"><a href="#Q3：K-Runner" class="headerlink" title="Q3：K Runner"></a>Q3：K Runner</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_k_run_starter</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 0) # example from description</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 1)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 2)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123444345, 3)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(123412341234, 1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(1234234534564567, 0)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(1234234534564567, 1)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_k_run_starter(1234234534564567, 2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    final = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;=k:</span><br><span class="line">        <span class="keyword">while</span> n%<span class="number">10</span>&gt;(n//<span class="number">10</span>)%<span class="number">10</span> <span class="keyword">and</span> n//<span class="number">10</span>!=<span class="number">0</span>:</span><br><span class="line">            n=n//<span class="number">10</span></span><br><span class="line">        final = n%<span class="number">10</span></span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        n = n//<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure><h3 id="Q4：Make-Repeater"><a href="#Q4：Make-Repeater" class="headerlink" title="Q4：Make Repeater"></a>Q4：Make Repeater</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_repeater</span>(<span class="params">func, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_repeater(increment, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1</span></span><br><span class="line"><span class="string">    243</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 2)(5) # square(square(5))</span></span><br><span class="line"><span class="string">    625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 4)(5) # square(square(square(square(5))))</span></span><br><span class="line"><span class="string">    152587890625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 0)(5) # Yes, it makes sense to apply the function zero times!</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func_n</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> func(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i,final_func=<span class="number">2</span>,composer(func,func)</span><br><span class="line">            <span class="keyword">while</span> i&lt;n:</span><br><span class="line">                final_func=composer(func,final_func)</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> final_func(x)</span><br><span class="line">    <span class="keyword">return</span> func_n</span><br></pre></td></tr></table></figure><h3 id="Q5：Apply-Twice"><a href="#Q5：Apply-Twice" class="headerlink" title="Q5：Apply Twice"></a>Q5：Apply Twice</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">apply_twice</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Return a function that applies func twice.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    func -- a function that takes one argument</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; apply_twice(square)(2)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> make_repeater(func,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q8-Protected-Secret"><a href="#Q8-Protected-Secret" class="headerlink" title="Q8 Protected Secret"></a>Q8 Protected Secret</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">protected_secret</span>(<span class="params">password, secret, num_attempts</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns a function which takes in a password and prints the SECRET if the password entered matches</span></span><br><span class="line"><span class="string">    the PASSWORD given to protected_secret. Otherwise it prints &quot;INCORRECT PASSWORD&quot;. After NUM_ATTEMPTS</span></span><br><span class="line"><span class="string">    incorrect passwords are entered, the secret is locked and the function should print &quot;SECRET LOCKED&quot;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = protected_secret(&quot;correcthorsebatterystaple&quot;, &quot;I love UCB&quot;, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;hax0r_1&quot;) # 2 attempts left</span></span><br><span class="line"><span class="string">    INCORRECT PASSWORD</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;correcthorsebatterystaple&quot;)</span></span><br><span class="line"><span class="string">    I love UCB</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;hax0r_2&quot;) # 1 attempt left</span></span><br><span class="line"><span class="string">    INCORRECT PASSWORD</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;hax0r_3&quot;) # No attempts left</span></span><br><span class="line"><span class="string">    SECRET LOCKED</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_secret = my_secret(&quot;correcthorsebatterystaple&quot;)</span></span><br><span class="line"><span class="string">    SECRET LOCKED</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_secret</span>(<span class="params">password_attempt</span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> num_attempts&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> password_attempt==password:</span><br><span class="line">                <span class="built_in">print</span>(secret)</span><br><span class="line">                <span class="keyword">return</span> get_secret</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;INCORRECT PASSWORD&quot;</span>)</span><br><span class="line">                num=num_attempts-<span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> protected_secret(password,secret,num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;SECRET LOCKED&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> get_secret</span><br><span class="line">    <span class="keyword">return</span> get_secret</span><br></pre></td></tr></table></figure><h2 id="Disc-3：Recursive"><a href="#Disc-3：Recursive" class="headerlink" title="Disc 3：Recursive"></a>Disc 3：Recursive</h2><h3 id="Q1：Warm-Up：Recursive-Multiplication"><a href="#Q1：Warm-Up：Recursive-Multiplication" class="headerlink" title="Q1：Warm Up：Recursive Multiplication"></a>Q1：Warm Up：Recursive Multiplication</h3><blockquote><p>Hint:5*3&#x3D;5+(5*2)&#x3D;5+5+(5*1)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Takes two positive integers and returns their product using recursion.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(5, 3)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> m+multiply(m,n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：Is-Prime"><a href="#Q4：Is-Prime" class="headerlink" title="Q4：Is Prime"></a>Q4：Is Prime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if n is a prime number and False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(16)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(521)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">if</span> x==n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n%x==<span class="number">0</span> <span class="keyword">or</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> x==n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> helper(x+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q5：Recursive-Hailstone"><a href="#Q5：Recursive-Hailstone" class="headerlink" title="Q5：Recursive Hailstone"></a>Q5：Recursive Hailstone</h3><p>fail to return the number of elements in the wequence…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print out the hailstone sequence starting at n, and return the number of elements in the sequence.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">and</span> n!=<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">return</span> hailstone(n//<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> n%<span class="number">2</span>!=<span class="number">0</span> <span class="keyword">and</span> n!=<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">return</span> hailstone(n*<span class="number">3</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">return</span> count_num(n)</span><br></pre></td></tr></table></figure><h3 id="Q6：Merge-Numbers"><a href="#Q6：Merge-Numbers" class="headerlink" title="Q6：Merge Numbers"></a>Q6：Merge Numbers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">n1, n2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Merges two numbers by digit in decreasing order</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(31, 42)</span></span><br><span class="line"><span class="string">    4321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(21, 0)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge (21, 31) </span></span><br><span class="line"><span class="string">    3211</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n1==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n2</span><br><span class="line">    <span class="keyword">elif</span> n2==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n1</span><br><span class="line">    <span class="keyword">elif</span> n1%<span class="number">10</span>&gt;n2%<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> merge(n1,n2//<span class="number">10</span>)*<span class="number">10</span>+n2%<span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> merge(n1//<span class="number">10</span>,n2)*<span class="number">10</span>+n1%<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="HW03：Recursion，Tree-Recursion"><a href="#HW03：Recursion，Tree-Recursion" class="headerlink" title="HW03：Recursion，Tree Recursion"></a>HW03：Recursion，Tree Recursion</h2><h3 id="Q1：Num-eights"><a href="#Q1：Num-eights" class="headerlink" title="Q1：Num eights"></a>Q1：Num eights</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">num_eights</span>(<span class="params">pos</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of times 8 appears as a digit of pos.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(3)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(8)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(88888888)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(2638)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(86380)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(12345)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban all assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;num_eights&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Assign&#x27;, &#x27;AnnAssign&#x27;, &#x27;AugAssign&#x27;, &#x27;NamedExpr&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pos//<span class="number">10</span>!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> pos%<span class="number">10</span>==<span class="number">8</span>:</span><br><span class="line">            <span class="keyword">return</span> num_eights(pos//<span class="number">10</span>)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> num_eights(pos//<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> pos%<span class="number">10</span>==<span class="number">8</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Q2：Ping-pong"><a href="#Q2：Ping-pong" class="headerlink" title="Q2：Ping-pong"></a>Q2：Ping-pong</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pingpong</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the nth element of the ping-pong sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(8)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(10)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(15)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(21)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(22)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(30)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(68)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(69)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(80)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(81)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(82)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(100)</span></span><br><span class="line"><span class="string">    -6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;pingpong&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Assign&#x27;, &#x27;AnnAssign&#x27;, &#x27;AugAssign&#x27;, &#x27;NamedExpr&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">current,count,up</span>):</span><br><span class="line">        <span class="keyword">if</span> n==count:</span><br><span class="line">            <span class="keyword">return</span> current</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> (count+<span class="number">1</span>)%<span class="number">8</span>==<span class="number">0</span> <span class="keyword">or</span> num_eights(count+<span class="number">1</span>)&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> up:</span><br><span class="line">                    <span class="keyword">return</span> helper(current+<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> helper(current-<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> up:</span><br><span class="line">                    <span class="keyword">return</span> helper(current+<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> helper(current-<span class="number">1</span>,count+<span class="number">1</span>,<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>,<span class="number">0</span>,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="Q3：Missing-Digits"><a href="#Q3：Missing-Digits" class="headerlink" title="Q3：Missing Digits"></a>Q3：Missing Digits</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">missing_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given a number a that is in sorted, non-decreasing order,</span></span><br><span class="line"><span class="string">    return the number of missing digits in n. A missing digit is</span></span><br><span class="line"><span class="string">    a number between the first and last digit of a that is not in n.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1248) # 3, 5, 6, 7</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(19) # 2, 3, 4, 5, 6, 7, 8</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1122) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(123456) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(3558) # 4, 6, 7</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(35578) # 4, 6</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(12456) # 3</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(16789) # 2, 3, 4, 5</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(4) # No missing numbers between 4 and 4</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban while or for loops</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;missing_digits&#x27;, [&#x27;While&#x27;, &#x27;For&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n//<span class="number">10</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n%<span class="number">10</span>&gt;n//<span class="number">10</span>%<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> missing_digits(n//<span class="number">10</span>)+n%<span class="number">10</span>-n//<span class="number">10</span>%<span class="number">10</span>-<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n%<span class="number">10</span>==n//<span class="number">10</span>%<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> missing_digits(n//<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：Count-coins（to-be-continued"><a href="#Q4：Count-coins（to-be-continued" class="headerlink" title="Q4：Count coins（to be continued"></a>Q4：Count coins（to be continued</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>跳过…</p><p>待填坑</p><h2 id="Lab-4：Recursion，Tree-Recursion，Python-Lists"><a href="#Lab-4：Recursion，Tree-Recursion，Python-Lists" class="headerlink" title="Lab 4：Recursion，Tree Recursion，Python Lists"></a>Lab 4：Recursion，Tree Recursion，Python Lists</h2><h3 id="Q2：Summation"><a href="#Q2：Summation" class="headerlink" title="Q2：Summation"></a>Q2：Summation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">summation</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of numbers 1 through n (including n) wíth term applied to each number.</span></span><br><span class="line"><span class="string">    Implement using recursion!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, lambda x: x * x * x) # 1^3 + 2^3 + 3^3 + 4^3 + 5^3</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(9, lambda x: x + 1) # 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10</span></span><br><span class="line"><span class="string">    54</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, lambda x: 2**x) # 2^1 + 2^2 + 2^3 + 2^4 + 2^5</span></span><br><span class="line"><span class="string">    62</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # Do not use while/for loops!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;summation&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;While&#x27;, &#x27;For&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> n &gt;= <span class="number">1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> term(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> summation(n-<span class="number">1</span>,term)+term(n)</span><br></pre></td></tr></table></figure><h3 id="Q3：Pascal’s-Triangle"><a href="#Q3：Pascal’s-Triangle" class="headerlink" title="Q3：Pascal’s Triangle"></a>Q3：Pascal’s Triangle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pascal</span>(<span class="params">row, column</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the value of the item in Pascal&#x27;s Triangle </span></span><br><span class="line"><span class="string">    whose position is specified by row and column.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(0, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(0, 5)# Empty entry; outside of Pascal&#x27;s Triangle</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(3, 2)# Row 3 (1 3 3 1), Column 2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> column&gt;row:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> column==<span class="number">0</span> <span class="keyword">or</span> row==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pascal(row-<span class="number">1</span>,column-<span class="number">1</span>)+pascal(row-<span class="number">1</span>,column)</span><br></pre></td></tr></table></figure><h3 id="Q4：Insect-Combinatorics"><a href="#Q4：Insect-Combinatorics" class="headerlink" title="Q4：Insect Combinatorics"></a>Q4：Insect Combinatorics</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">paths</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of paths from one corner of an</span></span><br><span class="line"><span class="string">    M by N grid to the opposite corner.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(2, 2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(5, 7)</span></span><br><span class="line"><span class="string">    210</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(117, 1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; paths(1, 157)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> m==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> paths(m-<span class="number">1</span>,n)+paths(m,n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Q5：Couple"><a href="#Q5：Couple" class="headerlink" title="Q5：Couple"></a>Q5：Couple</h3><p>…感觉自己真傻</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">couple</span>(<span class="params">s, t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of two-element lists in which the i-th element is [s[i], t[i]].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = [4, 5, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; couple(a, b)</span></span><br><span class="line"><span class="string">    [[1, 4], [2, 5], [3, 6]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = [&#x27;c&#x27;, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d = [&#x27;s&#x27;, &#x27;1&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; couple(c, d)</span></span><br><span class="line"><span class="string">    [[&#x27;c&#x27;, &#x27;s&#x27;], [6, &#x27;1&#x27;]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="built_in">len</span>(t)</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [[s[i],t[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s))]</span><br></pre></td></tr></table></figure><h3 id="Q6：Coordinates"><a href="#Q6：Coordinates" class="headerlink" title="Q6：Coordinates"></a>Q6：Coordinates</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">coords</span>(<span class="params">fn, seq, lower, upper</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seq = [-4, -2, 0, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fn = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; coords(fn, seq, 1, 9)</span></span><br><span class="line"><span class="string">    [[-2, 4], [1, 1], [3, 9]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [[x,fn(x)] <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> fn(x)&gt;=lower <span class="keyword">and</span> fn(x)&lt;=upper]</span><br></pre></td></tr></table></figure><h3 id="Q7：Riffle-Shuffle"><a href="#Q7：Riffle-Shuffle" class="headerlink" title="Q7：Riffle Shuffle"></a>Q7：Riffle Shuffle</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">riffle</span>(<span class="params">deck</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Produces a single, perfect riffle shuffle of DECK, consisting of</span></span><br><span class="line"><span class="string">    DECK[0], DECK[M], DECK[1], DECK[M+1], ... where M is position of the</span></span><br><span class="line"><span class="string">    second half of the deck.  Assume that len(DECK) is even.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; riffle([3, 4, 5, 6])</span></span><br><span class="line"><span class="string">    [3, 5, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; riffle(range(20))</span></span><br><span class="line"><span class="string">    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [deck[i//<span class="number">2</span>+(<span class="built_in">len</span>(deck)//<span class="number">2</span>)*(i%<span class="number">2</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(deck))]</span><br></pre></td></tr></table></figure><h2 id="Disc-4：Tree-Recursion，Python-Lists"><a href="#Disc-4：Tree-Recursion，Python-Lists" class="headerlink" title="Disc 4：Tree Recursion，Python Lists"></a>Disc 4：Tree Recursion，Python Lists</h2><h3 id="Q1：Count-Stair-Ways"><a href="#Q1：Count-Stair-Ways" class="headerlink" title="Q1：Count Stair Ways"></a>Q1：Count Stair Ways</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_stair_ways</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of ways to climb up a flight of</span></span><br><span class="line"><span class="string">    n stairs, moving either 1 step or 2 steps at a time.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_stair_ways(4)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> count_stair_ways(n-<span class="number">1</span>)+count_stair_ways(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q2：Count-K"><a href="#Q2：Count-K" class="headerlink" title="Q2：Count K"></a>Q2：Count K</h3><p>呜呜真的不会写这类题目，说我递归次数太多了…</p><p>算了算了，先放着吧x</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_k</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Counts the number of paths up a flight of n stairs</span></span><br><span class="line"><span class="string">    when taking up to and including k steps at a time.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(3, 3) # 3, 2 + 1, 1 + 2, 1 + 1 + 1</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(4, 4)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(10, 3)</span></span><br><span class="line"><span class="string">    274</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_k(300, 1) # Only one step at a time</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i,<span class="built_in">sum</span>=<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>  i&lt;=k:</span><br><span class="line">            <span class="built_in">sum</span>+=count_k(n-i,k)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><h3 id="Q5：Max-Product"><a href="#Q5：Max-Product" class="headerlink" title="Q5：Max Product"></a>Q5：Max Product</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_product</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the maximum product that can be formed using</span></span><br><span class="line"><span class="string">    non-consecutive elements of s.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([10,3,1,9,2]) # 10 * 9</span></span><br><span class="line"><span class="string">    90</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([5,10,5,10,5]) # 5 * 5 * 5</span></span><br><span class="line"><span class="string">    125</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_product([])</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> s==[]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(max_product(s[<span class="number">1</span>:]),s[<span class="number">0</span>]*max_product(s[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h2 id="Project-2：CS61A-Autocorrected-Typing-Software——Cats"><a href="#Project-2：CS61A-Autocorrected-Typing-Software——Cats" class="headerlink" title="Project 2：CS61A Autocorrected Typing Software——Cats"></a>Project 2：CS61A Autocorrected Typing Software——Cats</h2><h3 id="Phase-1：Typing"><a href="#Phase-1：Typing" class="headerlink" title="Phase 1：Typing"></a>Phase 1：Typing</h3><h4 id="Problem-1-1"><a href="#Problem-1-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choose</span>(<span class="params">paragraphs, select, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Kth paragraph from PARAGRAPHS for which SELECT called on the</span></span><br><span class="line"><span class="string">    paragraph returns True. If there are fewer than K such paragraphs, return</span></span><br><span class="line"><span class="string">    the empty string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        paragraphs: a list of strings</span></span><br><span class="line"><span class="string">        select: a function that returns True for paragraphs that can be selected</span></span><br><span class="line"><span class="string">        k: an integer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ps = [&#x27;hi&#x27;, &#x27;how are you&#x27;, &#x27;fine&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = lambda p: len(p) &lt;= 4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 0)</span></span><br><span class="line"><span class="string">    &#x27;hi&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 1)</span></span><br><span class="line"><span class="string">    &#x27;fine&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 2)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    store_list=[]</span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(paragraphs):</span><br><span class="line">        <span class="keyword">if</span> select(paragraphs[i]):</span><br><span class="line">            store_list.insert(j,paragraphs[i])</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k&gt;=j:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> store_list[k]</span><br><span class="line">    <span class="comment"># END PROBLEM 1</span></span><br></pre></td></tr></table></figure><h4 id="Problem-2-1"><a href="#Problem-2-1" class="headerlink" title="Problem 2"></a>Problem 2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">topic</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a select function that returns whether</span></span><br><span class="line"><span class="string">    a paragraph contains one of the words in TOPIC.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        topic: a list of words related to a subject</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; about_dogs = about([&#x27;dog&#x27;, &#x27;dogs&#x27;, &#x27;pup&#x27;, &#x27;puppy&#x27;])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose([&#x27;Cute Dog!&#x27;, &#x27;That is a cat.&#x27;, &#x27;Nice pup!&#x27;], about_dogs, 0)</span></span><br><span class="line"><span class="string">    &#x27;Cute Dog!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose([&#x27;Cute Dog!&#x27;, &#x27;That is a cat.&#x27;, &#x27;Nice pup.&#x27;], about_dogs, 1)</span></span><br><span class="line"><span class="string">    &#x27;Nice pup.&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([lower(x) == x <span class="keyword">for</span> x <span class="keyword">in</span> topic]), <span class="string">&#x27;topics should be lowercase.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sel</span>(<span class="params">para</span>):</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        para=remove_punctuation(para)</span><br><span class="line">        para=lower(para)</span><br><span class="line">        para=split(para)</span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(para):</span><br><span class="line">            <span class="keyword">if</span> para[i] <span class="keyword">in</span> topic:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> sel</span><br><span class="line">    <span class="comment"># END PROBLEM 2</span></span><br></pre></td></tr></table></figure><h4 id="Problem-3-1"><a href="#Problem-3-1" class="headerlink" title="Problem 3"></a>Problem 3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">typed, reference</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the accuracy (percentage of words typed correctly) of TYPED</span></span><br><span class="line"><span class="string">    when compared to the prefix of REFERENCE that was typed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: a string that may contain typos</span></span><br><span class="line"><span class="string">        reference: a string without errors</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute Dog!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;A Cute Dog!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    0.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;cute Dog.&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute Dog. I say!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    100.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    0.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;&#x27;, &#x27;&#x27;)</span></span><br><span class="line"><span class="string">    100.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    typed_words = split(typed)</span><br><span class="line">    reference_words = split(reference)</span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> typed==<span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> reference==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">elif</span> typed==<span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> reference==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ty=split(typed)</span><br><span class="line">        ref=split(reference)</span><br><span class="line">        i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(ty)&lt;=<span class="built_in">len</span>(ref):</span><br><span class="line">            <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(ty):</span><br><span class="line">                <span class="keyword">if</span> ty[i]==ref[i]:</span><br><span class="line">                    count+=<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>*count/<span class="built_in">len</span>(ty)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(ref):</span><br><span class="line">                <span class="keyword">if</span> ty[i]==ref[i]:</span><br><span class="line">                    count+=<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>*count/<span class="built_in">len</span>(ty)</span><br><span class="line">    <span class="comment"># END PROBLEM 3</span></span><br></pre></td></tr></table></figure><h4 id="Problem-4-1"><a href="#Problem-4-1" class="headerlink" title="Problem 4"></a>Problem 4</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wpm</span>(<span class="params">typed, elapsed</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the words-per-minute (WPM) of the TYPED string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: an entered string</span></span><br><span class="line"><span class="string">        elapsed: an amount of time in seconds</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wpm(&#x27;hello friend hello buddy hello&#x27;, 15)</span></span><br><span class="line"><span class="string">    24.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wpm(&#x27;0123456789&#x27;,60)</span></span><br><span class="line"><span class="string">    2.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> elapsed &gt; <span class="number">0</span>, <span class="string">&#x27;Elapsed time must be positive&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 4</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    vis=<span class="built_in">len</span>(typed)/<span class="number">5</span></span><br><span class="line">    <span class="keyword">return</span> vis*<span class="number">60</span>/elapsed</span><br><span class="line">    <span class="comment"># END PROBLEM 4</span></span><br></pre></td></tr></table></figure><h3 id="Phase-2：Autocorrect"><a href="#Phase-2：Autocorrect" class="headerlink" title="Phase 2：Autocorrect"></a>Phase 2：Autocorrect</h3><h4 id="Problem-5-1"><a href="#Problem-5-1" class="headerlink" title="Problem 5"></a>Problem 5</h4><p>太ugly了我写的…</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">autocorrect</span>(<span class="params">typed_word, valid_words, diff_function, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the element of VALID_WORDS that has the smallest difference</span></span><br><span class="line"><span class="string">    from TYPED_WORD. Instead returns TYPED_WORD if that difference is greater</span></span><br><span class="line"><span class="string">    than LIMIT.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed_word: a string representing a word that may contain typos</span></span><br><span class="line"><span class="string">        valid_words: a list of strings representing valid words</span></span><br><span class="line"><span class="string">        diff_function: a function quantifying the difference between two words</span></span><br><span class="line"><span class="string">        limit: a number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ten_diff = lambda w1, w2, limit: 10 # Always returns 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; autocorrect(&quot;hwllo&quot;, [&quot;butter&quot;, &quot;hello&quot;, &quot;potato&quot;], ten_diff, 20)</span></span><br><span class="line"><span class="string">    &#x27;butter&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; first_diff = lambda w1, w2, limit: (1 if w1[0] != w2[0] else 0) # Checks for matching first char</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; autocorrect(&quot;tosting&quot;, [&quot;testing&quot;, &quot;asking&quot;, &quot;fasting&quot;], first_diff, 10)</span></span><br><span class="line"><span class="string">    &#x27;testing&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> typed_word <span class="keyword">in</span> valid_words:</span><br><span class="line">        <span class="keyword">return</span> typed_word</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        vis=limit+<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(valid_words):</span><br><span class="line">            a=diff_function(typed_word,valid_words[i],limit)</span><br><span class="line">            <span class="keyword">if</span> a&lt;vis:</span><br><span class="line">                vis=a</span><br><span class="line">                j=i</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> vis&lt;=limit:</span><br><span class="line">            <span class="keyword">return</span> valid_words[j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> typed_word</span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br></pre></td></tr></table></figure><p>嘛，google到了一种简单的方法：建立一个dictionary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">autocorrect</span>(<span class="params">user_word, valid_words, diff_function, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the element of VALID_WORDS that has the smallest difference</span></span><br><span class="line"><span class="string">    from USER_WORD. Instead returns USER_WORD if that difference is greater</span></span><br><span class="line"><span class="string">    than LIMIT.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> user_word <span class="keyword">in</span> valid_words:</span><br><span class="line">        <span class="keyword">return</span> user_word</span><br><span class="line">    <span class="comment"># Create dictionary with keys as iterables in valid_words list</span></span><br><span class="line">    <span class="comment"># and values as difference between them and user_word</span></span><br><span class="line">    d = &#123;v : diff_function(user_word, v, limit) <span class="keyword">for</span> v <span class="keyword">in</span> valid_words&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(d, key=d.get) <span class="keyword">if</span> <span class="built_in">min</span>(d.values()) &lt;= limit <span class="keyword">else</span> user_word</span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br></pre></td></tr></table></figure><h4 id="Problem-6-1"><a href="#Problem-6-1" class="headerlink" title="Problem 6"></a>Problem 6</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">feline_flips</span>(<span class="params">start, goal, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A diff function for autocorrect that determines how many letters</span></span><br><span class="line"><span class="string">    in START need to be substituted to create GOAL, then adds the difference in</span></span><br><span class="line"><span class="string">    their lengths and returns the result.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        start: a starting word</span></span><br><span class="line"><span class="string">        goal: a string representing a desired goal word</span></span><br><span class="line"><span class="string">        limit: a number representing an upper bound on the number of chars that must change</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;nice&quot;, &quot;rice&quot;, big_limit)    # Substitute: n -&gt; r</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;range&quot;, &quot;rungs&quot;, big_limit)  # Substitute: a -&gt; u, e -&gt; s</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;pill&quot;, &quot;pillage&quot;, big_limit) # Don&#x27;t substitute anything, length difference of 3.</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;roses&quot;, &quot;arose&quot;, big_limit)  # Substitute: r -&gt; a, o -&gt; r, s -&gt; o, e -&gt; s, s -&gt; e</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; feline_flips(&quot;rose&quot;, &quot;hello&quot;, big_limit)   # Substitute: r-&gt;h, o-&gt;e, s-&gt;l, e-&gt;l, length difference of 1.</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="keyword">if</span> limit&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(start)==<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(goal)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">len</span>(start)-<span class="built_in">len</span>(goal))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> start[<span class="number">0</span>]==goal[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> feline_flips(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> feline_flips(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit-<span class="number">1</span>)+<span class="number">1</span></span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br></pre></td></tr></table></figure><h4 id="Problem-7-1"><a href="#Problem-7-1" class="headerlink" title="Problem 7"></a>Problem 7</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minimum_mewtations</span>(<span class="params">start, goal, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A diff function that computes the edit distance from START to GOAL.</span></span><br><span class="line"><span class="string">    This function takes in a string START, a string GOAL, and a number LIMIT.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        start: a starting word</span></span><br><span class="line"><span class="string">        goal: a goal word</span></span><br><span class="line"><span class="string">        limit: a number representing an upper bound on the number of edits</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;cats&quot;, &quot;scat&quot;, big_limit)       # cats -&gt; scats -&gt; scat</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;purng&quot;, &quot;purring&quot;, big_limit)   # purng -&gt; purrng -&gt; purring</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;ckiteus&quot;, &quot;kittens&quot;, big_limit) # ckiteus -&gt; kiteus -&gt; kitteus -&gt; kittens</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> limit&lt;<span class="number">0</span>:  <span class="comment"># Fill in the condition</span></span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># END</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(start)==<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(goal)==<span class="number">0</span>:  <span class="comment"># Feel free to remove or add additional cases</span></span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">len</span>(start)-<span class="built_in">len</span>(goal))</span><br><span class="line">        <span class="comment"># END</span></span><br><span class="line">    <span class="keyword">elif</span> start[<span class="number">0</span>]==goal[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">return</span> minimum_mewtations(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        add = minimum_mewtations(start,goal[<span class="number">1</span>:],limit-<span class="number">1</span>)  <span class="comment"># Fill in these lines</span></span><br><span class="line">        remove = minimum_mewtations(start[<span class="number">1</span>:],goal,limit-<span class="number">1</span>)</span><br><span class="line">        substitute = minimum_mewtations(start[<span class="number">1</span>:],goal[<span class="number">1</span>:],limit-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(add,remove,substitute)+<span class="number">1</span></span><br><span class="line">        <span class="comment"># END</span></span><br></pre></td></tr></table></figure><h3 id="Phase-3：Multiplayer"><a href="#Phase-3：Multiplayer" class="headerlink" title="Phase 3：Multiplayer"></a>Phase 3：Multiplayer</h3><h4 id="Problem-8-1"><a href="#Problem-8-1" class="headerlink" title="Problem 8"></a>Problem 8</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">report_progress</span>(<span class="params">sofar, prompt, user_id, upload</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Upload a report of your id and progress so far to the multiplayer server.</span></span><br><span class="line"><span class="string">    Returns the progress so far.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        sofar: a list of the words input so far</span></span><br><span class="line"><span class="string">        prompt: a list of the words in the typing prompt</span></span><br><span class="line"><span class="string">        user_id: a number representing the id of the current user</span></span><br><span class="line"><span class="string">        upload: a function used to upload progress to the multiplayer server</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_progress = lambda d: print(&#x27;ID:&#x27;, d[&#x27;id&#x27;], &#x27;Progress:&#x27;, d[&#x27;progress&#x27;])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # The above function displays progress in the format ID: __, Progress: __</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_progress(&#123;&#x27;id&#x27;: 1, &#x27;progress&#x27;: 0.6&#125;)</span></span><br><span class="line"><span class="string">    ID: 1 Progress: 0.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sofar = [&#x27;how&#x27;, &#x27;are&#x27;, &#x27;you&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prompt = [&#x27;how&#x27;, &#x27;are&#x27;, &#x27;you&#x27;, &#x27;doing&#x27;, &#x27;today&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; report_progress(sofar, prompt, 2, print_progress)</span></span><br><span class="line"><span class="string">    ID: 2 Progress: 0.6</span></span><br><span class="line"><span class="string">    0.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; report_progress([&#x27;how&#x27;, &#x27;aree&#x27;], prompt, 3, print_progress)</span></span><br><span class="line"><span class="string">    ID: 3 Progress: 0.2</span></span><br><span class="line"><span class="string">    0.2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,j,count=<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(sofar) <span class="keyword">and</span> j&lt;<span class="built_in">len</span>(prompt):</span><br><span class="line">        <span class="keyword">if</span> sofar[i]==prompt[j]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    gress=count/<span class="built_in">len</span>(prompt)</span><br><span class="line">    d=&#123;<span class="string">&#x27;id&#x27;</span>:user_id,<span class="string">&#x27;progress&#x27;</span>:gress&#125;</span><br><span class="line">    upload(d)</span><br><span class="line">    <span class="keyword">return</span> gress</span><br><span class="line">    <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure><h4 id="Problem-9-1"><a href="#Problem-9-1" class="headerlink" title="Problem 9"></a>Problem 9</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">time_per_word</span>(<span class="params">words, times_per_player</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given timing data, return a match data abstraction, which contains a</span></span><br><span class="line"><span class="string">    list of words and the amount of time each player took to type each word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        words: a list of words, in the order they are typed.</span></span><br><span class="line"><span class="string">        times_per_player: A list of lists of timestamps including the time</span></span><br><span class="line"><span class="string">                          the player started typing, followed by the time</span></span><br><span class="line"><span class="string">                          the player finished typing each word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p = [[75, 81, 84, 90, 92], [19, 29, 35, 36, 38]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; match = time_per_word([&#x27;collar&#x27;, &#x27;plush&#x27;, &#x27;blush&#x27;, &#x27;repute&#x27;], p)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_words(match)</span></span><br><span class="line"><span class="string">    [&#x27;collar&#x27;, &#x27;plush&#x27;, &#x27;blush&#x27;, &#x27;repute&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_times(match)</span></span><br><span class="line"><span class="string">    [[6, 3, 6, 2], [10, 6, 1, 2]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 9</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    test=[]</span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(times_per_player):</span><br><span class="line">        p=times_per_player[i]</span><br><span class="line">        j=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;<span class="built_in">len</span>(p)-<span class="number">1</span>:</span><br><span class="line">            p[j]=p[j+<span class="number">1</span>]-p[j]</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        test.append(p[:<span class="built_in">len</span>(p)-<span class="number">1</span>])</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> match(words,test)</span><br><span class="line">    <span class="comment"># END PROBLEM 9</span></span><br></pre></td></tr></table></figure><h4 id="Problem-10-1"><a href="#Problem-10-1" class="headerlink" title="Problem 10"></a>Problem 10</h4><p>这个好难，参考了别人做的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fastest_words</span>(<span class="params">match</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of lists of which words each player typed fastest.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        match: a match data abstraction as returned by time_per_word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p0 = [5, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p1 = [4, 1, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fastest_words(match([&#x27;Just&#x27;, &#x27;have&#x27;, &#x27;fun&#x27;], [p0, p1]))</span></span><br><span class="line"><span class="string">    [[&#x27;have&#x27;, &#x27;fun&#x27;], [&#x27;Just&#x27;]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p0  # input lists should not be mutated</span></span><br><span class="line"><span class="string">    [5, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p1</span></span><br><span class="line"><span class="string">    [4, 1, 6]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    player_indices = <span class="built_in">range</span>(<span class="built_in">len</span>(get_times(match)))  <span class="comment"># contains an *index* for each player</span></span><br><span class="line">    word_indices = <span class="built_in">range</span>(<span class="built_in">len</span>(get_words(match)))    <span class="comment"># contains an *index* for each word</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 10</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    test=[[] <span class="keyword">for</span> k <span class="keyword">in</span> player_indices]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> word_indices:</span><br><span class="line">        times=[time(match,j,i) <span class="keyword">for</span> j <span class="keyword">in</span> player_indices]</span><br><span class="line">        test[times.index(<span class="built_in">min</span>(times))].append(word_at(match,i))</span><br><span class="line">    <span class="keyword">return</span> test</span><br><span class="line">    <span class="comment"># END PROBLEM 10</span></span><br></pre></td></tr></table></figure><h4 id="Some-feelings"><a href="#Some-feelings" class="headerlink" title="Some feelings"></a>Some feelings</h4><p>明显感觉project2比project1简单不少，花的时间也少多了</p><p>希望是我python水平提高的原因吧</p><h2 id="Lab-5：Python-Lists-Trees"><a href="#Lab-5：Python-Lists-Trees" class="headerlink" title="Lab 5：Python Lists, Trees"></a>Lab 5：Python Lists, Trees</h2><h3 id="Q1：Factors-List"><a href="#Q1：Factors-List" class="headerlink" title="Q1：Factors List"></a>Q1：Factors List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factors_list</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list containing all the numbers that divide `n` evenly, except</span></span><br><span class="line"><span class="string">    for the number itself. Make sure the list is in ascending order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factors_list(6)</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factors_list(8)</span></span><br><span class="line"><span class="string">    [1, 2, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; factors_list(28)</span></span><br><span class="line"><span class="string">    [1, 2, 4, 7, 14]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    all_factors = []</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;n:</span><br><span class="line">        <span class="keyword">if</span> n%i==<span class="number">0</span>:</span><br><span class="line">            all_factors.append(i)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> all_factors</span><br></pre></td></tr></table></figure><h3 id="Q2：Flatten"><a href="#Q2：Flatten" class="headerlink" title="Q2：Flatten"></a>Q2：Flatten</h3><blockquote><p><strong>Hint</strong>: you can check if something is a list by using the built-in <code>type</code> function. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(3) == list</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; type([1, 2, 3]) == list</span><br><span class="line">True</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">flatten</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a flattened version of list s.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten([1, 2, 3])     # normal list</span></span><br><span class="line"><span class="string">    [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = [1, [2, 3], 4]     # deep list</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten(x)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x # Ensure x is not mutated</span></span><br><span class="line"><span class="string">    [1, [2, 3], 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = [[1, [1, 1]], 1, [1, 1]] # deep list</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; flatten(x)</span></span><br><span class="line"><span class="string">    [1, 1, 1, 1, 1, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x</span></span><br><span class="line"><span class="string">    [[1, [1, 1]], 1, [1, 1]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    result=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(i)==<span class="built_in">list</span>:</span><br><span class="line">            result+=flatten(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(i)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Q3：Distance"><a href="#Q3：Distance" class="headerlink" title="Q3：Distance"></a>Q3：Distance</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">city_a, city_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_a = make_city(&#x27;city_a&#x27;, 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_b = make_city(&#x27;city_b&#x27;, 0, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city_a, city_b)</span></span><br><span class="line"><span class="string">    1.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_c = make_city(&#x27;city_c&#x27;, 6.5, 12)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_d = make_city(&#x27;city_d&#x27;, 2.5, 15)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city_c, city_d)</span></span><br><span class="line"><span class="string">    5.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sqrt((get_lat(city_a)-get_lat(city_b))**<span class="number">2</span>+(get_lon(city_a)-get_lon(city_b))**<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：Closer-city"><a href="#Q4：Closer-city" class="headerlink" title="Q4：Closer city"></a>Q4：Closer city</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">closer_city</span>(<span class="params">lat, lon, city_a, city_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the name of either city_a or city_b, whichever is closest to</span></span><br><span class="line"><span class="string">    coordinate (lat, lon). If the two cities are the same distance away</span></span><br><span class="line"><span class="string">    from the coordinate, consider city_b to be the closer city.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berkeley = make_city(&#x27;Berkeley&#x27;, 37.87, 112.26)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; stanford = make_city(&#x27;Stanford&#x27;, 34.05, 118.25)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(38.33, 121.44, berkeley, stanford)</span></span><br><span class="line"><span class="string">    &#x27;Stanford&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bucharest = make_city(&#x27;Bucharest&#x27;, 44.43, 26.10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; vienna = make_city(&#x27;Vienna&#x27;, 48.20, 16.37)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(41.29, 174.78, bucharest, vienna)</span></span><br><span class="line"><span class="string">    &#x27;Bucharest&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    city=make_city(<span class="string">&#x27;city&#x27;</span>,lat,lon)</span><br><span class="line">    <span class="keyword">if</span> distance(city,city_a)&gt;=distance(city,city_b):</span><br><span class="line">        <span class="keyword">return</span> get_name(city_b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> get_name(city_a)</span><br></pre></td></tr></table></figure><h3 id="Q6：Finding-Berries"><a href="#Q6：Finding-Berries" class="headerlink" title="Q6：Finding Berries!"></a>Q6：Finding Berries!</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">berry_finder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if t contains a node with the value &#x27;berry&#x27; and </span></span><br><span class="line"><span class="string">    False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scrat = tree(&#x27;berry&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(scrat)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sproul = tree(&#x27;roots&#x27;, [tree(&#x27;branch1&#x27;, [tree(&#x27;leaf&#x27;), tree(&#x27;berry&#x27;)]), tree(&#x27;branch2&#x27;)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(sproul)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(numbers)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(&#x27;berry&#x27;,[tree(&#x27;not berry&#x27;)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==<span class="string">&#x27;berry&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="keyword">if</span> berry_finder(b):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="Q7：Sprout-leaves"><a href="#Q7：Sprout-leaves" class="headerlink" title="Q7：Sprout leaves"></a>Q7：Sprout leaves</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sprout_leaves</span>(<span class="params">t, leaves</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sprout new leaves containing the data in leaves at each leaf in</span></span><br><span class="line"><span class="string">    the original tree t and return the resulting tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = tree(1, [tree(2), tree(3)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new1 = sprout_leaves(t1, [4, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = tree(1, [tree(2, [tree(3)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new2 = sprout_leaves(t2, [6, 1, 2])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">          6</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),[tree(b) <span class="keyword">for</span> b <span class="keyword">in</span> leaves])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),[sprout_leaves(b,leaves) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><h2 id="Disc-5：Trees-Data-Abstraction-Sequences"><a href="#Disc-5：Trees-Data-Abstraction-Sequences" class="headerlink" title="Disc 5：Trees, Data Abstraction, Sequences"></a>Disc 5：Trees, Data Abstraction, Sequences</h2><h3 id="Q2：Height"><a href="#Q2：Height" class="headerlink" title="Q2：Height"></a>Q2：Height</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the height of a tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(5, [tree(1)]), tree(2)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; height(t)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(3, [tree(1), tree(2, [tree(5, [tree(6)]), tree(1)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; height(t)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>([height(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])  <span class="comment">#so cool</span></span><br></pre></td></tr></table></figure><h3 id="Q3：Maximum-Path-Sum"><a href="#Q3：Maximum-Path-Sum" class="headerlink" title="Q3：Maximum Path Sum"></a>Q3：Maximum Path Sum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_path_sum</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the maximum path sum of the tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(5, [tree(1), tree(3)]), tree(10)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_path_sum(t)</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>([max_path_sum(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])+label(t)</span><br></pre></td></tr></table></figure><h3 id="Q4：Find-Path"><a href="#Q4：Find-Path" class="headerlink" title="Q4：Find Path"></a>Q4：Find Path</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">t, x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(2, [tree(7, [tree(3), tree(6, [tree(5), tree(11)])] ), tree(15)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_path(t, 5)</span></span><br><span class="line"><span class="string">    [2, 7, 6, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_path(t, 10)  # returns None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x==label(t):</span><br><span class="line">        <span class="keyword">return</span> [label(t)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            path=find_path(b,x)</span><br><span class="line">            <span class="keyword">if</span> path:</span><br><span class="line">                result=[label(t)]+path</span><br><span class="line">                <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Q5：Map-Filter-Reduce"><a href="#Q5：Map-Filter-Reduce" class="headerlink" title="Q5：Map, Filter, Reduce"></a>Q5：Map, Filter, Reduce</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_map</span>(<span class="params">fn, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Applies fn onto each element in seq and returns a list.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_map(lambda x: x*x, [1, 2, 3])</span></span><br><span class="line"><span class="string">    [1, 4, 9]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    seq_new=[]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seq:</span><br><span class="line">        seq_new.append(fn(x))</span><br><span class="line">    <span class="keyword">return</span> seq_new</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_filter</span>(<span class="params">pred, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Keeps elements in seq only if they satisfy pred.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_filter(lambda x: x % 2 == 0, [1, 2, 3, 4])  # new list has only even-valued elements</span></span><br><span class="line"><span class="string">    [2, 4]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    seq_new=[]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> seq:</span><br><span class="line">        <span class="keyword">if</span> pred(x):</span><br><span class="line">            seq_new.append(x)</span><br><span class="line">    <span class="keyword">return</span> seq_new</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_reduce</span>(<span class="params">combiner, seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Combines elements in seq using combiner.</span></span><br><span class="line"><span class="string">    seq will have at least one element.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x + y, [1, 2, 3, 4])  # 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x * y, [1, 2, 3, 4])  # 1 * 2 * 3 * 4</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x * y, [4])</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_reduce(lambda x, y: x + 2 * y, [1, 2, 3]) # (1 + 2 * 2) + 2 * 3</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(seq)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> seq[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(seq)==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> combiner(seq[<span class="number">0</span>],seq[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> combiner(combiner(seq[<span class="number">0</span>],seq[<span class="number">1</span>]),my_reduce(combiner,seq[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h3 id="Q6：Count-palindromes"><a href="#Q6：Count-palindromes" class="headerlink" title="Q6：Count palindromes"></a>Q6：Count palindromes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_palindromes</span>(<span class="params">L</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The number of palindromic words in the sequence of strings</span></span><br><span class="line"><span class="string">    L (ignoring case).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_palindromes((&quot;Acme&quot;, &quot;Madam&quot;, &quot;Pivot&quot;, &quot;Pip&quot;))</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(my_filter(<span class="keyword">lambda</span> x:x.lower()==x[::-<span class="number">1</span>].lower(),L))</span><br></pre></td></tr></table></figure><h3 id="Q7：Perfectly-Balanced"><a href="#Q7：Perfectly-Balanced" class="headerlink" title="Q7：Perfectly Balanced"></a>Q7：Perfectly Balanced</h3><p>似乎…有点问题</p><p>to be dubug</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add all elements in a tree.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(4, [tree(2, [tree(3)]), tree(6)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_tree(t)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">sum</span>=label(t)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="built_in">sum</span>+=sum_tree(b)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">balanced</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Checks if each branch has same sum of all elements and</span></span><br><span class="line"><span class="string">    if each branch is balanced.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(3), tree(1, [tree(2)]), tree(1, [tree(1), tree(1)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [t, tree(1)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(4), tree(1, [tree(2), tree(1)]), tree(1, [tree(3)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    store=[]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        store.append(sum_tree(b))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">max</span>(store)==<span class="built_in">min</span>(store):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add all elements in a tree.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(4, [tree(2, [tree(3)]), tree(6)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_tree(t)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">sum</span>=label(t)</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="built_in">sum</span>+=sum_tree(b)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure><h3 id="Q8：Hailstone-Tree"><a href="#Q8：Hailstone-Tree" class="headerlink" title="Q8：Hailstone Tree"></a>Q8：Hailstone Tree</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#orz，咕了 </span></span><br></pre></td></tr></table></figure><h2 id="HW-4：Data-Abstraction，Trees"><a href="#HW-4：Data-Abstraction，Trees" class="headerlink" title="HW 4：Data Abstraction，Trees"></a>HW 4：Data Abstraction，Trees</h2><h3 id="Q2：Weights"><a href="#Q2：Weights" class="headerlink" title="Q2：Weights"></a>Q2：Weights</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">planet</span>(<span class="params">size</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a planet of some size.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> size &gt; <span class="number">0</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;planet&#x27;</span>,size]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">w</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the size of a planet.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_planet(w), <span class="string">&#x27;must call size on a planet&#x27;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> w[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="Q3：Balanced"><a href="#Q3：Balanced" class="headerlink" title="Q3：Balanced"></a>Q3：Balanced</h3><p>平衡条件：①左右力矩相等    ②每个挂在arm上的mobile都平衡</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">balanced</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether m is balanced.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(v)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = mobile(arm(3, t), arm(2, u))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(w)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, v), arm(1, w)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, w), arm(1, v)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;balanced&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment">#m指mobile</span></span><br><span class="line">    <span class="keyword">if</span> length(left(m))*total_weight(end(left(m)))==length(right(m))*total_weight(end(right(m))):</span><br><span class="line">        <span class="keyword">if</span> is_planet(end(left(m))) <span class="keyword">and</span> is_planet(end(right(m))):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> is_mobile(end(left(m))) <span class="keyword">and</span> is_planet(end(right(m))):</span><br><span class="line">            <span class="keyword">if</span> balanced(end(left(m))):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> is_mobile(end(right(m))) <span class="keyword">and</span> is_planet(end(left(m))):</span><br><span class="line">            <span class="keyword">if</span> balanced(end(right(m))):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span>    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> balanced(end(left(m))) <span class="keyword">and</span> balanced(end(right(m))):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><del>强行枚举所有情况</del></p><h3 id="Q4：Totals"><a href="#Q4：Totals" class="headerlink" title="Q4：Totals"></a>Q4：Totals</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">totals_tree</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree representing the mobile with its total weight at the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(t))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(u))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(v))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">          3</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;totals_tree&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_planet(m):</span><br><span class="line">        <span class="keyword">return</span> tree(size(m))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">assert</span> is_mobile(m)</span><br><span class="line">        <span class="keyword">return</span> tree(total_weight(m),[totals_tree(end(left(m))),totals_tree(end(right(m)))])</span><br></pre></td></tr></table></figure><h3 id="Q5：Replace-Loki-at-Leaf"><a href="#Q5：Replace-Loki-at-Leaf" class="headerlink" title="Q5：Replace Loki at Leaf"></a>Q5：Replace Loki at Leaf</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_loki_at_leaf</span>(<span class="params">t, lokis_replacement</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a new tree where every leaf value equal to &quot;loki&quot; has</span></span><br><span class="line"><span class="string">    been replaced with lokis_replacement.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; yggdrasil = tree(&#x27;odin&#x27;,</span></span><br><span class="line"><span class="string">    ...                  [tree(&#x27;balder&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;loki&#x27;),</span></span><br><span class="line"><span class="string">    ...                         tree(&#x27;freya&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;frigg&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;loki&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;loki&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;sif&#x27;),</span></span><br><span class="line"><span class="string">    ...                         tree(&#x27;loki&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;loki&#x27;)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; laerad = copy_tree(yggdrasil) # copy yggdrasil for testing purposes</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(replace_loki_at_leaf(yggdrasil, &#x27;freya&#x27;))</span></span><br><span class="line"><span class="string">    odin</span></span><br><span class="line"><span class="string">      balder</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      frigg</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      loki</span></span><br><span class="line"><span class="string">        sif</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      freya</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; laerad == yggdrasil # Make sure original tree is unmodified</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==<span class="string">&#x27;loki&#x27;</span> <span class="keyword">and</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(lokis_replacement)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),[replace_loki_at_leaf(b,lokis_replacement) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><p><strong>ATTENTION</strong>: tree的结构为tree(label(t),branches&#x3D;[])，所以可以直接用循环+递归：<strong>tree(label(t),[replace_loki_at_leaf(b,lokis_replacement) for b in branches(t)])</strong></p><h3 id="Q6：Has-Path"><a href="#Q6：Has-Path" class="headerlink" title="Q6：Has Path"></a>Q6：Has Path</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">has_path</span>(<span class="params">t, word</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether there is a path in a tree where the entries along the path</span></span><br><span class="line"><span class="string">    spell out a particular word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; greetings = tree(&#x27;h&#x27;, [tree(&#x27;i&#x27;),</span></span><br><span class="line"><span class="string">    ...                        tree(&#x27;e&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;o&#x27;)])]),</span></span><br><span class="line"><span class="string">    ...                                   tree(&#x27;y&#x27;)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(greetings)</span></span><br><span class="line"><span class="string">    h</span></span><br><span class="line"><span class="string">      i</span></span><br><span class="line"><span class="string">      e</span></span><br><span class="line"><span class="string">        l</span></span><br><span class="line"><span class="string">          l</span></span><br><span class="line"><span class="string">            o</span></span><br><span class="line"><span class="string">        y</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;h&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;i&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hi&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hello&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hey&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;bye&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hint&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(word) &gt; <span class="number">0</span>, <span class="string">&#x27;no path for empty word.&#x27;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==word <span class="keyword">and</span> <span class="built_in">len</span>(word)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> label(t)==word[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            <span class="keyword">if</span> has_path(b,word[<span class="number">1</span>:]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="Q7：Preorder"><a href="#Q7：Preorder" class="headerlink" title="Q7：Preorder"></a>Q7：Preorder</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of the entries in this tree in the order that they</span></span><br><span class="line"><span class="string">    would be visited by a preorder traversal (see problem description).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; preorder(numbers)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; preorder(tree(2, [tree(4, [tree(6)])]))</span></span><br><span class="line"><span class="string">    [2, 4, 6]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> [label(t)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result=[label(t)]</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            result+=preorder(b)   <span class="comment">#这里不能是=，如果赋值的话相当于最后result就等于最后那个分支加上去的值</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="Q8：Interval-Abstraction"><a href="#Q8：Interval-Abstraction" class="headerlink" title="Q8：Interval Abstraction"></a>Q8：Interval Abstraction</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">interval</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct an interval from a to b.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> a &lt;= b, <span class="string">&#x27;Lower bound cannot be greater than upper bound&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [a, b]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lower_bound</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the lower bound of interval x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upper_bound</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the upper bound of interval x.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="Q9：Interval-Arithmetic"><a href="#Q9：Interval-Arithmetic" class="headerlink" title="Q9：Interval Arithmetic"></a>Q9：Interval Arithmetic</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the product of any value in x and any</span></span><br><span class="line"><span class="string">    value in y.&quot;&quot;&quot;</span></span><br><span class="line">    p1 = lower_bound(x)*lower_bound(y)</span><br><span class="line">    p2 = lower_bound(x)*upper_bound(y)</span><br><span class="line">    p3 = upper_bound(x)*lower_bound(y)</span><br><span class="line">    p4 = upper_bound(x)*upper_bound(y)</span><br><span class="line">    <span class="keyword">return</span> interval(<span class="built_in">min</span>(p1, p2, p3, p4), <span class="built_in">max</span>(p1, p2, p3, p4))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the difference between any value in x</span></span><br><span class="line"><span class="string">    and any value in y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    lower=lower_bound(x)-upper_bound(y)</span><br><span class="line">    upper=upper_bound(x)-lower_bound(y)</span><br><span class="line">    <span class="keyword">return</span> interval(lower,upper)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">div_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the quotient of any value in x divided by</span></span><br><span class="line"><span class="string">    any value in y. Division is implemented as the multiplication of x by the</span></span><br><span class="line"><span class="string">    reciprocal of y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> lower_bound(y)&gt;<span class="number">0</span> <span class="keyword">or</span> upper_bound(y)&lt;<span class="number">0</span></span><br><span class="line">    reciprocal_y = interval(<span class="number">1</span> / upper_bound(y), <span class="number">1</span> / lower_bound(y))</span><br><span class="line">    <span class="keyword">return</span> mul_interval(x, reciprocal_y)</span><br></pre></td></tr></table></figure><p>①提供的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the product of any value in x and any</span></span><br><span class="line"><span class="string">    value in y.&quot;&quot;&quot;</span></span><br><span class="line">    p1 = x[<span class="number">0</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p2 = x[<span class="number">0</span>] * y[<span class="number">1</span>]</span><br><span class="line">    p3 = x[<span class="number">1</span>] * y[<span class="number">0</span>]</span><br><span class="line">    p4 = x[<span class="number">1</span>] * y[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">min</span>(p1, p2, p3, p4), <span class="built_in">max</span>(p1, p2, p3, p4)]</span><br></pre></td></tr></table></figure><ol><li>提供的代码会报错**’function’ object is not subscriptable**</li></ol><blockquote><p>The error “TypeError: ‘function’ object is not subscriptable” occurs when you try to access an item from a function. Functions cannot be indexed using square brackets. </p></blockquote><p>即数据抽象要用其他函数去访问函数中的某个值，而不能直接用方括号索引函数</p><ol start="2"><li>如果只改p1~p4的值，不改return，则会报错**’list’ object is not callable**</li></ol><blockquote><p>The Python “TypeError: ‘list’ object is not callable” occurs when we try to call a list as a function using parenthesis () . To solve the error, make sure to use square brackets when accessing a list at a specific index</p></blockquote><p>即[]和()没用对</p><ol start="3"><li><strong>print(‘{0}:{1}’.format(key, value))</strong></li></ol><p>分别用key、value的值代替{0}和{1}</p><p>如输出-1 to 1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; to &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(-<span class="number">1</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="Lab-06：Mutability-Iterators"><a href="#Lab-06：Mutability-Iterators" class="headerlink" title="Lab 06：Mutability, Iterators"></a>Lab 06：Mutability, Iterators</h2><h3 id="Q2：Insert-Items"><a href="#Q2：Insert-Items" class="headerlink" title="Q2：Insert Items"></a>Q2：Insert Items</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert_items</span>(<span class="params">lst, entry, elem</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Inserts elem into lst after each occurence of entry and then returns lst.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; test_lst = [1, 5, 8, 5, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_lst = insert_items(test_lst, 5, 7)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new_lst</span></span><br><span class="line"><span class="string">    [1, 5, 7, 8, 5, 7, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_lst = [1, 2, 1, 2, 3, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_lst = insert_items(double_lst, 3, 4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_lst</span></span><br><span class="line"><span class="string">    [1, 2, 1, 2, 3, 4, 3, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst = [1, 4, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst2 = insert_items(large_lst, 4, 4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst2</span></span><br><span class="line"><span class="string">    [1, 4, 4, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst3 = insert_items(large_lst2, 4, 6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst3</span></span><br><span class="line"><span class="string">    [1, 4, 6, 4, 6, 8]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; large_lst3 is large_lst</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # Ban creating new lists</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;insert_items&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;List&#x27;, &#x27;ListComp&#x27;, &#x27;Slice&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(lst):</span><br><span class="line">        <span class="keyword">if</span> lst[i]==entry:</span><br><span class="line">            lst.insert(i+<span class="number">1</span>,elem)</span><br><span class="line">            i+=<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure><h3 id="Q4：Count-Occurrences"><a href="#Q4：Count-Occurrences" class="headerlink" title="Q4：Count Occurrences"></a>Q4：Count Occurrences</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_occurrences</span>(<span class="params">t, n, x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of times that x appears in the first n elements of iterator t.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s, 10, 9)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s2, 3, 10)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s, 1, 3)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s, 4, 2)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(s)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_occurrences(s2, 6, 6)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;n:</span><br><span class="line">        num=<span class="built_in">next</span>(t)</span><br><span class="line">        <span class="keyword">if</span> num==x:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span>             <span class="comment">#怎么老忘记加1啊啊啊啊啊</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="Q5：Repeated"><a href="#Q5：Repeated" class="headerlink" title="Q5：Repeated"></a>Q5：Repeated</h3><p>本题关键点在于用一个变量记录前一个数的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repeated</span>(<span class="params">t, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the first value in iterator T that appears K times in a row.</span></span><br><span class="line"><span class="string">    Iterate through the items such that if the same iterator is passed into</span></span><br><span class="line"><span class="string">    the function twice, it continues in the second call at the point it left</span></span><br><span class="line"><span class="string">    off in the first.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s, 2)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([10, 9, 10, 9, 9, 10, 8, 8, 8, 7])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s2, 3)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = iter([3, 2, 2, 2, 1, 2, 1, 4, 4, 5, 5, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s2 = iter([4, 1, 6, 6, 7, 7, 8, 8, 2, 2, 2, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(s2, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> k &gt; <span class="number">1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    last_num,cnt=<span class="literal">None</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num=<span class="built_in">next</span>(t)</span><br><span class="line">        <span class="keyword">if</span> last_num==<span class="literal">None</span> <span class="keyword">or</span> num!=last_num:</span><br><span class="line">            last_num,cnt=num,<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt==k:</span><br><span class="line">                <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><h2 id="Disc-06：Mutability-Iterators-and-Generators"><a href="#Disc-06：Mutability-Iterators-and-Generators" class="headerlink" title="Disc 06：Mutability, Iterators and Generators"></a>Disc 06：Mutability, Iterators and Generators</h2><p>pop(i)：i为索引</p><p>remove(el)：el为元素</p><h3 id="Q2：Add-This-Many"><a href="#Q2：Add-This-Many" class="headerlink" title="Q2：Add This Many"></a>Q2：Add This Many</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_this_many</span>(<span class="params">x, el, s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Adds el to the end of s the number of times x occurs in s.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = [1, 2, 4, 2, 1]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_this_many(1, 5, s)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    [1, 2, 4, 2, 1, 5, 5]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_this_many(2, 2, s)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s</span></span><br><span class="line"><span class="string">    [1, 2, 4, 2, 1, 5, 5, 2, 2]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i,count=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">if</span> x==s[i]:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    j=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j&lt;count:</span><br><span class="line">        s.append(el)</span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="Q4：Filter-Iter"><a href="#Q4：Filter-Iter" class="headerlink" title="Q4：Filter-Iter"></a>Q4：Filter-Iter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter_iter</span>(<span class="params">iterable, fn</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_even = lambda x: x % 2 == 0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(filter_iter(range(5), is_even)) # a list of the values yielded from the call to filter_iter</span></span><br><span class="line"><span class="string">    [0, 2, 4]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; all_odd = (2*y-1 for y in range(5))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(filter_iter(all_odd, is_even))</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; naturals = (n for n in range(1, 100))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = filter_iter(naturals, is_even)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(s)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(s)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    t=[]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> fn(b):</span><br><span class="line">            t.append(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">iter</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">#用yield方法：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_iter</span>(<span class="params">iterable, fn</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> fn(b):</span><br><span class="line">            <span class="keyword">yield</span> b</span><br></pre></td></tr></table></figure><h3 id="Q5：Merge"><a href="#Q5：Merge" class="headerlink" title="Q5：Merge"></a>Q5：Merge</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def sequence(start, step):</span></span><br><span class="line"><span class="string">    ...     while True:</span></span><br><span class="line"><span class="string">    ...         yield start</span></span><br><span class="line"><span class="string">    ...         start += step</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sequence(2, 3) # 2, 5, 8, 11, 14, ...</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = sequence(3, 2) # 3, 5, 7, 9, 11, 13, 15, ...</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = merge(a, b) # 2, 3, 5, 7, 8, 9, 11, 13, 14, 15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [next(result) for _ in range(10)]</span></span><br><span class="line"><span class="string">    [2, 3, 5, 7, 8, 9, 11, 13, 14, 15]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    num_a=<span class="built_in">next</span>(a)</span><br><span class="line">    num_b=<span class="built_in">next</span>(b)</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> num_a==num_b:</span><br><span class="line">            <span class="keyword">yield</span> num_a</span><br><span class="line">            num_a=<span class="built_in">next</span>(a)</span><br><span class="line">            num_b=<span class="built_in">next</span>(b)</span><br><span class="line">        <span class="keyword">elif</span> num_a&lt;num_b:</span><br><span class="line">            <span class="keyword">yield</span> num_a</span><br><span class="line">            num_a=<span class="built_in">next</span>(a)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> num_b</span><br><span class="line">            num_b=<span class="built_in">next</span>(b)</span><br></pre></td></tr></table></figure><h3 id="Q6：Primes-Generator"><a href="#Q6：Primes-Generator" class="headerlink" title="Q6：Primes Generator"></a>Q6：Primes Generator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if n is a prime number and False otherwise.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(16)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(521)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt; (n ** <span class="number">0.5</span>): <span class="comment"># Could replace with i == n</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> helper(i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> helper(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primes_gen</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generates primes in decreasing order.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pg = primes_gen(7)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(pg)</span></span><br><span class="line"><span class="string">    [7, 5, 3, 2]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> is_prime(n):</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> primes_gen(n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="HW-05：Iterators-and-Generators"><a href="#HW-05：Iterators-and-Generators" class="headerlink" title="HW 05：Iterators and Generators"></a>HW 05：Iterators and Generators</h2><h3 id="Q1：Generate-Permutations"><a href="#Q1：Generate-Permutations" class="headerlink" title="Q1：Generate Permutations"></a>Q1：Generate Permutations</h3><p>先想base case是什么，然后将要写的函数当作已经完成要求的函数，实现递归。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_perms</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generates all permutations of the given sequence. Each permutation is a</span></span><br><span class="line"><span class="string">    list of the elements in SEQ in a different order. The permutations may be</span></span><br><span class="line"><span class="string">    yielded in any order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; perms = gen_perms([100])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; type(perms)</span></span><br><span class="line"><span class="string">    &lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(perms)</span></span><br><span class="line"><span class="string">    [100]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; try: #this piece of code prints &quot;No more permutations!&quot; if calling next would cause an error</span></span><br><span class="line"><span class="string">    ...     next(perms)</span></span><br><span class="line"><span class="string">    ... except StopIteration:</span></span><br><span class="line"><span class="string">    ...     print(&#x27;No more permutations!&#x27;)</span></span><br><span class="line"><span class="string">    No more permutations!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(gen_perms([1, 2, 3])) # Returns a sorted list containing elements of the generator</span></span><br><span class="line"><span class="string">    [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(gen_perms((10, 20, 30)))</span></span><br><span class="line"><span class="string">    [[10, 20, 30], [10, 30, 20], [20, 10, 30], [20, 30, 10], [30, 10, 20], [30, 20, 10]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(gen_perms(&quot;ab&quot;))</span></span><br><span class="line"><span class="string">    [[&#x27;a&#x27;, &#x27;b&#x27;], [&#x27;b&#x27;, &#x27;a&#x27;]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(seq)!=<span class="built_in">list</span>:</span><br><span class="line">        seq=<span class="built_in">list</span>(seq)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(seq)&lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">yield</span> seq</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> perm <span class="keyword">in</span> gen_perms(seq[<span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seq)):</span><br><span class="line">                <span class="keyword">yield</span> perm[:i]+seq[:<span class="number">1</span>]+perm[i:]</span><br></pre></td></tr></table></figure><h3 id="Q2：Yield-Paths"><a href="#Q2：Yield-Paths" class="headerlink" title="Q2：Yield Paths"></a>Q2：Yield Paths</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">path_yielder</span>(<span class="params">t, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yields all possible paths from the root of t to a node with the label</span></span><br><span class="line"><span class="string">    value as a list.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = tree(1, [tree(2, [tree(3), tree(4, [tree(6)]), tree(5)]), tree(5)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">          6</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(path_yielder(t1, 6))</span></span><br><span class="line"><span class="string">    [1, 2, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; path_to_5 = path_yielder(t1, 5)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(list(path_to_5))</span></span><br><span class="line"><span class="string">    [[1, 2, 5], [1, 5]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = tree(0, [tree(2, [t1])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t2)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">            3</span></span><br><span class="line"><span class="string">            4</span></span><br><span class="line"><span class="string">              6</span></span><br><span class="line"><span class="string">            5</span></span><br><span class="line"><span class="string">          5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; path_to_2 = path_yielder(t2, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(list(path_to_2))</span></span><br><span class="line"><span class="string">    [[0, 2], [0, 2, 1, 2]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> label(t)==value:</span><br><span class="line">        <span class="keyword">yield</span> [value]</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> path_yielder(b,value): </span><br><span class="line">            <span class="keyword">yield</span> [label(t)]+path</span><br></pre></td></tr></table></figure><h3 id="Q3：Preorder"><a href="#Q3：Preorder" class="headerlink" title="Q3：Preorder"></a>Q3：Preorder</h3><p>见hw04 Q7</p><h3 id="Q4：Generate-Preorder"><a href="#Q4：Generate-Preorder" class="headerlink" title="Q4：Generate Preorder"></a>Q4：Generate Preorder</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_preorder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Yield the entries in this tree in the order that they</span></span><br><span class="line"><span class="string">    would be visited by a preorder traversal (see problem description).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; gen = generate_preorder(numbers)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; next(gen)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; list(gen)</span></span><br><span class="line"><span class="string">    [2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">yield</span> label(t)</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> generate_preorder(b)</span><br></pre></td></tr></table></figure><h3 id="Q5：Remainder-Generator"><a href="#Q5：Remainder-Generator" class="headerlink" title="Q5：Remainder Generator"></a>Q5：Remainder Generator</h3><p>会生成m个生成器，其中第i个生成器生成是除以m余i的所有数</p><p>令第一个生成器为余0，第二个为余1…</p><p><del>这题的题目意思好难理解</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remainders_generator</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Yields m generators. The ith yielded generator yields natural numbers whose</span></span><br><span class="line"><span class="string">    remainder is i when divided by m.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import types</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [isinstance(gen, types.GeneratorType) for gen in remainders_generator(5)]</span></span><br><span class="line"><span class="string">    [True, True, True, True, True]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remainders_four = remainders_generator(4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for i in range(4):</span></span><br><span class="line"><span class="string">    ...     print(&quot;First 3 natural numbers with remainder &#123;0&#125; when divided by 4:&quot;.format(i))</span></span><br><span class="line"><span class="string">    ...     gen = next(remainders_four)</span></span><br><span class="line"><span class="string">    ...     for _ in range(3):</span></span><br><span class="line"><span class="string">    ...         print(next(gen))</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 0 when divided by 4:</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 1 when divided by 4:</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 2 when divided by 4:</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    First 3 natural numbers with remainder 3 when divided by 4:</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> naturals():</span><br><span class="line">            <span class="keyword">if</span> x%m==i:</span><br><span class="line">                <span class="keyword">yield</span> x</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):            <span class="comment">#这里是关键，否则会Timeout</span></span><br><span class="line">        <span class="keyword">yield</span> helper(j)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">不用higher-order function也会报Timeout错误，怪</span></span><br><span class="line"><span class="string">可能是没有用high-order function “封装”，使程序一直进行？</span></span><br><span class="line"><span class="string">def remainders_generator(m):</span></span><br><span class="line"><span class="string">for i in range(m):</span></span><br><span class="line"><span class="string">        for x in naturals():</span></span><br><span class="line"><span class="string">            if x%m==i:</span></span><br><span class="line"><span class="string">                yield x</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Lab-07：Object-Oriented-Programming"><a href="#Lab-07：Object-Oriented-Programming" class="headerlink" title="Lab 07：Object-Oriented Programming"></a>Lab 07：Object-Oriented Programming</h2><h3 id="Q2：Retirement"><a href="#Q2：Retirement" class="headerlink" title="Q2：Retirement"></a>Q2：Retirement</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">time_to_retire</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the number of years until balance would grow to amount.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.balance &gt; <span class="number">0</span> <span class="keyword">and</span> amount &gt; <span class="number">0</span> <span class="keyword">and</span> self.interest &gt; <span class="number">0</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> self.balance*(self.interest+<span class="number">1</span>)**i&gt;=amount:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Q3：FreeChecking"><a href="#Q3：FreeChecking" class="headerlink" title="Q3：FreeChecking"></a>Q3：FreeChecking</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FreeChecking</span>(<span class="title class_ inherited__">Account</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bank account that charges for withdrawals, but the first two are free!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch = FreeChecking(&#x27;Jack&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.balance = 20</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(100)  # First one&#x27;s free</span></span><br><span class="line"><span class="string">    &#x27;Insufficient funds&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)    # And the second</span></span><br><span class="line"><span class="string">    17</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.balance</span></span><br><span class="line"><span class="string">    17</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)    # Ok, two free withdrawals is enough</span></span><br><span class="line"><span class="string">    13</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch2 = FreeChecking(&#x27;John&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch2.balance = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch2.withdraw(3) # No fee</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(3)  # ch still charges a fee</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ch.withdraw(5)  # Not enough to cover fee + withdraw</span></span><br><span class="line"><span class="string">    &#x27;Insufficient funds&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    withdraw_fee = <span class="number">1</span></span><br><span class="line">    free_withdrawals = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self,amount</span>):</span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.max_withdrawal:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Can&#x27;t withdraw that amount&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.free_withdrawals&gt;<span class="number">0</span>:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            self.balance = self.balance - amount</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.balance=self.balance-amount-self.withdraw_fee</span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.balance:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Insufficient funds&quot;</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; self.max_withdrawal:</span><br><span class="line">            self.free_withdrawals-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Can&#x27;t withdraw that amount&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br></pre></td></tr></table></figure><h3 id="Q4：Making-Cards"><a href="#Q4：Making-Cards" class="headerlink" title="Q4：Making Cards"></a>Q4：Making Cards</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Card</span>:</span><br><span class="line">    cardtype = <span class="string">&#x27;Staff&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, attack, defense</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Create a Card object with a name, attack,</span></span><br><span class="line"><span class="string">        and defense.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member = Card(&#x27;staff&#x27;, 400, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.name</span></span><br><span class="line"><span class="string">        &#x27;staff&#x27;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.attack</span></span><br><span class="line"><span class="string">        400</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.defense</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff = Card(&#x27;other&#x27;, 300, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.attack</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.defense</span></span><br><span class="line"><span class="string">        500</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.attack=attack</span><br><span class="line">        self.defense=defense</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">self, opponent_card</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Calculate power as:</span></span><br><span class="line"><span class="string">        (player card&#x27;s attack) - (opponent card&#x27;s defense)/2</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member = Card(&#x27;staff&#x27;, 400, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff = Card(&#x27;other&#x27;, 300, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.power(other_staff)</span></span><br><span class="line"><span class="string">        150.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; other_staff.power(staff_member)</span></span><br><span class="line"><span class="string">        150.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; third_card = Card(&#x27;third&#x27;, 200, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; staff_member.power(third_card)</span></span><br><span class="line"><span class="string">        200.0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; third_card.power(staff_member)</span></span><br><span class="line"><span class="string">        50.0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.attack-opponent_card.defense/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Q5：Making-a-Player"><a href="#Q5：Making-a-Player" class="headerlink" title="Q5：Making a Player"></a>Q5：Making a Player</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, deck, name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Initialize a Player object.</span></span><br><span class="line"><span class="string">        A Player starts the game by drawing 5 cards from their deck. Each turn,</span></span><br><span class="line"><span class="string">        a Player draws another card from the deck and chooses one to play.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card(&#x27;test&#x27;, 100, 100)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(6)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(test_deck, &#x27;tester&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_deck.cards)</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.deck = deck</span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.hand=[self.deck.draw() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Draw a card from the player&#x27;s deck and add it to their hand.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card(&#x27;test&#x27;, 100, 100)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(6)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(test_deck, &#x27;tester&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.draw()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_deck.cards)</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        6</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">not</span> self.deck.is_empty(), <span class="string">&#x27;Deck is empty!&#x27;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.hand.append(self.deck.draw())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self, card_index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Remove and return a card from the player&#x27;s hand at the given index.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player = Player(standard_deck, &#x27;tester&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta1, ta2 = TACard(&quot;ta_1&quot;, 300, 400), TACard(&quot;ta_2&quot;, 500, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor1, tutor2 = TutorCard(&quot;t1&quot;, 200, 500), TutorCard(&quot;t2&quot;, 600, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.hand = [ta1, ta2, tutor1, tutor2]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.play(0) is ta1</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_player.play(2) is tutor2</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(test_player.hand)</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.hand.pop(card_index)</span><br></pre></td></tr></table></figure><h3 id="Q6：ALs：Defenders"><a href="#Q6：ALs：Defenders" class="headerlink" title="Q6：ALs：Defenders"></a>Q6：ALs：Defenders</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AICard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;AI&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Reduce the opponent&#x27;s card&#x27;s attack by its defense,</span></span><br><span class="line"><span class="string">        then double its defense.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, &#x27;p1&#x27;), Player(opponent_deck, &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 300, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test = AICard(&#x27;AI&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.attack</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.defense</span></span><br><span class="line"><span class="string">        1200</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 600, 400)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test = AICard(&#x27;AI&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ai_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.attack</span></span><br><span class="line"><span class="string">        200</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.defense</span></span><br><span class="line"><span class="string">        800</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (opponent_card.attack-opponent_card.defense)&lt;<span class="number">0</span>:</span><br><span class="line">            opponent_card.attack=<span class="number">0</span></span><br><span class="line">            opponent_card.defense=opponent_card.defense*<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            opponent_card.attack=opponent_card.attack-opponent_card.defense</span><br><span class="line">            opponent_card.defense=opponent_card.defense*<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="Q7：Tutors：Flummox"><a href="#Q7：Tutors：Flummox" class="headerlink" title="Q7：Tutors：Flummox"></a>Q7：Tutors：Flummox</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TutorCard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;Tutor&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Discard the first 3 cards in the opponent&#x27;s hand and have</span></span><br><span class="line"><span class="string">        them draw the same number of cards from their deck.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, &#x27;p1&#x27;), Player(opponent_deck, &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor_test = TutorCard(&#x27;Tutor&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; initial_deck_length = len(player2.deck.cards)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; tutor_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        p2 discarded and re-drew 3 cards!</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.hand)</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.deck.cards) == initial_deck_length - 3</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># You should add your implementation above this.</span></span><br><span class="line">        i,j=<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;<span class="number">3</span>:</span><br><span class="line">            opponent.hand.pop()</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;<span class="number">3</span>:</span><br><span class="line">            opponent.hand.append(opponent.deck.draw())</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; discarded and re-drew 3 cards!&#x27;</span>.<span class="built_in">format</span>(opponent.name))</span><br></pre></td></tr></table></figure><h3 id="Q8：TAs：Shift"><a href="#Q8：TAs：Shift" class="headerlink" title="Q8：TAs：Shift"></a>Q8：TAs：Shift</h3><p>optional</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TACard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;TA&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Swap the attack and defense of an opponent&#x27;s card.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from cards import *</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(player_deck, &#x27;p1&#x27;), Player(opponent_deck, &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = Card(&#x27;other&#x27;, 300, 600)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta_test = TACard(&#x27;TA&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; ta_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.attack</span></span><br><span class="line"><span class="string">        600</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card.defense</span></span><br><span class="line"><span class="string">        300</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        store=opponent_card.attack</span><br><span class="line">        opponent_card.attack=opponent_card.defense</span><br><span class="line">        opponent_card.defense=store</span><br></pre></td></tr></table></figure><h3 id="Q9：The-Instructor-Arrives"><a href="#Q9：The-Instructor-Arrives" class="headerlink" title="Q9：The Instructor Arrives"></a>Q9：The Instructor Arrives</h3><p>optional</p><p>有点bug，<del>算了算了</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InstructorCard</span>(<span class="title class_ inherited__">Card</span>):</span><br><span class="line">    cardtype = <span class="string">&#x27;Instructor&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">effect</span>(<span class="params">self, opponent_card, player, opponent</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Adds the attack and defense of the opponent&#x27;s card to</span></span><br><span class="line"><span class="string">        all cards in the player&#x27;s deck, then removes all cards</span></span><br><span class="line"><span class="string">        in the opponent&#x27;s deck that share an attack or defense</span></span><br><span class="line"><span class="string">        stat with the opponent&#x27;s card.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_card = Card(&#x27;card&#x27;, 300, 300)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; instructor_test = InstructorCard(&#x27;Instructor&#x27;, 500, 500)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; opponent_card = test_card.copy()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; test_deck = Deck([test_card.copy() for _ in range(8)])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; player1, player2 = Player(test_deck.copy(), &#x27;p1&#x27;), Player(test_deck.copy(), &#x27;p2&#x27;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; instructor_test.effect(opponent_card, player1, player2)</span></span><br><span class="line"><span class="string">        3 cards were discarded from p2&#x27;s deck!</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; [(card.attack, card.defense) for card in player1.deck.cards]</span></span><br><span class="line"><span class="string">        [(600, 600), (600, 600), (600, 600)]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; len(player2.deck.cards)</span></span><br><span class="line"><span class="string">        0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        orig_opponent_deck_length = <span class="built_in">len</span>(opponent.deck.cards)</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="comment"># You should add your implementation above this.</span></span><br><span class="line">        <span class="keyword">for</span> i_cards <span class="keyword">in</span> player.deck.cards:</span><br><span class="line">            i_cards.attack+=opponent_card.attack</span><br><span class="line">            i_cards.defense+=opponent_card.defense</span><br><span class="line">        <span class="keyword">for</span> o_cards <span class="keyword">in</span> opponent.deck.cards:</span><br><span class="line">            <span class="keyword">if</span> o_cards.attack==opponent_card.attack <span class="keyword">or</span> o_cards.defense==opponent_card.defense:</span><br><span class="line">                opponent.deck.cards.remove(o_cards)</span><br><span class="line"></span><br><span class="line">        discarded = orig_opponent_deck_length - <span class="built_in">len</span>(opponent.deck.cards)</span><br><span class="line">        <span class="keyword">if</span> discarded:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; cards were discarded from &#123;&#125;\&#x27;s deck!&#x27;</span>.<span class="built_in">format</span>(discarded, opponent.name))</span><br><span class="line">            <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="Project-03：Ants"><a href="#Project-03：Ants" class="headerlink" title="Project 03：Ants"></a>Project 03：Ants</h2><h2 id="Disc-07：Object-Oriented-Programming-String-Repredentation"><a href="#Disc-07：Object-Oriented-Programming-String-Repredentation" class="headerlink" title="Disc 07：Object-Oriented Programming, String Repredentation"></a>Disc 07：Object-Oriented Programming, String Repredentation</h2><h3 id="Q2：Keyboard"><a href="#Q2：Keyboard" class="headerlink" title="Q2：Keyboard"></a>Q2：Keyboard</h3><p>未debug版（悲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pos, key</span>):</span><br><span class="line">        self.pos = pos</span><br><span class="line">        self.key = key</span><br><span class="line">        self.times_pressed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Keyboard</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A Keyboard takes in an arbitrary amount of buttons, and has a</span></span><br><span class="line"><span class="string">    dictionary of positions as keys, and values as Buttons.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1 = Button(0, &quot;H&quot;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b2 = Button(1, &quot;I&quot;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k = Keyboard(b1, b2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.buttons[0].key   #dictionary的key</span></span><br><span class="line"><span class="string">    &#x27;H&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.press(1)</span></span><br><span class="line"><span class="string">    &#x27;I&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.press(2) # No button at this position</span></span><br><span class="line"><span class="string">    &#x27;&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.typing([0, 1])</span></span><br><span class="line"><span class="string">    &#x27;HI&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; k.typing([1, 0])</span></span><br><span class="line"><span class="string">    &#x27;IH&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1.times_pressed</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b2.times_pressed</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        self.buttons=&#123;&#125;  <span class="comment">#dictionary</span></span><br><span class="line">        <span class="keyword">for</span> args <span class="keyword">in</span> args:    <span class="comment">#为什么这个要这样写，悲</span></span><br><span class="line">            self.buttons[args.pos]=args</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">press</span>(<span class="params">self, info</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Takes in a position of the button pressed, and</span></span><br><span class="line"><span class="string">        returns that button&#x27;s output.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> info&lt;=<span class="built_in">len</span>(self.buttons):</span><br><span class="line">            <span class="keyword">return</span> self.buttons[info].key</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">typing</span>(<span class="params">self, typing_input</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Takes in a list of positions of buttons pressed, and</span></span><br><span class="line"><span class="string">        returns the total output.&quot;&quot;&quot;</span></span><br><span class="line">        output=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> typing_input:</span><br><span class="line">            output+=typing_input[index(word)]</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h3 id="Q3：Cat"><a href="#Q3：Cat" class="headerlink" title="Q3：Cat"></a>Q3：Cat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, owner, lives=<span class="number">9</span></span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.owner=owner</span><br><span class="line">        self.lives=lives</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Print out a cat&#x27;s greeting.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; Cat(&#x27;Thomas&#x27;, &#x27;Tammy&#x27;).talk()</span></span><br><span class="line"><span class="string">        Thomas says meow!</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; says meow!&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lose_life</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Decrements a cat&#x27;s life by 1. When lives reaches zero,</span></span><br><span class="line"><span class="string">        is_alive becomes False. If this is called after lives has</span></span><br><span class="line"><span class="string">        reached zero, print &#x27;This cat has no more lives to lose.&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.lives==<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;This cat has no more lives to lose.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Q4：NoisyCat"><a href="#Q4：NoisyCat" class="headerlink" title="Q4：NoisyCat"></a>Q4：NoisyCat</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, owner, lives=<span class="number">9</span></span>):</span><br><span class="line">        <span class="comment"># Is this method necessary? Why or why not?</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.owner=owner</span><br><span class="line">        self.lives=lives</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">talk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Talks twice as much as a regular cat.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; NoisyCat(&#x27;Magic&#x27;, &#x27;James&#x27;).talk()</span></span><br><span class="line"><span class="string">        Magic says meow!</span></span><br><span class="line"><span class="string">        Magic says meow!</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; says meow!&#x27;</span>.<span class="built_in">format</span>(self.name))</span><br></pre></td></tr></table></figure><h3 id="Q5：Cat-Adoption（cls用法"><a href="#Q5：Cat-Adoption（cls用法" class="headerlink" title="Q5：Cat Adoption（cls用法"></a>Q5：Cat Adoption（cls用法</h3><p>…to be continued</p><p>需要领悟一下cls的用法</p><blockquote><p>关于cls：</p><p>一般来说，要使用某个类的方法，需要先实例化一个对象再调用方法,而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。</p><p><strong>cls在python中表示类本身，self为类的一个实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        ...</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cls</span>):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>则cls()等于Person()，Person.build()返回一个Person的实例</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="keyword">as</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, owner, lives=<span class="number">9</span></span>):</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.owner=owner</span><br><span class="line">        self.lives=lives</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Insert other previously defined methods here</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adopt_random_cat</span>(<span class="params">cls, owner</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns a new instance of a Cat with the given owner,</span></span><br><span class="line"><span class="string">        a randomly chosen name and a random number of lives.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; randcat = Cat.adopt_random_cat(&quot;Ifeoma&quot;)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; isinstance(randcat, Cat)</span></span><br><span class="line"><span class="string">        True</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; randcat.owner</span></span><br><span class="line"><span class="string">        &#x27;Ifeoma&#x27;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        cls.name=random.choice[]   <span class="comment">#这个函数用的不对</span></span><br><span class="line">        cls.lives=random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> cls(name, owner, lives)</span><br></pre></td></tr></table></figure><p>就这样吧，有气无力.jpg</p><h2 id="HW-06：Object-Oriented-Programming-Linked-Lists"><a href="#HW-06：Object-Oriented-Programming-Linked-Lists" class="headerlink" title="HW 06：Object-Oriented Programming, Linked Lists"></a>HW 06：Object-Oriented Programming, Linked Lists</h2>]]></content>
    
    
    <summary type="html">幸好没成为梦结束的地方...</summary>
    
    
    
    <category term="cs" scheme="http://liuydd.github.io/categories/cs/"/>
    
    
    <category term="cs, python" scheme="http://liuydd.github.io/tags/cs-python/"/>
    
  </entry>
  
  <entry>
    <title>种星星的人</title>
    <link href="http://liuydd.github.io/2022/07/01/stars/"/>
    <id>http://liuydd.github.io/2022/07/01/stars/</id>
    <published>2022-07-01T15:35:08.000Z</published>
    <updated>2022-07-07T02:43:06.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>与二三好友于2022年7月1日夜共同观影《人生大事》，中有一友为二刷。</p><p>有感而作此文。</p><h2 id="Some-feelings"><a href="#Some-feelings" class="headerlink" title="Some feelings"></a>Some feelings</h2><p>死生莫大焉，这是古人的话。</p><p>尽管有些情节比较拉跨，但瑕不掩瑜。</p><p>只是我惊讶于自己刚开始的冷漠，惊讶于小文不知道“死”这个概念的纯真。不过想到小文刚上幼儿园，倒也说的过去。</p><p>在我七八岁的时候，我的爷爷奶奶就相继去世了。对爷爷的葬礼我最大的印象就是一个密闭的大黑盒子，一群让晚辈跪着哭的泼水的人，以及身边人或真或假的哭声。</p><p>我曾经以为爱与家庭能抚慰这种悲伤，甚至在平凡琐碎的日子里连生存都要拼尽全力，哪有时间悲伤。</p><p>但我代入了一下，如果那一天真的到来了，我还是会悲伤的不能自已的。</p><p>这是没办法的事，人类就是这么渺小，无法阻止黑白无常，无法避免生死。</p><p>电影让我第一次走进这个职业，并赋予了它一个好听的名字：种星星的人。</p><p>“逝去的人会变成天上的星星”早就成为了哄小孩子的话，我更相信死去元知万事空。但孩子不一样，孩子就像白纸一般，甚至傻的有点可爱。</p><p>电影里外婆给小文发的语音都成了小文对外婆的怀念。在现在这个社会，人与人的交流才是最难的吧，比如我更倾向于打字而不是语音，还是要与亲人多交流，说不定哪天他们就化为天上的星星了。</p><p>在不太敞亮的小巷小店里，也有人在用自己的方式生活。</p><p>我不由思考，就算我到时候混的不好，也应该不会差到哪里去吧。</p><p>人生的出路那么多，尽管实现不了理想会很遗憾。</p><p>电影最后以放烟花的方式来发配三哥爸爸的骨灰，真的浪漫极了。之前我想到的最浪漫的方式是把骨灰洒向大海，大海潮起潮路，就像亲人在和你说话。</p><p>烟花绽放，变成了无数的星星。尽管短暂，但足够夺目，足够让人念念不忘。</p><p><img src="/images/cover8.jpg"></p><p>等到了我死的那一天，我会不会喜欢这种方式呢？</p><p>也许我和我的孩子都足够保守，采用最寻常的入土为安。也许会任由那一丝的叛逆主导，留一小撮骨灰当作烟花的原料。在大江大河的边上绽放，烟花变成星星掉落进江河里，守护着后来的人。</p><p>以后的事，谁说的准呢，生前哪管身后事，领悟到此刻的感动，这就够了。</p>]]></content>
    
    
    <summary type="html">死生亦大矣</summary>
    
    
    
    <category term="观影杂记" scheme="http://liuydd.github.io/categories/%E8%A7%82%E5%BD%B1%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="观影" scheme="http://liuydd.github.io/tags/%E8%A7%82%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>cs61a：从入门到入土</title>
    <link href="http://liuydd.github.io/2022/06/30/cs61a/"/>
    <id>http://liuydd.github.io/2022/06/30/cs61a/</id>
    <published>2022-06-30T04:14:05.000Z</published>
    <updated>2022-07-21T12:57:52.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>一直想学，无奈，由于平时的作业很多，学业压力比较重，学了几节课就没有学了。</p><p>决定前面的就简单温习一下吧。不复习又不行，<del>基本全忘记了，只记得自己学过</del>。</p><p>炎热的夏天不想出门，适合在房间<del>开着空调吃着西瓜玩着手机</del>学习python。</p><p>希望这个暑假能肝完。</p><p>版本：CS 61A Fall 2021</p><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="使用ok的方法"><a href="#使用ok的方法" class="headerlink" title="使用ok的方法"></a>使用ok的方法</h3><p>这是这门课的亮点之一，利用简单的命令行的知识来检测你写出来的程序是否正确，并且每一个case都会告诉你是什么应该输出什么而你输出了什么，从而判断正确与否。</p><p>（在此点名华大的oj，什么都不给，只告诉你AC或WA等等，改都不知道怎么改）</p><p>之前没学过git，估计用git更简单。</p><blockquote><p>win+R，输入cmd</p><p>然后在命令行界面输入powshell</p><p>在powershell里用cd ~&#x2F;Desktop&#x2F;cs61a&#x2F;…来进入相应的位置</p><p>然后粘贴题目提供的含ok语句即可</p></blockquote><p><strong>vscode可以和power shell交互，故可省去第一步</strong></p><p><strong>可以直接用git bash here进入相应的位置，然后粘贴ok语句即可</strong></p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><h4 id="expressions"><a href="#expressions" class="headerlink" title="expressions"></a>expressions</h4><p>即表达式，具体讲解了表达式嵌套时应遵循一定的顺序</p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><ul><li><p><strong>from math import</strong> pi</p></li><li><p>可自行定义一个function的名称，例如：</p></li><li><pre><code class="python">def square(x)    return mul(x,x)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```python</span><br><span class="line">  def area()</span><br><span class="line">  return pi*radius*radius</span><br></pre></td></tr></table></figure></code></pre></li><li><p>可通过更改radius的值来改变area的值</p></li></ul><h4 id="environment-diagrams"><a href="#environment-diagrams" class="headerlink" title="environment diagrams"></a>environment diagrams</h4><p>to visualize the interpreter’s process</p><p>（个人认为就是把程序的进行过程列出来方便理解</p><h4 id="defining-functions"><a href="#defining-functions" class="headerlink" title="defining functions"></a>defining functions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;name&gt;(&lt;formal parameters&gt;):</span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;</span><br></pre></td></tr></table></figure><p>def这一行的后面一定不要忘了有冒号！</p><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h3><h4 id="Print-and-None"><a href="#Print-and-None" class="headerlink" title="Print and None"></a>Print and None</h4><p>我理解的是，print输出了一个数，但是返回None（即什么都不返回）</p><p>而return返回了这个数</p><h4 id="Multiple-Environments"><a href="#Multiple-Environments" class="headerlink" title="Multiple Environments"></a>Multiple Environments</h4><p>指的是def的函数嵌套，应该从里向外展开</p><h4 id="Some-features"><a href="#Some-features" class="headerlink" title="Some features"></a>Some features</h4><p>除法 “&#x2F;“</p><blockquote><p>2013&#x2F;10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv,floordiv</span><br><span class="line">&gt;&gt;&gt;truediv(<span class="number">2013</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">201.3</span></span><br></pre></td></tr></table></figure><p>2013&#x2F;&#x2F;10（舍去后面的数，非四舍五入）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv,floordiv</span><br><span class="line">&gt;&gt;&gt;floordiv(<span class="number">2013</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure></blockquote><p>A%B&#x3D;mod(A,B)</p><p>定义函数的时候可以给形参赋值，调用时可以不把已被赋值的参数写出来</p><h4 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h4><p>类似于C++中的if语句，仅语法有所差别</p><p>关心的是Boolean语句的对或错，而不关注表达式本身</p><h4 id="Iteration（迭代）"><a href="#Iteration（迭代）" class="headerlink" title="Iteration（迭代）"></a>Iteration（迭代）</h4><p>讲的是while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition):</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><h3 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h3><h4 id="when-designing-functions"><a href="#when-designing-functions" class="headerlink" title="when designing functions"></a>when designing functions</h4><ul><li>give each function exactly one job</li><li>do not repeat yourself (DRY). implement a process just once,but execute it many times.</li><li>define functions generally</li></ul><h4 id="可以用assert来检查输入的数据是否符合标准"><a href="#可以用assert来检查输入的数据是否符合标准" class="headerlink" title="可以用assert来检查输入的数据是否符合标准"></a>可以用assert来检查输入的数据是否符合标准</h4><p>格式：assert  （A），（B）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> r&gt;<span class="number">0</span>,<span class="string">&#x27;A length must be positive.&#x27;</span></span><br></pre></td></tr></table></figure><p>即A语句为一个bool语句。如果判断为false，则程序报错并输出B语句</p><h4 id="不要忘了pow函数！pow-k-3-即为求k的三次方"><a href="#不要忘了pow函数！pow-k-3-即为求k的三次方" class="headerlink" title="不要忘了pow函数！pow(k,3)即为求k的三次方"></a>不要忘了pow函数！pow(k,3)即为求k的三次方</h4><h4 id="higher-order-functions"><a href="#higher-order-functions" class="headerlink" title="higher-order functions"></a>higher-order functions</h4><p>A <strong>higher order function</strong> (HOF) is a function that manipulates other functions by taking in functions as arguments, returning a function, or both.</p><p>类似C++中函数之间的相互调用</p><ul><li>Express general methods of computation</li><li>Remove repetition from programs</li><li>Separate concerns among functions</li></ul><h4 id="lambda-expressions"><a href="#lambda-expressions" class="headerlink" title="lambda expressions"></a>lambda expressions</h4><p>与def类似，但是lambda expressions不能包含statements</p><p>lambda的是变量</p><p>使用格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square=<span class="keyword">lambda</span> x:x*x</span><br><span class="line">&gt;&gt;&gt;square(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>与def的区别：</p><p><img src="/images/cs61a_assert1.png"></p><p>即def给了函数一个具体的名称，而lambda没有给，除非自己给它命名一个</p><h4 id="conditional-expressions"><a href="#conditional-expressions" class="headerlink" title="conditional expressions"></a>conditional expressions</h4><p>form：<consequent>if<predicate>else<alternative></alternative></predicate></consequent></p><p>evaluation rule:</p><ul><li>Evaluate the <predicate> expression.</predicate></li><li>If it’s a true value, the value of the whole expression is the value of the <consequent></consequent></li><li>Otherwise, the value of the whole expression is the value of the <alternative></alternative></li></ul><h3 id="Environments-for-Higher-Order-Functions"><a href="#Environments-for-Higher-Order-Functions" class="headerlink" title="Environments for Higher-Order Functions"></a>Environments for Higher-Order Functions</h3><h4 id="nested-functions（嵌套）"><a href="#nested-functions（嵌套）" class="headerlink" title="nested functions（嵌套）"></a>nested functions（嵌套）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">return</span> k+n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure><h4 id="How-to-draw-an-environment-dragram"><a href="#How-to-draw-an-environment-dragram" class="headerlink" title="How to draw an environment dragram"></a>How to draw an environment dragram</h4><p><img src="/images/cs61a_assert2.png"></p><h4 id="function-currying"><a href="#function-currying" class="headerlink" title="function currying"></a>function currying</h4><p>即higher-order function</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">curry2</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">y</span>):</span><br><span class="line">            <span class="keyword">return</span> f(x,y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;curry2=<span class="keyword">lambda</span> f:<span class="keyword">lambda</span> x:<span class="keyword">lambda</span> y:f(x,y)</span><br><span class="line">&gt;&gt;&gt;m=curry2(add)</span><br><span class="line">&gt;&gt;&gt;m(<span class="number">2</span>)(<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>currying：Transforming a multi-argument function into a single-argument,higher-order function</p><h3 id="Disc-01-Control-Environment-Diagrams"><a href="#Disc-01-Control-Environment-Diagrams" class="headerlink" title="Disc 01: Control,Environment Diagrams"></a>Disc 01: Control,Environment Diagrams</h3><p>罗列几个与C++不同的注意点</p><ul><li>Boolean Operators中不要像C++一样使用&amp;&amp;和||，而是要使用and，or，not</li><li>不要使用i++，用i&#x3D;i+1或i+&#x3D;1</li><li>python打印是自动换行的</li></ul><h2 id="Week-3"><a href="#Week-3" class="headerlink" title="Week 3"></a>Week 3</h2><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><h4 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h4><ul><li>不注重正确性而注重可读性。应该包含变量的meaning or purpose</li><li>长的name通常易读，如：average_age&#x3D;average(age, students)</li><li>短的name通常是大家常用的符号。如：n, k, i for integers; x, y, z for real numbers and f, g, h for functions</li></ul><h2 id="Week-4"><a href="#Week-4" class="headerlink" title="Week 4"></a>Week 4</h2><h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><p>Definition：the body of the function calls itself，either directly or indirectly</p><p>Anatomy：</p><ul><li>Base case：Evaluated without a recursive call（the smallest subproblem）</li><li>Recursive case：Evaluated with a recursive call（breaking down the problem further）</li><li>Conditional atatement：to decide of it’s a base case</li></ul><h3 id="Recursion-and-Iteration"><a href="#Recursion-and-Iteration" class="headerlink" title="Recursion and Iteration"></a>Recursion and Iteration</h3><p>Recursion：updates via assignment become…</p><p>​如digit_sum&#x3D;digit_sum+last</p><p>Iteration：…arguments to a recursive call</p><p>​如return sum_digits_rec(n,digit_sum+last)</p><h3 id="Tree-Recursion"><a href="#Tree-Recursion" class="headerlink" title="Tree Recursion"></a>Tree Recursion</h3><p>Tree-shaped processes arise whenever executing the body of a recursive function makes more than one call to that function</p><h2 id="Week-5"><a href="#Week-5" class="headerlink" title="Week 5"></a>Week 5</h2><h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;digits=[<span class="number">1</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure><p>The number of elements：len(digits)</p><p>An element selected by its index：digits[3]  or  getitem(digits,3)</p><p>Concatenation and repetition：[2,7]+digits*2  or  add([2,7],mul(digits,2))   &#x3D;[2,7,1,8,2,8,1,8,2,8]</p><p>Nested lists：pairs&#x3D;[[10,20],[30,40]]</p><p>​                        pairs[1]&#x3D;[30,40]           pairs[1][0]&#x3D;30</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">1</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">5</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;1&#x27;</span>==<span class="number">1</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;1&#x27;</span> <span class="keyword">in</span> digits</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="For-Statements"><a href="#For-Statements" class="headerlink" title="For Statements"></a>For Statements</h4><p><strong>for循环与lists很搭</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;expression&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pairs=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">4</span>]]</span><br><span class="line">same_count=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> pairs:</span><br><span class="line">    <span class="keyword">if</span> x==y:</span><br><span class="line">        same_count+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Ranges"><a href="#Ranges" class="headerlink" title="Ranges"></a>Ranges</h4><p>A range is a sequence of <strong>consecutive integers.</strong></p><p>如range(-2,2)表示-2，-1，0，1；range(4)&#x3D;range(0,4)表示0，1，2，3</p><p>Length：ending value - starting value</p><p>Element selection：starting value + index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">range</span>(-<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">[-<span class="number">2</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cheer</span>():</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Go Bears!&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="List-Comprehentions"><a href="#List-Comprehentions" class="headerlink" title="List Comprehentions"></a>List Comprehentions</h4><p>构建list的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;odds=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;[x+<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> odds]</span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt;[x <span class="keyword">for</span> x <span class="keyword">in</span> odds <span class="keyword">if</span> <span class="number">25</span>%x==<span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">lambda</span> n:[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n) <span class="keyword">if</span> n%x==<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>“” or ‘’均可</p><p>“””…”””注释</p><p>Length and element selection are similar to all sequences.</p><p>However, the “in” and “not in” operators match substrings.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;city=<span class="string">&#x27;Berkeley&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">len</span>(city)</span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;city[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;k&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;here&#x27;</span> <span class="keyword">in</span> <span class="string">&quot;where&#x27;s Waldo?&quot;</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="Sequences"><a href="#Sequences" class="headerlink" title="Sequences"></a>Sequences</h3><h4 id="Slicing"><a href="#Slicing" class="headerlink" title="Slicing"></a>Slicing</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;odds=[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;[odds[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>)]</span><br><span class="line">[<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;odds[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">[<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;odds[:<span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br><span class="line">&gt;&gt;&gt;odds[<span class="number">1</span>:]</span><br><span class="line">[<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br><span class="line">&gt;&gt;&gt;odds[:]</span><br><span class="line">[<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>]</span><br></pre></td></tr></table></figure><p>Slicing creates new values.</p><p>String is like a list and the functions can use slicing. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> reverse(s[:<span class="number">1</span>])+s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="Processing-Container-Values"><a href="#Processing-Container-Values" class="headerlink" title="Processing Container Values"></a>Processing Container Values</h4><ul><li><strong>sum</strong>(iterable[, start])–&gt;value</li></ul><p>（not strings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>[[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>max</strong>(iterable[, key&#x3D;func])–&gt;value</p><p><strong>max</strong>(a, b, c, …[, key&#x3D;func])–&gt;value</p></li><li><p><strong>all</strong>(iterable)–&gt;bool</p></li></ul><p>Return True if bool(x) is True for all values x in the iterable.</p><p>If the iterable is empty, return True.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">bool</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">False</span> <span class="comment">#除此之外均为True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">bool</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">&gt;&gt;&gt;[x&lt;<span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">[<span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>, <span class="literal">True</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">all</span>([x&lt;<span class="number">5</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)])</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">all</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">Flase</span><br></pre></td></tr></table></figure><h3 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h3><p>类似C++中的类</p><h4 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h4><p>Dictionaries are collections of key-value pairs.</p><p>Dictionary keys do have two restrictions:</p><ul><li>A key of a dictionary cannot be a list or a dictionary.</li><li>Two keys cannot be equal; There can be at most one value for a given key.</li></ul><p>如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;numerals= &#123;<span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>,<span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">&gt;&gt;&gt;numerals&#123;<span class="string">&#x27;X&#x27;</span>&#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(numerals)</span><br><span class="line">[<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;numerals.values()</span><br><span class="line">dict_values([<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>])</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(numerals.values())</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(numerals.values())</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=&#123;<span class="number">1</span>:[<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;second&#x27;</span>],<span class="number">3</span>:<span class="string">&#x27;third&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">len</span>(d)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;d[<span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;first&#x27;</span>,<span class="string">&#x27;second&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;d[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;third&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Dictionary-Comprehensions"><a href="#Dictionary-Comprehensions" class="headerlink" title="Dictionary Comprehensions"></a>Dictionary Comprehensions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&lt;key exp&gt;:&lt;value exp&gt; <span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;<span class="built_in">iter</span> exp&gt; <span class="keyword">if</span> &lt;<span class="built_in">filter</span> exp&gt;&#125;</span><br><span class="line">&#123;&lt;key exp&#125;:&lt;value exp&gt; <span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;<span class="built_in">iter</span> exp&gt;</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;x*x:x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="keyword">if</span> x&gt;<span class="number">2</span>&#125; == &#123;<span class="number">9</span>:<span class="number">3</span>,<span class="number">16</span>:<span class="number">4</span>,<span class="number">25</span>:<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Week-6"><a href="#Week-6" class="headerlink" title="Week 6"></a>Week 6</h2><h3 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h3><h4 id="The-Tree-Abstraction"><a href="#The-Tree-Abstraction" class="headerlink" title="The Tree Abstraction"></a>The Tree Abstraction</h4><p>A <strong>tree</strong> has a root <strong>label</strong> and a list of <strong>branches</strong>.</p><p>Each branch is a tree.</p><ul><li><strong>root</strong>: the node at the top of the tree</li><li><strong>label</strong>: the value in a node</li><li><strong>branches</strong>: a list of trees directly under the tree’s root</li><li><strong>leaf</strong>: a tree with zero branches</li><li><strong>node</strong>: any location within the tree (e.g., root node, leaf nodes, etc.)</li><li><strong>Depth</strong>: the distance of a node and the root</li><li><strong>Height</strong>: The depth of the lowest (furthest from the root) leaf.</li></ul><p><img src="/cs61a/assert1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label,branches=[]</span>):</span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branches)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">branches</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_tree</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree)!=<span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree)&lt;<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;tree(<span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;is_leaf(tree(<span class="number">1</span>))</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&gt;&gt;&gt;t=tree(<span class="number">1</span>,[tree(<span class="number">5</span>,[tree(<span class="number">7</span>)]),tree(<span class="number">6</span>)])</span><br><span class="line">&gt;&gt;&gt;t</span><br><span class="line">[<span class="number">1</span>,[<span class="number">5</span>,[<span class="number">7</span>]],[<span class="number">6</span>]]</span><br><span class="line">&gt;&gt;&gt;label(t)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;branches(t)</span><br><span class="line">[[<span class="number">5</span>,[<span class="number">7</span>]],[<span class="number">6</span>]]</span><br></pre></td></tr></table></figure><h4 id="Tree-Progressing"><a href="#Tree-Progressing" class="headerlink" title="Tree Progressing"></a>Tree Progressing</h4><p>Creating Trees：A function that creats a tree from another tree is typically alse recursive.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">increment_leaves</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bs=[increment_leaves(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)]</span><br><span class="line">        <span class="keyword">return</span> tree(label(t),bs)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">increment</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> tree(label(t)+<span class="number">1</span>,[increment(b) <span class="keyword">for</span> b <span class="keyword">in</span> branches(t)])</span><br></pre></td></tr></table></figure><h4 id="Example-Printing-Trees"><a href="#Example-Printing-Trees" class="headerlink" title="Example-Printing Trees"></a>Example-Printing Trees</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="built_in">print</span>(label(t))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b)</span><br></pre></td></tr></table></figure><p>优化后能显示树的结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_tree</span>(<span class="params">t,indent=<span class="number">0</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*indent+<span class="built_in">str</span>(label(t)))</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        print_tree(b,indent+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="Example-Summing-Paths"><a href="#Example-Summing-Paths" class="headerlink" title="Example-Summing Paths"></a>Example-Summing Paths</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_sums</span>(<span class="params">t,so_far</span>):</span><br><span class="line">    so_far=so_far+label(t)</span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="built_in">print</span>(so_far)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            print_sums(b,so_far)</span><br></pre></td></tr></table></figure><h4 id="Example-Counting-Paths"><a href="#Example-Counting-Paths" class="headerlink" title="Example-Counting Paths"></a>Example-Counting Paths</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_paths</span>(<span class="params">t,total</span>):</span><br><span class="line">    <span class="keyword">if</span> label(t)==total:</span><br><span class="line">        found=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        found=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> found+<span class="built_in">sum</span>([count_paths(b,total-label(t)) <span class="keyword">for</span> b <span class="keyword">in</span> branches])</span><br></pre></td></tr></table></figure><h3 id="Mutability"><a href="#Mutability" class="headerlink" title="Mutability"></a>Mutability</h3><h4 id="Mutation-Operations"><a href="#Mutation-Operations" class="headerlink" title="Mutation Operations"></a>Mutation Operations</h4><p>对list的操作：</p><p>移出元素：.pop()和.remove(…)。前者弹出最后一个元素，后者可移出任意一个元素</p><p>增加元素：.append(…)和.extend(…)</p><p>替换元素：采取切片赋值的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;suits=[<span class="string">&#x27;coin&#x27;</span>,<span class="string">&#x27;string&#x27;</span>,<span class="string">&#x27;myriad&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;original_suits=suits</span><br><span class="line">&gt;&gt;&gt;suits.pop()</span><br><span class="line"><span class="string">&#x27;myriad&#x27;</span></span><br><span class="line">&gt;&gt;&gt;suits.remove(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;suits.append(<span class="string">&#x27;cup&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;suits.extend([<span class="string">&#x27;sword&#x27;</span>,<span class="string">&#x27;club&#x27;</span>])</span><br><span class="line">&gt;&gt;&gt;suits</span><br><span class="line">[<span class="string">&#x27;coin&#x27;</span>,<span class="string">&#x27;cup&#x27;</span>,<span class="string">&#x27;sword&#x27;</span>,<span class="string">&#x27;club&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;suits[<span class="number">2</span>]=<span class="string">&#x27;spade&#x27;</span></span><br><span class="line">&gt;&gt;&gt;suits[<span class="number">0</span>:<span class="number">2</span>]=[<span class="string">&#x27;heart&#x27;</span>,<span class="string">&#x27;diamond&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;suits</span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>,<span class="string">&#x27;diamond&#x27;</span>,<span class="string">&#x27;spade&#x27;</span>,<span class="string">&#x27;club&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;original_suits</span><br><span class="line">[<span class="string">&#x27;heart&#x27;</span>,<span class="string">&#x27;diamond&#x27;</span>,<span class="string">&#x27;spade&#x27;</span>,<span class="string">&#x27;club&#x27;</span>]   <span class="comment">#interesting!</span></span><br></pre></td></tr></table></figure><p><strong>Some Objects Can CHange</strong></p><p>The same object can change in value throughout the course of computation.</p><p>All names that refer to the same object are affected by a mutation.</p><p><strong>Only objects of mutable types can change: lists &amp; dictionaries.</strong></p><h4 id="Tuples（元组）"><a href="#Tuples（元组）" class="headerlink" title="Tuples（元组）"></a>Tuples（元组）</h4><p><strong>immutable sequences</strong>, meanings of these cannot be changed.</p><p>使用()，其余与list基本类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">&gt;&gt;&gt;(<span class="number">1</span>,<span class="number">2</span>)+(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">&gt;&gt;&gt;()</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">tuple</span>()</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">tuple</span>([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span>,</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span></span><br><span class="line">(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>A dictionary cannot use a list as its index but can use a tuple. However, a tuple used as a index cannot include a list. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&#123;(<span class="number">1</span>,<span class="number">2</span>):<span class="number">3</span>&#125;</span><br><span class="line">&#123;(<span class="number">1</span>,<span class="number">2</span>):<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;&#123;[<span class="number">1</span>,<span class="number">2</span>]:<span class="number">3</span>&#125;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line">&gt;&gt;&gt;&#123;(<span class="number">1</span>,[<span class="number">2</span>]):<span class="number">3</span>&#125;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br></pre></td></tr></table></figure><p>An immutable sequence may still change if it contains a mutable value as an element. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s=([<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;s[<span class="number">0</span>]=<span class="number">4</span></span><br><span class="line">ERROR</span><br><span class="line">&gt;&gt;&gt;s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;s</span><br><span class="line">([<span class="number">4</span>,<span class="number">2</span>],<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><h5 id="Sameness-and-Change"><a href="#Sameness-and-Change" class="headerlink" title="Sameness and Change"></a>Sameness and Change</h5><ul><li>A compound data object has an “identity” in addition to the pieces of which it is composed</li><li>A list is still “the same” list even if we change its contents</li><li>Conversely, we could have two lists that happen to have the same contents, but are different</li></ul><h5 id="Identity-Operators"><a href="#Identity-Operators" class="headerlink" title="Identity Operators"></a>Identity Operators</h5><ul><li>Identity：<exp0> is <exp1>用<ul><li>evaluates to True if both <exp0> and <exp1> evaluate to the same object</exp1></exp0></li></ul></exp1></exp0></li><li>Equality：<exp0>&#x3D;&#x3D;<exp1><ul><li>evaluates to True if both <exp0> and <exp1> evaluate to equal values</exp1></exp0></li></ul></exp1></exp0></li></ul><p>Identical objects are always equal values.</p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><h4 id="Data-Abstraction-for-Syntax"><a href="#Data-Abstraction-for-Syntax" class="headerlink" title="Data Abstraction for Syntax"></a>Data Abstraction for Syntax</h4><p>用树的观念来分析英语语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phrase</span>(<span class="params">tag, branches</span>):</span><br><span class="line">    <span class="keyword">return</span> tree(tag, branches)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">word</span>(<span class="params">tag, text</span>):</span><br><span class="line">    <span class="keyword">return</span> tree([tag, text])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the tag of a phrase or word.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="keyword">return</span> label(word)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h4><p>Some files are plain text and can be read into Python as either.</p><ul><li>open(…) . read()：One string containing the whole contents of the file</li><li>open(…) . readlines()：A list of strings, each containing one line</li></ul><p>Useful string methods for processing the contents of a file.</p><ul><li><p>.strip()：returns a string without whitespace (spaces, tabs, etc.) on the ends</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;hello &#x27;</span>.strip()</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>.split()：returns a list of strings that were separated by whitespace</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;hi there&#x27;</span>.split()</span><br><span class="line">[<span class="string">&#x27;hi&#x27;</span>,<span class="string">&#x27;there&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>.replace(a,b)：returns a string with all instances of string <strong>a</strong> replaces by string <strong>b</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">&#x27;2+2&#x27;</span>.replace(<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27; + &#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2 + 2&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>From lines to tokens：</p><p>use open(…).readlines()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;(ROOT (S (NP (NN this)) (VP (COP is) (NP (DT a) (NN book))) (. ?)))\n&#x27;</span></span><br><span class="line"><span class="string">&#x27;\n&#x27;</span>,..</span><br></pre></td></tr></table></figure><p>to</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;ROOT&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NP&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NN&#x27;</span>, <span class="string">&#x27;this&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;VP&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;COP&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NP&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;DT&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;NN&#x27;</span>, <span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;)&#x27;</span>],</span><br><span class="line">...]</span><br></pre></td></tr></table></figure><p>read_sentences takes care of this：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lines = <span class="built_in">open</span>(<span class="string">&#x27;suppes.parsed&#x27;</span>).readlines()</span><br><span class="line">tokens = read_sentences(lines)</span><br></pre></td></tr></table></figure><h4 id="Generating-Language"><a href="#Generating-Language" class="headerlink" title="Generating Language"></a>Generating Language</h4><p>language models：A statistical（or probabilistic） language model describes how likely some text would be.</p><p><strong>Sampling</strong> from a statistical language model uses what description to generate language.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">详见https://code.cs61a.org/</span><br><span class="line"><span class="comment">#Syntax</span></span><br><span class="line">treebank_examples = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(ROOT (SBARQ (WHNP (WP what))</span></span><br><span class="line"><span class="string">     (SQ (VP (AUX is)) (NP (DT the) (NN rabbit)) (VP (VBG doing)))</span></span><br><span class="line"><span class="string">     (. ?)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(ROOT (SQ (AUX is) (NP (PRP he)) (VP (VBG hopping)) (. ?)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">phrase</span>(<span class="params">tag,branches</span>):</span><br><span class="line">    <span class="keyword">return</span> tree(tag,branches)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">word</span>(<span class="params">tag,text</span>):</span><br><span class="line">    <span class="keyword">return</span> tree([tag,text])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tag</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the tag of a phrase or word.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t)[<span class="number">0</span>]    <span class="comment">#树叶包含tag和text</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> label(t)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="keyword">return</span> label(word)[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_sentences</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">     <span class="string">&quot;&quot;&quot;Yield parsed sentences as lists of tokens for a list of lines.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; for s in read_sentences(treebank_examples):</span></span><br><span class="line"><span class="string">    ...     print(&#x27; &#x27;.join(s[:20]), &#x27;...&#x27;)</span></span><br><span class="line"><span class="string">    ( ROOT ( SBARQ ( WHNP ( WP what ) ) ( SQ ( VP ( AUX is ) ) ...</span></span><br><span class="line"><span class="string">    ( ROOT ( SQ ( AUX is ) ( NP ( PRP he ) ) ( VP ( VBG hopping ...</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    sentences=[]</span><br><span class="line">    tokens=[]</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">input</span>:</span><br><span class="line">        <span class="keyword">if</span> line.strip():</span><br><span class="line">            tokens.extend(line.replace(<span class="string">&#x27;(&#x27;</span>,<span class="string">&#x27; ( &#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>,<span class="string">&#x27; ) &#x27;</span>)).split()</span><br><span class="line">            <span class="keyword">if</span> tokens.count(<span class="string">&#x27;(&#x27;</span>)==tokens.count(<span class="string">&#x27;)&#x27;</span>):</span><br><span class="line">                sentences.append(tokens)</span><br><span class="line">                tokens=[]</span><br><span class="line">    <span class="keyword">return</span> sentences</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_sentences</span>():</span><br><span class="line">    <span class="keyword">return</span> read_sentences(<span class="built_in">open</span>(<span class="string">&#x27;suppes.parsed&#x27;</span>).readlines())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tokens_to_parse_tree</span>(<span class="params">tokens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree for a list of tokens representing a parsed sentence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(tokens_to_parse_tree(read_sentences(treebank_examples)[0]))</span></span><br><span class="line"><span class="string">    ROOT</span></span><br><span class="line"><span class="string">      SBARQ</span></span><br><span class="line"><span class="string">        WHNP</span></span><br><span class="line"><span class="string">          [&#x27;WP&#x27;, &#x27;what&#x27;]</span></span><br><span class="line"><span class="string">        SQ</span></span><br><span class="line"><span class="string">          VP</span></span><br><span class="line"><span class="string">            [&#x27;AUX&#x27;, &#x27;is&#x27;]</span></span><br><span class="line"><span class="string">          NP</span></span><br><span class="line"><span class="string">            [&#x27;DT&#x27;, &#x27;the&#x27;]</span></span><br><span class="line"><span class="string">            [&#x27;NN&#x27;, &#x27;rabbit&#x27;]</span></span><br><span class="line"><span class="string">          VP</span></span><br><span class="line"><span class="string">            [&#x27;VBG&#x27;, &#x27;doing&#x27;]</span></span><br><span class="line"><span class="string">        [&#x27;.&#x27;, &#x27;?&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> tokens[<span class="number">0</span>] == <span class="string">&#x27;(&#x27;</span>, tokens</span><br><span class="line">    t, end = read_parse_tree(tokens, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_tree</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">return</span> t <span class="keyword">and</span> tag(t)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_parse_tree</span>(<span class="params">tokens, i</span>):   <span class="comment">#这个好难懂</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree for the next constitutent of a token iterator and the end index.&quot;&quot;&quot;</span></span><br><span class="line">    tag = tokens[i]</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> tokens[i] != <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">        <span class="keyword">assert</span> tokens[i+<span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> word(tag, tokens[i]), i + <span class="number">2</span></span><br><span class="line">    branches = []</span><br><span class="line">    <span class="keyword">while</span> tokens[i] != <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">        <span class="keyword">assert</span> tokens[i] == <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        branch, i = read_parse_tree(tokens, i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> is_valid_tree(branch):</span><br><span class="line">            branches.append(branch)</span><br><span class="line">    <span class="keyword">if</span> branches:</span><br><span class="line">        <span class="keyword">return</span> phrase(tag, branches), i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, i + <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Week-7"><a href="#Week-7" class="headerlink" title="Week 7"></a>Week 7</h2><h3 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h3><h4 id="Iterators-1"><a href="#Iterators-1" class="headerlink" title="Iterators"></a>Iterators</h4><p>A container can provide an iterator that provides access to its elements in some order.</p><ul><li>iter(iterable)：Return an iterator over the elements of an iterable value</li><li>next(iterator)：Return the next element in an iterator</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;s=[[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;t=<span class="built_in">iter</span>(s)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(t)</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><blockquote><p>There are also some built-in functions that take in iterables and return useful results:</p><ul><li><code>map(f, iterable)</code> - Creates an iterator over <code>f(x)</code> for <code>x</code> in <code>iterable</code>. In some cases, computing a list of the values in this iterable will give us the same result as [<code>func(x)</code> for <code>x</code> in <code>iterable</code>]. However, it’s important to keep in mind that iterators can potentially have infinite values because they are evaluated lazily, while lists cannot have infinite elements.</li><li><code>filter(f, iterable)</code> - Creates an iterator over <code>x</code> for each <code>x</code> in <code>iterable</code> if <code>f(x)</code></li><li><code>zip(iterables*)</code> - Creates an iterator over co-indexed tuples with elements from each of the <code>iterables</code></li><li><code>reversed(iterable)</code> - Creates an iterator over all the elements in the input iterable in reverse order</li><li><code>list(iterable)</code> - Creates a list containing all the elements in the input <code>iterable</code></li><li><code>tuple(iterable)</code> - Creates a tuple containing all the elements in the input <code>iterable</code></li><li><code>sorted(iterable)</code> - Creates a sorted list containing all the elements in the input <code>iterable</code></li><li><code>reduce(f, iterable)</code> - Must be imported with <code>functools</code>. Apply function of two arguments <code>f</code> cumulatively to the items of <code>iterable</code>, from left to right, so as to reduce the sequence to a single value.</li></ul></blockquote><h4 id="Dictionary-Iteration"><a href="#Dictionary-Iteration" class="headerlink" title="Dictionary Iteration"></a>Dictionary Iteration</h4><p>An iterable value is any value that can be passed to <strong>iter</strong> to produce an iterator.</p><p>An iterator is returned from iter and can be passed to <strong>next</strong>; all iterators are mutable.</p><p>A dictionary, its keys, its values, and its items are all iterable values.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=&#123;<span class="string">&#x27;one&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">&gt;&gt;&gt;d[<span class="string">&#x27;zero&#x27;</span>]=<span class="number">0</span>    <span class="comment">#往d中新增加了元素</span></span><br><span class="line">&gt;&gt;&gt;k=<span class="built_in">iter</span>(d.keys())   <span class="comment">#or k=iter(d)</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;two&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;three&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;zero&#x27;</span></span><br><span class="line">&gt;&gt;&gt;v=<span class="built_in">iter</span>(d.values())</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(v)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;i=<span class="built_in">iter</span>(d.items())</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;one&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;two&#x27;</span>,<span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;three&#x27;</span>,<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(i)</span><br><span class="line">(<span class="string">&#x27;zero&#x27;</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><strong>ATTENTION</strong>：dictionary cannot change size during iteration. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d=&#123;<span class="string">&#x27;one&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;two&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">&gt;&gt;&gt;k=<span class="built_in">iter</span>(d)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(k)</span><br><span class="line"><span class="string">&#x27;one&#x27;</span></span><br><span class="line">&gt;&gt;&gt;d[<span class="string">&#x27;zero&#x27;</span>]=<span class="number">0</span></span><br><span class="line">RuntimeError:dictionary changed size during iteration</span><br></pre></td></tr></table></figure><h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><ul><li><p>The built-in <strong>zip</strong> function returns an iterator over co-indexed tuples.</p></li><li><p>If one iterable is longer than the other, <strong>zip</strong> only iterates over matches and skips extras</p></li><li><p>More than two iterables can be passed to <strong>zip</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line">[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br><span class="line">[(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">2</span>,<span class="number">4</span>)]</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>]))</span><br><span class="line">[(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>),(<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>)]</span><br></pre></td></tr></table></figure><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><h4 id="Generator-Function"><a href="#Generator-Function" class="headerlink" title="Generator Function"></a>Generator Function</h4><ul><li>A generator function is a function that <strong>yield</strong>s values instead of <strong>return</strong>ing them.</li><li>A normal function <strong>return</strong>s once; a <strong>generator function</strong> can <strong>yield</strong> multiple times</li><li>A <strong>generator</strong> is an iterator created automatically by calling a <strong>generator function</strong></li><li>When a <strong>generator function</strong> is called, it returns a <strong>generator</strong> that iterates over its yields</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">def</span> <span class="title function_">plus_minus</span>(<span class="params">x</span>):</span><br><span class="line">    tield x</span><br><span class="line">    <span class="keyword">yield</span> -x</span><br><span class="line">&gt;&gt;&gt;t=plus_minus(<span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">next</span>(t)</span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> coutdown(k-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">yield</span> x</span><br><span class="line"><span class="comment">#等价于</span></span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">from</span> coutdown(k-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>A <strong>yield from</strong> statement can be used to yield the values from an iterable one at a time.</p><h4 id="A-Return-Statement-Within-a-Generator-Function"><a href="#A-Return-Statement-Within-a-Generator-Function" class="headerlink" title="A Return Statement Within a Generator Function"></a>A Return Statement Within a Generator Function</h4><p>Upon executing a return statement, a generator function exits and cannot yield more values.</p><p>What’s more, providing a value to be returned is allowed, but this value is not yielded.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">yield</span> x</span><br><span class="line">    <span class="keyword">yield</span> x+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">yield</span> x+<span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(f(<span class="number">2</span>))</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">yield</span> x</span><br><span class="line">    <span class="keyword">yield</span> x+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">2</span></span><br><span class="line"><span class="keyword">yield</span> x+<span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(g(<span class="number">2</span>))</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>It’s possible to access the returned value:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">x</span>):</span><br><span class="line">    y=<span class="keyword">yield</span> <span class="keyword">from</span> g(x)</span><br><span class="line">    <span class="keyword">yield</span> y</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">list</span>(h(<span class="number">2</span>))</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><p>开始面向对象了…</p><h4 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object-Oriented Programming"></a>Object-Oriented Programming</h4><p><img src="/cs61a/assert2.jpg"></p><ul><li><strong>class</strong>: a template for creating objects</li><li><strong>instance</strong>: a single object created from a class</li><li><strong>instance variable</strong>: a data attribute of an object, specific to an instance</li><li><strong>class variable</strong>: a data attribute of an object, shared by all instances of a class</li><li><strong>method</strong>: a bound function that may be called on all instances of a class</li></ul><h4 id="Class-Statements"><a href="#Class-Statements" class="headerlink" title="Class Statements"></a>Class Statements</h4><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>&lt;name&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>Every call to a class creates a new instance(对象). There’re many instances but only one class.</p><p>Binding an object to a new name using assignment does not create a new object. It just gives a new name to the object. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;c=a</span><br><span class="line">&gt;&gt;&gt;c <span class="keyword">is</span> a</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><p>Methods are defined in the suite of a class statement.  </p><p>The def statements create function objects as always, but their names are bound as attributes of the class.</p><p>All invoked methods have access to the object via the <strong>self</strong> parameter, and so they can all access and manipulate the object’s state. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deposit</span>(<span class="params">self,amount</span>):            <span class="comment">#Defined with two arguments</span></span><br><span class="line">        self.balance=self.balance+amount</span><br><span class="line">        <span class="keyword">return</span> self.balance</span><br><span class="line">&gt;&gt;&gt;tom_account=Account(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;tom_account.deposit(<span class="number">100</span>)              <span class="comment">#Invoked with one argument</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="Class-Methods"><a href="#Class-Methods" class="headerlink" title="Class Methods(*)"></a>Class Methods(*)</h4><p>Now we’ll try out another feature of Python classes: class methods. A method can be turned into a class method by adding the <a href="https://docs.python.org/3/library/functions.html#classmethod">classmethod</a> decorator. Then, instead of receiving the instance as the first argument (<code>self</code>), the method will receive the class itself (<code>cls</code>).</p><p>Class methods are commonly used to create “factory methods”: methods whose job is to construct and return a new instance of the class.</p><p>For example, we can add a <code>robo_factory</code> class method to our <code>Dog</code> class that makes robo-dogs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Dog(Pet):</span><br><span class="line">    # With the previously defined methods not written out</span><br><span class="line">    @classmethod</span><br><span class="line">    def robo_factory(cls, owner):</span><br><span class="line">        return cls(&quot;RoboDog&quot;, owner)</span><br></pre></td></tr></table></figure><p>Then a call to <code>Dog.robo_factory(&#39;Sally&#39;)</code> would return a new <code>Dog</code> instance with the name “RoboDog” and owner “Sally”.</p><h4 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h4><p>Attributes are all public.</p><p><img src="/cs61a/assert3.jpg"></p><p><strong>Accessing Attributes</strong>:</p><ul><li><strong>getattr(object,’…’)</strong>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">getattr</span>(tom_account,<span class="string">&#x27;balance&#x27;</span>)</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>getattr and dot expressions look up a name in the same way.</p><ul><li><strong>hasattr(object,’…’)</strong>: 用来判断对象是否包含对应的属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">hasattr</span>(tom_account,<span class="string">&#x27;deposit&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>Class attributes are “shared” across all instances of a class because they are attributes of the class, not the instance. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    interest=<span class="number">0.02</span>  <span class="comment">#A class attribute</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self,account_holder</span>):</span><br><span class="line">        self.balance=<span class="number">0</span></span><br><span class="line">        self.holder=account_holder</span><br><span class="line">    <span class="comment">#Additional methods would be difined here</span></span><br><span class="line">&gt;&gt;&gt;tom_account=Account(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;jim_account=Account(<span class="string">&#x27;Jim&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;tom_account.interest</span><br><span class="line"><span class="number">0.02</span></span><br><span class="line">&gt;&gt;&gt;jim_account.interest</span><br><span class="line"><span class="number">0.02</span></span><br></pre></td></tr></table></figure><ul><li>Instance Attribute Assignment: tom_account.interest&#x3D;0.08<ul><li>adds or modifies the attribute named “interest” of tom_account（仅改变这个对象中这个属性的值</li></ul></li><li>Class Attribute Assignment: Account.interest&#x3D;0.04<ul><li>改变整个class中这个属性的值</li></ul></li></ul><h2 id="Week-8"><a href="#Week-8" class="headerlink" title="Week 8"></a>Week 8</h2><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Inheritance is a method for relating classes together.</p><p>A common use：Two similar classes differ in their degree of specialization.</p><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> &lt;name&gt;(&lt;base <span class="keyword">class</span>&gt;):   <span class="comment">#单继承</span></span><br><span class="line">    &lt;suite&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> &lt;name&gt;(&lt;base <span class="keyword">class</span>&gt;,&lt;base <span class="keyword">class</span>&gt;...):   <span class="comment">#多继承</span></span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CheckingAccount</span>(<span class="title class_ inherited__">Account</span>):     <span class="comment">#CheckingAccount继承了Account</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;A bank zccount that charges for withdrawals.&quot;&quot;&quot;</span></span><br><span class="line">    withdraw_fee=<span class="number">1</span></span><br><span class="line">    interest=<span class="number">0.01</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">withdraw</span>(<span class="params">self,amount</span>):</span><br><span class="line">        <span class="keyword">return</span> Account.withdraw(self.amount+self.withdraw_fee)</span><br></pre></td></tr></table></figure><p>The new subclass shares attributes with its base class.</p><p>Using inheritance, we implement a subclass by specifying its differences from the base class.</p><h4 id="Looking-Up-Attribute-Names-on-Classes"><a href="#Looking-Up-Attribute-Names-on-Classes" class="headerlink" title="Looking Up Attribute Names on Classes"></a>Looking Up Attribute Names on Classes</h4><p>To look up a name in a class:</p><ul><li>if it names an attribute in the class, return the attribute value.</li><li>Otherwise, look up the name in the base class, if there is one.</li></ul><p>即如果自己定义了新属性按新属性来，没有新定义的话就找继承的class看有没有相应的属性</p><h3 id="Representation"><a href="#Representation" class="headerlink" title="Representation"></a>Representation</h3><h4 id="String-Representation"><a href="#String-Representation" class="headerlink" title="String Representation"></a>String Representation</h4><ul><li><strong>dir(object)：</strong>returns a list of all the attributes on an object</li><li><strong>_str_()：</strong>returns a human readable string representation of an object</li><li><strong>_repr_()：</strong>returns a string that would evaluate to an object with the same values</li></ul><h4 id="f-string"><a href="#f-string" class="headerlink" title="f string"></a>f string</h4><p>String interpolation involves evaluating a string literal that contains expressions.</p><ul><li><p>Using string concatenation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line">&gt;&gt;&gt;<span class="string">&#x27;pi starts with&#x27;</span>+<span class="built_in">str</span>(pi)+<span class="string">&#x27;...&#x27;</span></span><br><span class="line"><span class="string">&#x27;pi starts with 3.141592653589793...&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">&#x27;pi starts with&#x27;</span>+<span class="built_in">str</span>(pi)+<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">pi starts <span class="keyword">with</span> <span class="number">3.141592653589793</span>...</span><br></pre></td></tr></table></figure></li><li><p>Using string interpolation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="string">f&#x27;pi starts with (pi)...&#x27;</span></span><br><span class="line"><span class="string">&#x27;pi starts with 3.141592653589793...&#x27;</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(<span class="string">f&#x27;pi starts with (pi)...&#x27;</span>)</span><br><span class="line">pi starts <span class="keyword">with</span> <span class="number">3.141592653589793</span>...</span><br></pre></td></tr></table></figure></li></ul><p>**{}**中的值会被算出来</p><h4 id="Polymorphic-Functions（多态）"><a href="#Polymorphic-Functions（多态）" class="headerlink" title="Polymorphic Functions（多态）"></a>Polymorphic Functions（多态）</h4><p>Polymorphic function：A function that applies to many (poly) different forms (morph) of data</p><p>For example：<strong>str</strong> and <strong>repr</strong> are both polymorphic.</p><blockquote><p><strong>repr</strong> 和<strong>_<em>repr</em>_<strong>的区别：</strong>repr</strong> invokes a zero-argument method <strong>_<em>repr</em>_</strong> on its argument</p></blockquote><p>…to be continued</p><h4 id="Special-Method-Names"><a href="#Special-Method-Names" class="headerlink" title="Special Method Names"></a>Special Method Names</h4><table><thead><tr><th><strong>Name</strong></th><th><strong>Behavior</strong></th></tr></thead><tbody><tr><td>_<em>init</em>_</td><td>Method invoked automatically when an object is constructed</td></tr><tr><td>_<em>repr</em>_</td><td>Method invoked to display an object as a Python expression</td></tr><tr><td>_<em>str</em>_</td><td>Methof invoked to stringify an object</td></tr><tr><td>_<em>add</em>_</td><td>Method invoked to add one object to another</td></tr><tr><td>_<em>bool</em>_</td><td>Method invoked to convert an object to True or False</td></tr><tr><td>_<em>float</em>_</td><td>Method invoked to convert an object to a float(real number)</td></tr></tbody></table><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;one+two</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;one.__add__(two)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>……</p><p>就是一些有特殊功能的函数前后会各有两个下划线</p><h3 id="Recursive-Objects"><a href="#Recursive-Objects" class="headerlink" title="Recursive Objects"></a>Recursive Objects</h3><p><strong>Linked Lists(链表)</strong></p><h4 id="Linked-List-Class"><a href="#Linked-List-Class" class="headerlink" title="Linked List Class"></a>Linked List Class</h4><p>A linked list is either empty or a first value and the rest of the linked list.</p><p>每个link分为first和rest两部分</p><p><img src="/cs61a/assert4.jpg"></p><p>linked list class: attributes are passed to _<em>init</em>_</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,first,rest=empty</span>):</span><br><span class="line">        <span class="keyword">assert</span> rest <span class="keyword">is</span> Link.empty <span class="keyword">or</span> <span class="built_in">isinstance</span>(rest,Link)   <span class="comment">#Returns whether rest is a Link</span></span><br><span class="line">        self.first=first</span><br><span class="line">        self.rest=rest</span><br></pre></td></tr></table></figure><h4 id="Linked-Lists-Can-Change"><a href="#Linked-Lists-Can-Change" class="headerlink" title="Linked Lists Can Change"></a>Linked Lists Can Change</h4><p>Attribute assignment statements can change first and rest attributes of a Link.</p><p>The rest of a linked list can contain the linked list as a sub-list</p><h2 id="Week-9"><a href="#Week-9" class="headerlink" title="Week 9"></a>Week 9</h2><h3 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h3><h3 id="Decomposition"><a href="#Decomposition" class="headerlink" title="Decomposition"></a>Decomposition</h3><h3 id="Data-Examples"><a href="#Data-Examples" class="headerlink" title="Data Examples"></a>Data Examples</h3><h2 id="Week-11"><a href="#Week-11" class="headerlink" title="Week 11"></a>Week 11</h2><h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><h3 id="Calculator"><a href="#Calculator" class="headerlink" title="Calculator"></a>Calculator</h3><h2 id="week-12"><a href="#week-12" class="headerlink" title="week 12"></a>week 12</h2><h3 id="Interpreters"><a href="#Interpreters" class="headerlink" title="Interpreters"></a>Interpreters</h3><h3 id="Tail-Calls"><a href="#Tail-Calls" class="headerlink" title="Tail Calls"></a>Tail Calls</h3><h3 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h3><h2 id="Week-13"><a href="#Week-13" class="headerlink" title="Week 13"></a>Week 13</h2><h3 id="Backus-Naur-Form"><a href="#Backus-Naur-Form" class="headerlink" title="Backus-Naur Form"></a>Backus-Naur Form</h3><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><h2 id="Week14"><a href="#Week14" class="headerlink" title="Week14"></a>Week14</h2><h3 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h3><h2 id="Week-15"><a href="#Week-15" class="headerlink" title="Week 15"></a>Week 15</h2><h3 id="Web-Apps"><a href="#Web-Apps" class="headerlink" title="Web Apps"></a>Web Apps</h3><h3 id="Final-Examples"><a href="#Final-Examples" class="headerlink" title="Final Examples"></a>Final Examples</h3><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3>]]></content>
    
    
    <summary type="html">不愧是梦开始的地方...</summary>
    
    
    
    <category term="cs" scheme="http://liuydd.github.io/categories/cs/"/>
    
    
    <category term="cs, python" scheme="http://liuydd.github.io/tags/cs-python/"/>
    
  </entry>
  
  <entry>
    <title>行水问路·大一学年总结</title>
    <link href="http://liuydd.github.io/2022/06/30/a/"/>
    <id>http://liuydd.github.io/2022/06/30/a/</id>
    <published>2022-06-29T16:00:00.000Z</published>
    <updated>2022-07-12T09:29:06.278Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="42e21f7d296534b8610becebeb88cf17f65bb2dae44b42fbb85e7005e47f762b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">想阅读此文请输入密码哦！什么？你不知道密码是什么？那就没有必要知道了...</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">过去都是假的，回忆是一条没有归途的路，以往的一切春天都无法复原。唯有孤独永存...</summary>
    
    
    
    <category term="过往云烟" scheme="http://liuydd.github.io/categories/%E8%BF%87%E5%BE%80%E4%BA%91%E7%83%9F/"/>
    
    
    <category term="总结, 大一, 逃离" scheme="http://liuydd.github.io/tags/%E6%80%BB%E7%BB%93-%E5%A4%A7%E4%B8%80-%E9%80%83%E7%A6%BB/"/>
    
  </entry>
  
</feed>
