<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>等到天亮我们都寻找到最漂亮的愿望</title>
  
  <subtitle>Sheeta Liu&#39;s Paradise Regained </subtitle>
  <link href="http://liuydd.github.io/atom.xml" rel="self"/>
  
  <link href="http://liuydd.github.io/"/>
  <updated>2022-06-30T07:23:57.992Z</updated>
  <id>http://liuydd.github.io/</id>
  
  <author>
    <name>Sheeta Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cs61a：从入门到入土</title>
    <link href="http://liuydd.github.io/2022/06/30/cs61a/"/>
    <id>http://liuydd.github.io/2022/06/30/cs61a/</id>
    <published>2022-06-30T04:14:05.000Z</published>
    <updated>2022-06-30T07:23:57.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>一直想学，无奈，由于平时的作业很多，学业压力比较重，学了几节课就没有学了。</p><p>决定前面的就简单温习一下吧。不复习又不行，<del>基本全忘记了，只记得自己学过</del>。</p><p>炎热的夏天不想出门，适合在房间<del>开着空调吃着西瓜玩着手机</del>学习python。</p><p>希望这个暑假能肝完。</p><p>版本：CS 61A Fall 2021</p><h2 id="Week-1"><a href="#Week-1" class="headerlink" title="Week 1"></a>Week 1</h2><h3 id="使用ok的方法"><a href="#使用ok的方法" class="headerlink" title="使用ok的方法"></a>使用ok的方法</h3><p>这是这门课的亮点之一，利用简单的命令行的知识来检测你写出来的程序是否正确，并且每一个case都会告诉你是什么应该输出什么而你输出了什么，从而判断正确与否。</p><p>（在此点名华大的oj，什么都不给，只告诉你AC或WA等等，改都不知道怎么改）</p><p>之前没学过git，估计用git更简单。</p><blockquote><p>win+R，输入cmd</p><p>然后在命令行界面输入powshell</p><p>在powershell里用cd ~&#x2F;Desktop&#x2F;cs61a&#x2F;…来进入相应的位置</p><p>然后粘贴题目提供的含ok语句即可</p></blockquote><p><strong>vscode可以和power shell交互，故可省去第一步</strong></p><p><strong>可以直接用git bash here进入相应的位置，然后粘贴ok语句即可</strong></p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><h4 id="expressions"><a href="#expressions" class="headerlink" title="expressions"></a>expressions</h4><p>即表达式，具体讲解了表达式嵌套时应遵循一定的顺序</p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><ul><li><p><strong>from math import</strong> pi</p></li><li><p>可自行定义一个function的名称，例如：</p></li><li><pre><code class="python">def square(x)    return mul(x,x)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* ```python</span><br><span class="line">  def area()</span><br><span class="line">  return pi*radius*radius</span><br></pre></td></tr></table></figure></code></pre></li><li><p>可通过更改radius的值来改变area的值</p></li></ul><h4 id="environment-diagrams"><a href="#environment-diagrams" class="headerlink" title="environment diagrams"></a>environment diagrams</h4><p>to visualize the interpreter’s process</p><p>（个人认为就是把程序的进行过程列出来方便理解</p><h4 id="defining-functions"><a href="#defining-functions" class="headerlink" title="defining functions"></a>defining functions</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> &lt;name&gt;(&lt;formal parameters&gt;):</span><br><span class="line">    <span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;</span><br></pre></td></tr></table></figure><p>def这一行的后面一定不要忘了有冒号！</p><h4 id="HW-01-Control"><a href="#HW-01-Control" class="headerlink" title="HW 01:Control"></a>HW 01:Control</h4><p>可能刚开始，连ok用的都不太熟练，所以hw01做的比较水…</p><p>cs61a每一题都会给出大概的模板，(<del>是为了避免让你造轮子吗</del></p><h5 id="Q2-A-Plus-Abs-B"><a href="#Q2-A-Plus-Abs-B" class="headerlink" title="Q2:A Plus Abs B"></a>Q2:A Plus Abs B</h5><p>Fill in the blanks in the following function for adding <code>a</code> to the absolute value of <code>b</code>, without calling <code>abs</code>. You may <strong>not</strong> modify any of the provided code other than the two blanks.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = _____</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q a_plus_abs_b</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = a-b</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = a+b</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure><h5 id="Q3-Two-of-Three"><a href="#Q3-Two-of-Three" class="headerlink" title="Q3: Two of Three"></a>Q3: Two of Three</h5><p>Write a function that takes three <em>positive</em> numbers as arguments and returns the sum of the squares of the two smallest numbers.<strong>Use only a single line for the body of the function.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> _____</span><br></pre></td></tr></table></figure><blockquote><p><strong>Hint:</strong> Consider using the <code>max</code> or <code>min</code> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>)</span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure></blockquote><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q two_of_three</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x*x+y*y+z*z-<span class="built_in">max</span>(x,y,z)*<span class="built_in">max</span>(x,y,z)</span><br></pre></td></tr></table></figure><h5 id="Q4-Largest-Factor"><a href="#Q4-Largest-Factor" class="headerlink" title="Q4: Largest Factor"></a>Q4: Largest Factor</h5><p>Write a function that takes an integer <code>n</code> that is <strong>greater than 1</strong> andreturns the largest integer that is smaller than <code>n</code> and evenly divides <code>n</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Hint:</strong> To check if <code>b</code> evenly divides <code>a</code>, you can use the expression <code>a % b == 0</code>, which can be read as, “the remainder of dividing <code>a</code> by <code>b</code> is 0.”</p></blockquote><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q largest_factor</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    i=n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n%i!=<span class="number">0</span>:</span><br><span class="line">        i=i-<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h5 id="Q6-Hailstone"><a href="#Q6-Hailstone" class="headerlink" title="Q6: Hailstone"></a>Q6: Hailstone</h5><p>Douglas Hofstadter’s Pulitzer-prize-winning book, <em>Gödel, Escher, Bach</em>, poses the following mathematical puzzle.</p><ol><li>Pick a positive integer <code>n</code> as the start.</li><li>If <code>n</code> is even, divide it by 2.</li><li>If <code>n</code> is odd, multiply it by 3 and add 1.</li><li>Continue this process until <code>n</code> is 1.</li></ol><p>The number <code>n</code> will travel up and down but eventually end at 1 (at least for all numbers that have ever been tried – nobody has ever proved that the sequence will terminate). Analogously, a hailstone travels up and down in the atmosphere before eventually landing on earth.</p><p>This sequence of values of <code>n</code> is often called a Hailstone sequence. Write a function that takes a single argument with formal parameter name <code>n</code>, prints out the hailstone sequence starting at <code>n</code>, and returns the number of steps in the sequence:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the hailstone sequence starting at n and return its</span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Hailstone sequences can get quite long! Try 27. What’s the longest you can find?</p><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q hailstone</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hw01 Q6:Hailstone</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n!=<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(n))</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            n=n/<span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=n*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">        i=i+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#print(int(i))</span></span><br></pre></td></tr></table></figure><h2 id="Week-2"><a href="#Week-2" class="headerlink" title="Week 2"></a>Week 2</h2><h3 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h3><h4 id="Print-and-None"><a href="#Print-and-None" class="headerlink" title="Print and None"></a>Print and None</h4><p>我理解的是，print输出了一个数，但是返回None（即什么都不返回）</p><p>而return返回了这个数</p><h4 id="Multiple-Environments"><a href="#Multiple-Environments" class="headerlink" title="Multiple Environments"></a>Multiple Environments</h4><p>指的是def的函数嵌套，应该从里向外展开</p><h4 id="Some-features"><a href="#Some-features" class="headerlink" title="Some features"></a>Some features</h4><p>除法 “&#x2F;“</p><blockquote><p>2013&#x2F;10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv,floordiv</span><br><span class="line">&gt;&gt;&gt;truediv(<span class="number">2013</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">201.3</span></span><br></pre></td></tr></table></figure><p>2013&#x2F;&#x2F;10（舍去后面的数，非四舍五入）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> truediv,floordiv</span><br><span class="line">&gt;&gt;&gt;floordiv(<span class="number">2013</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">201</span></span><br></pre></td></tr></table></figure></blockquote><p>A%B&#x3D;mod(A,B)</p><p>定义函数的时候可以给形参赋值，调用时可以不把已被赋值的参数写出来</p><h4 id="Conditional-Statements"><a href="#Conditional-Statements" class="headerlink" title="Conditional Statements"></a>Conditional Statements</h4><p>类似于C++中的if语句，仅语法有所差别</p><p>关心的是Boolean语句的对或错，而不关注表达式本身</p><h4 id="Iteration（迭代）"><a href="#Iteration（迭代）" class="headerlink" title="Iteration（迭代）"></a>Iteration（迭代）</h4><p>讲的是while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition):</span><br><span class="line">    statements</span><br></pre></td></tr></table></figure><h3 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h3><h4 id="when-designing-functions"><a href="#when-designing-functions" class="headerlink" title="when designing functions"></a>when designing functions</h4><ul><li>give each function exactly one job</li><li>do not repeat yourself (DRY). implement a process just once,but execute it many times.</li><li>define functions generally</li></ul><h4 id="可以用assert来检查输入的数据是否符合标准"><a href="#可以用assert来检查输入的数据是否符合标准" class="headerlink" title="可以用assert来检查输入的数据是否符合标准"></a>可以用assert来检查输入的数据是否符合标准</h4><p>格式：assert  （A），（B）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> r&gt;<span class="number">0</span>,<span class="string">&#x27;A length must be positive.&#x27;</span></span><br></pre></td></tr></table></figure><p>即A语句为一个bool语句。如果判断为false，则程序报错并输出B语句</p><h4 id="不要忘了pow函数！pow-k-3-即为求k的三次方"><a href="#不要忘了pow函数！pow-k-3-即为求k的三次方" class="headerlink" title="不要忘了pow函数！pow(k,3)即为求k的三次方"></a>不要忘了pow函数！pow(k,3)即为求k的三次方</h4><h4 id="higher-order-functions"><a href="#higher-order-functions" class="headerlink" title="higher-order functions"></a>higher-order functions</h4><p>类似C++中函数之间的相互调用</p><ul><li>Express general methods of computation</li><li>Remove repetition from programs</li><li>Separate concerns among functions</li></ul><h4 id="lambda-expressions"><a href="#lambda-expressions" class="headerlink" title="lambda expressions"></a>lambda expressions</h4><p>与def类似，但是lambda expressions不能包含statements</p><p>lambda的是变量</p><p>使用格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square=<span class="keyword">lambda</span> x:x*x</span><br><span class="line">&gt;&gt;&gt;square(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>与def的区别：</p><p><img src="/.io//hexo\source\images\cs61a_assert1.png"></p><p>即def给了函数一个具体的名称，而lambda没有给，除非自己给它命名一个</p><h4 id="conditional-expressions"><a href="#conditional-expressions" class="headerlink" title="conditional expressions"></a>conditional expressions</h4><p>form：<consequent>if<predicate>else<alternative></alternative></predicate></consequent></p><p>evaluation rule:</p><ul><li>Evaluate the <predicate> expression.</predicate></li><li>If it’s a true value, the value of the whole expression is the value of the <consequent></consequent></li><li>Otherwise, the value of the whole expression is the value of the <alternative></alternative></li></ul><h3 id="Environments-for-Higher-Order-Functions"><a href="#Environments-for-Higher-Order-Functions" class="headerlink" title="Environments for Higher-Order Functions"></a>Environments for Higher-Order Functions</h3><h4 id="nested-functions（嵌套）"><a href="#nested-functions（嵌套）" class="headerlink" title="nested functions（嵌套）"></a>nested functions（嵌套）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">return</span> k+n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure><h4 id="How-to-draw-an-environment-dragram"><a href="#How-to-draw-an-environment-dragram" class="headerlink" title="How to draw an environment dragram"></a>How to draw an environment dragram</h4><p><img src="/.io//hexo\source\images\cs61a_assert2.png"></p><h4 id="function-currying"><a href="#function-currying" class="headerlink" title="function currying"></a>function currying</h4><p>即higher-order function</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">curry2</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">y</span>):</span><br><span class="line">            <span class="keyword">return</span> f(x,y)</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;curry2=<span class="keyword">lambda</span> f:<span class="keyword">lambda</span> x:<span class="keyword">lambda</span> y:f(x,y)</span><br><span class="line">&gt;&gt;&gt;m=curry2(add)</span><br><span class="line">&gt;&gt;&gt;m(<span class="number">2</span>)(<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>currying：Transforming a multi-argument function into a single-argument,higher-order function</p><h3 id="Lab-01-Variables-amp-Functions-Control"><a href="#Lab-01-Variables-amp-Functions-Control" class="headerlink" title="Lab 01: Variables &amp; Functions,Control"></a>Lab 01: Variables &amp; Functions,Control</h3><h4 id="Q4：-Falling-Factorial"><a href="#Q4：-Falling-Factorial" class="headerlink" title="Q4： Falling Factorial"></a>Q4： Falling Factorial</h4><p>Let’s write a function <code>falling</code>, which is a “falling” factorial that takes two arguments, <code>n</code> and <code>k</code>, and returns the product of <code>k</code> consecutive numbers, starting from <code>n</code> and working downwards. When <code>k</code> is 0, the function should return 1.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">falling</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q falling</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">falling</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;  if(k==0):</span></span><br><span class="line"><span class="string">        temp=1</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        temp=n</span></span><br><span class="line"><span class="string">        while(k!=1):</span></span><br><span class="line"><span class="string">            k-=1</span></span><br><span class="line"><span class="string">            temp*=(n-1)</span></span><br><span class="line"><span class="string">            n-=1</span></span><br><span class="line"><span class="string">    return temp    &#x27;&#x27;&#x27;</span></span><br><span class="line">    total,stop=<span class="number">1</span>,n-k</span><br><span class="line">    <span class="keyword">while</span> n&gt;stop:</span><br><span class="line">        total,n=total*n,n-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total                <span class="comment">#感觉python有很多都和C++不同，而我的思维还在C++上面</span></span><br></pre></td></tr></table></figure><h4 id="Q5-Sum-Digits"><a href="#Q5-Sum-Digits" class="headerlink" title="Q5: Sum Digits"></a>Q5: Sum Digits</h4><p>Write a function that takes in a nonnegative integer and sums its digits. (Using floor division and modulo might be helpful here!)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q sum_digits</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    total=y%<span class="number">10</span></span><br><span class="line">    <span class="keyword">while</span>(y!=<span class="number">0</span>):</span><br><span class="line">        y=y//<span class="number">10</span></span><br><span class="line">        total+=y%<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> total         <span class="comment">#这个过的挺轻松的</span></span><br></pre></td></tr></table></figure><h4 id="Q7-Double-Eights"><a href="#Q7-Double-Eights" class="headerlink" title="Q7: Double Eights"></a>Q7: Double Eights</h4><p>Write a function that takes in a number and determines if the digits contain two<br>adjacent 8s.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_eights</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure><p>Use Ok to test your code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q double_eights</span><br></pre></td></tr></table></figure><p><strong>my answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_eights</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true if n has two eights in a row.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(88)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(2882)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(880088)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(12345)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; double_eights(80808080)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span>):</span><br><span class="line">        t=n%<span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">8</span>):</span><br><span class="line">            n//=<span class="number">10</span></span><br><span class="line">            _t=n%<span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span>(_t==<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n//=<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>    <span class="comment">#最后这里不要忘了还有个return，针对while循环走完的情况</span></span><br></pre></td></tr></table></figure><h3 id="Disc-01-Control-Environment-Diagrams"><a href="#Disc-01-Control-Environment-Diagrams" class="headerlink" title="Disc 01: Control,Environment Diagrams"></a>Disc 01: Control,Environment Diagrams</h3><p>罗列几个与C++不同的注意点</p><ul><li>Boolean Operators中不要像C++一样使用&amp;&amp;和||，而是要使用and，or，not</li><li>不要使用i++，用i&#x3D;i+1或i+&#x3D;1</li><li>python打印是自动换行的</li></ul><h3 id="Hog"><a href="#Hog" class="headerlink" title="Hog"></a>Hog</h3><p>…to be continue</p><h3 id="HW-02-Higher-Order-Functions"><a href="#HW-02-Higher-Order-Functions" class="headerlink" title="HW 02: Higher-Order Functions"></a>HW 02: Higher-Order Functions</h3><p>…to be continue</p>]]></content>
    
    
    <summary type="html">不愧是梦开始的地方...</summary>
    
    
    
    <category term="cs" scheme="http://liuydd.github.io/categories/cs/"/>
    
    
    <category term="cs, python" scheme="http://liuydd.github.io/tags/cs-python/"/>
    
  </entry>
  
  <entry>
    <title>行水问路·大一学年总结</title>
    <link href="http://liuydd.github.io/2022/06/30/a/"/>
    <id>http://liuydd.github.io/2022/06/30/a/</id>
    <published>2022-06-29T16:00:00.000Z</published>
    <updated>2022-06-30T03:54:07.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h2><p>为什么想写总结呢？可能是因为习惯吧，习惯在每一个阶段的末尾写点什么东西，因为没有记录，就没有存在，总想留下点什么东西，可事实上总是什么都没能留下。</p><p>这一年，可以说我过得不太好吧，有种一事无成、荒废光阴的感觉。尤其是春季学期，仿佛一个伤口好不容易结成疤，却被不知情的人反复撕开观看。<strong>真的很疼呢。</strong></p><blockquote><p>成长的蜕变，看似蝴蝶出茧，把丑陋的茧留在原地，自己就能翩翩飞走。但实际上没有那么容易。你和你的过去是紧紧地连在一起的，血肉相连。如果你想要挣脱出去，你一定要撕裂自己的肉，让自己的血流出。当你从过去的自我中爬出来时，你必定已是遍体鳞伤、血肉模糊。这就是成长的残酷现实，这就是青春的丑陋本色。</p><p>对抗这个世界很容易，但对抗你的过去、对抗你自己，背叛你的过去、背叛你自己，就没有那么轻松了。</p><p>因此，美国作家约翰.厄普代克说；“成长就是背叛，没有其他的道路。没有离开，就没有到达。”</p></blockquote><p>长大以后才发现，快乐原来是一件很难的事。</p><p>想说的话很多，不知从什么时候开始，我似乎丧失了表达自己情感的文笔。大段大段的表达被舍弃，只留下碎片化的呐喊还在坚持，也不知道还能坚持多长时间。</p><p>那么，谨以此篇，来祭奠我的大一学年。</p><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>“你为什么要转系？”</p><p>“我觉得你留在这个系也很好啊…”</p><p>……</p><p>无归属感而产生的孤独应该从”转系“这个念头说起吧。为什么想转系呢？除去一些世俗的想法、一点点对别人的羡慕，可能最大的原因，还是出于喜欢吧。<del>毕竟谁不喜欢高薪呢。</del>但除此之外，计算机底层的逻辑和数学深深吸引着我，毕竟很久以前，我就为数学纯粹而简洁的美所打动，归附于数学的麾下。</p><p>无奈，华大的数学系太不友好，尽管我现在还有想要追求的东西，但在那种高压下，也未必不会像北大数院的那位同学或者华大紫12的那位同学一样remake。其实在华大，大家的精神多少都有点不正常吧：(</p><p>有时候也会有放弃的想法，觉得别人都在体会真正的大学生活，只有我在为一个不确定的结果而努力。但我觉得，人还是应该追求点什么，毕竟我只有一生这么长啊…</p><p>大一的主旋律，应该是转系吧。为转系而痴狂，为转系而疯魔，尽管最后转系还没有成功…</p><blockquote><p>徘徊着的 在路上的</p><p>你要走吗 Via Via</p><p>易碎的 骄傲着</p><p>那也曾是我的模样</p></blockquote><blockquote><p>十年前你说生如夏花般绚烂</p><p>十年后你说平凡是唯一的答案</p></blockquote><p><img src="/images/assert.jpg"></p><h2 id="一点点想法"><a href="#一点点想法" class="headerlink" title="一点点想法"></a>一点点想法</h2><p>也许，从我没有选机导和机图、一意孤行地修离散和高代选讲、退掉大物开始，我的路途就指向了离开而不是留下。</p><p>行水问路，痴人自有痴人路。</p><p>不太想在华大或者国内读研。如果我留下，认认真真地学习，成功推免，再待个至少五年，那一切多没意思啊。尽管现在疫情肆虐，但这从来不是阻挡勇者的障碍。有时候看别人的感悟，才发现原来不只是我一个人，还有很多人都觉得许多课程不合理，太fly bitch，学不到东西，大学就是自学…</p><p>我曾经也是这样认为的，除了部分课以外，我甚至觉得很多课完全没有存在的必要，只是为了凑培养方案上要求的学分的糟粕而已。直到我听了几节Berkerly大学的cs61a后，我的想法发生了巨变。我第一次发现原来程设也可以不那么push，可以一步一步地讲清楚，再配以适当的习题。而不是动不动就布置个大作业让你去破防。</p><p>也许是我不太强的缘故吧，但我总觉得真正的高等教育不应该是这样的，至少我理想中的大学与教育不应该是这个样子。</p><p>所以说，还是赶快出去看看世界吧。尽管大洋彼岸的塔国容不下太多被东亚大陆深深浸润过的灵魂，但却可以包容支离破碎的心。</p><p>我知道会很难，因为与现在的主流相比，这是一条完全不同的路，更何况是我这种举棋不定的人。但既然选择了，就不会后悔，也不能后悔。</p><p>成长就是背叛，没有其他的道路，没有离开，就没有到达。</p><p>什么也无法舍弃的人，什么都得不到吧…</p><h2 id="2021年秋季学期"><a href="#2021年秋季学期" class="headerlink" title="2021年秋季学期"></a>2021年秋季学期</h2><h3 id="A-智能无人系统-朱纪洪"><a href="#A-智能无人系统-朱纪洪" class="headerlink" title="A-智能无人系统     朱纪洪"></a>A-智能无人系统     朱纪洪</h3><p>这课只有一学分，还是早八。可能是刚上大学，早上还爬得起来，由于这门课的教室离宿舍很远（在法图），于是第一节课我起的很早，第一个到教室，第二节课故意起晚了点，结果还是第一个到教室…可能就因此被老师记住了吧。上课发言算分（自由发言对我这种有点社恐的人来说简直太不友好了），老师第一节课第一个就点我发言，最后一节课点的几个人发言里面也有我。</p><p>感觉就是混入了一堆大佬中间，顺便水了一个A-…因为平时讲课真的很容易睡觉啊喂，作业有点超纲，智班的人真的厉害。就当作开开眼界吧，不只是课程内容，还有同学。</p><h3 id="A-观测宇宙学：从太阳系走向宇宙深处-李成"><a href="#A-观测宇宙学：从太阳系走向宇宙深处-李成" class="headerlink" title="A-观测宇宙学：从太阳系走向宇宙深处     李成"></a>A-观测宇宙学：从太阳系走向宇宙深处     李成</h3><p>当初奔着可以去兴隆观测基地实习的机会去的，尽管有三学分…不过事实证明，老师和助教都特别nice，给分也超级好，<del>可能由于只是个通识课的原因</del></p><p>上课的时候几乎都在犯困…因为中午没有睡午觉，就在桌子上趴了一下。作业还有点难度，全英文的题目，课件和教材也是英文的，课后还需要一点时间来写作业。组队论文和pre什么的我都搞的特别水，到知乎上面找个话题，论文到百度上面抄抄，翻译一下别人的论文抄抄，pre可能由于是第一个做感觉还好，<del>相比之下后面的同学真的准备的很好</del>。</p><p>考试考作业原题，考前还有助教姐姐讲之前作业的习题，<del>考不高才怪呢</del>。</p><h3 id="P党的知识概论-石智丹"><a href="#P党的知识概论-石智丹" class="headerlink" title="P党的知识概论      石智丹"></a>P党的知识概论      石智丹</h3><p>党课就那样，与一众思政课一样。</p><p><del>尽管要签到，但可以代签</del>。<del>于是我翘了两节</del>。</p><h3 id="A-微积分A-1-杨利军"><a href="#A-微积分A-1-杨利军" class="headerlink" title="A-微积分A(1)     杨利军"></a>A-微积分A(1)     杨利军</h3><p>选杨老师是因为选的章纪民老师掉了…</p><p>刚开始上课时很不习惯，不知道是对大学的不习惯还是对上课方式的不习惯。</p><p><del>总是很困</del>。</p><p>开始还因为杨老师上课只是念ppt考虑过要不要旁听章老师的课。</p><p>期中只考了75分（杨老师的班均分是76分）。再和班上其他同学一比，落差感还是有的。</p><p>不过期中后换了一种学习方法，<del>就是上课的时候用纸笔把杨老师ppt上的结论抄一遍</del>。</p><p><del>这样不容易犯困</del>。</p><p>然后期末前狂刷往年题，可能是因为期中题目出难的原因，期末出的巨简单。</p><p>因此4.0</p><h3 id="A-线性代数-徐帆"><a href="#A-线性代数-徐帆" class="headerlink" title="A-线性代数    徐帆"></a>A-线性代数    徐帆</h3><p>徐帆老师是一位好老师，这是我在华大碰到的第一位我很喜欢的老师，他讲的课让我觉得，原来线性代数可以这么清晰。<del>当然，当时是与微积分相比的</del>。</p><p>期中考的一般，82分，属于努努力可以冲4.0的那种。</p><p>习题课碰到辉哥也很幸运。也许以后再没有一门课的习题课会让我像大一上对待习题课一样了吧（sigh</p><p>每次抢习题课题目的讲解时我总是挑最简单的那几个哈哈哈，混点分不容易啊。</p><p>还记得辉哥分享的文章：</p><blockquote><p>人生就是一个自由落体过程，无法阻止，无法可逆，珍惜当下。</p></blockquote><p>也许很久以后，我还会记得辉哥低着头、跟我们说的：</p><blockquote><p>当你遇到什么天大的打击时，不要以为你承受不了，你受得了的…</p></blockquote><p>还真是，这一年我遇到了不亚于八省联考的打击，尽管很难，但我不还是挺过来了吗？也许人生，就是这样…</p><p>这样的不可理喻…</p><h3 id="A-思想道德与法治-吴俊"><a href="#A-思想道德与法治-吴俊" class="headerlink" title="A-思想道德与法治     吴俊"></a>A-思想道德与法治     吴俊</h3><p>对这门课最大的印象就是任务特别特别多…</p><blockquote><p>前八周选两周参加小班讨论，每次讨论有三个部分，分别是自我介绍、辩论赛、对之前布置阅读的两本书的见解。剩下六周无小班讨论的看慕课做题目，最后期末慕课上有一个一百道选择题的期末考试。五六个人一组开展社会主义核心观的实践，要写3000+的实践报告，如果被抽中的话要做pre，做pre前有两次助教辅导（也就是不停地改ppt内容）。后八周是大班讲课，课上有两次小测，内容是针对这节课讲的某个内容写下看法。最后一节课是开卷的期末考试，四个题目选两个，一共要写1500字</p></blockquote><p>但现在感觉，其实吴俊老师课讲的挺好的。和谐助教姐姐也特别温柔，思修小组在一起干了很多活，每周四固定去明斋展示修改的ppt<del>挨批</del>。</p><h3 id="B-英语阅读写作-A-庞红梅"><a href="#B-英语阅读写作-A-庞红梅" class="headerlink" title="B+英语阅读写作(A)     庞红梅"></a>B+英语阅读写作(A)     庞红梅</h3><p>其实庞老师课讲的挺好的，可能个人的能力有限吧。</p><p>给我B+也没办法。</p><p>亲自写一篇英文论文的时候还是学到了很多东西，写完的成就感也很高。</p><p>就是pre我不喜欢…还是英文pre</p><h3 id="B-机械设计基础-1-田凌"><a href="#B-机械设计基础-1-田凌" class="headerlink" title="B+机械设计基础(1)    田凌"></a>B+机械设计基础(1)    田凌</h3><p>机图是我大一上学期学的最痛苦的一门课，没有之一。</p><p>它坚定了我转系的想法。</p><p>期中考完只剩下麻木。</p><p>成绩也果不其然只有60分，那一刻还拥有的情绪的迷茫。</p><p>当时还不太敢退课，咬牙把这门课上完了。</p><p>后半学期，李兆基大楼田老师的办公室是我去的最多的地方。期末前两周，我就开始了这门课的复习，打印课件重画上面的图，又买了一本习题册画田老师给我圈下来的题。</p><p>当时真的很怕机图挂。因为期中，因为别说相贯，截切、组合体什么的都很难。</p><p>考完期末只有如释重负的感觉，以及应该不会挂科的轻松。</p><h3 id="P新生导引课-张小平"><a href="#P新生导引课-张小平" class="headerlink" title="P新生导引课    张小平"></a>P新生导引课    张小平</h3><p>这门课是我大一上最庆幸选的一门课，由此决定选张小平老师的离散2。<del>后续证明虽然张老师是一位特别好的老师，课讲的也很好，但离散2真的好难呜呜呜</del>。</p><p><img src="/images/assertb.jpg"></p><p>翻到这条私密pyq还挺感慨的。</p><p>就算你这次仍然辜负我，我也还是爱你。</p><h3 id="B-体育-1"><a href="#B-体育-1" class="headerlink" title="B+体育(1)"></a>B+体育(1)</h3><p>大一的体育都是分配项目。</p><p>大一上是清华拳、啦啦操、垒球…</p><p>我学的是清华拳。</p><p>跳绳一直都是短板啊（sigh，不然应该可以拿A-的。</p><p>长跑1500真的是依靠信念跑下来的，靠着转系的信念。</p><p>如今这个信念已经崩塌了，我又何去何从呢。</p><p>不过这门课让我认识了几个朋友，还算不错。</p><p>但也更加认识到，在华大，想要认识大类之外的朋友是多么难。</p><h2 id="2022年春季学期"><a href="#2022年春季学期" class="headerlink" title="2022年春季学期"></a>2022年春季学期</h2><h3 id="微积分A-2-杨利军"><a href="#微积分A-2-杨利军" class="headerlink" title="微积分A(2)    杨利军"></a>微积分A(2)    杨利军</h3><p><del>本来这学期想冲一下崔建莲老师或者章纪民老师的</del>。但由于可恶的大物预置课，时间冲突没法选，就还是选的杨老师的课。</p><p>感觉期中前学的比期中后学的好，尽管期中也只有82分，不能和大佬比。感觉期末也考砸了（sigh</p><p>不过上了一年杨老师的课后还是很有感触的，尤其是后半学期开始上网课后。</p><p><img src="/images/c.jpg"></p><p><img src="/images/b.jpg"></p><p><img src="/images/a.jpg"></p><p><img src="/images/d.jpg"></p><p>总之，尽管杨老师的语言表达能力（指在讲课方面）没有那么的好，没有好到让整个课堂活力四射，但杨老师是一位好老师。</p><h3 id="大学化学A-刘凯"><a href="#大学化学A-刘凯" class="headerlink" title="大学化学A    刘凯"></a>大学化学A    刘凯</h3><p>感觉大化没能学到什么东西，大部分是吃高中的老底。</p><p>刘凯老师人很好，期中改的很松，希望期末和给分也很松。</p><p>我也不想学大化，但没办法，人总要为自己喜欢的东西付出点别的什么代价。如果喜欢的东西那么容易就得到的话，那也不会太过珍惜吧…</p><h3 id="中国近现代史纲要-王宪明"><a href="#中国近现代史纲要-王宪明" class="headerlink" title="中国近现代史纲要    王宪明"></a>中国近现代史纲要    王宪明</h3><p>这课让我上水了，可能是因为选的老师就很水的原因。</p><p>小组pre全靠一人carry，十分佩服他，还能有探索自己真正感兴趣事物的热忱，而我却只能在拼命保留这种热忱的路上竭尽全力。</p><p>之前看过一个观点，叫做“隐形辍学”。指尽可能选一些水课来水学分，而逃避可能的硬课这种行为。</p><p>我也会反思我现在的所作所为算不算是一种隐形辍学呢？或者说选一些水课来刷分这种行为是否应该？</p><p>为了保住可怜的绩点（实际上应该也保不住了，感觉大一下半学期没上半学期考的好），去做一些匪夷所思的、自己不喜欢甚至是厌恶的事情，比如退课，比如报名习题课、研讨课，比如逃掉水课，比如史纲选没什么任务量的老师…</p><p>但我也不是神啊，如果硬课一起来，估计真有remake的想法也不一定。</p><p>大学，到底怎样做才算是没有辜负它的价值呢？逃掉水课的做法不应该，但课程的质量也是很大的一个因素吧。</p><p>多可怜啊，人需要出卖自己的灵魂，做一些自己不喜欢的事情，来换取一些自己需要但也不太喜欢的事物。</p><p>可悲啊。</p><h3 id="写作与沟通-薛静"><a href="#写作与沟通-薛静" class="headerlink" title="写作与沟通   薛静"></a>写作与沟通   薛静</h3><p>这个主题还是很有趣的，薛老师在课上也经常会设置一些场景。比如让我们扮演肖战的公关团队，比如分角色扮演“青春有你倒奶事件”的各大团体等等。</p><p>如果说我不太喜欢的，应该是课前看论文、课上讲论文这个环节吧。感觉一下子回到了高中…分析这一段讲了什么，整篇文章作者的思路…</p><p>上课也经常觉得无聊而刷手机，还是无法像那些比较social的人一样有逻辑有条理的发言。</p><p>做pre还是会紧张，论文写的也就那样，不过感觉长文终稿写的还不错，可能是因为考完了有充足的时间吧。</p><p>不过还是比较推荐薛老师的写沟，让我认识到了一群厉害的人。</p><h3 id="诗词格律与创作-钟振振"><a href="#诗词格律与创作-钟振振" class="headerlink" title="诗词格律与创作    钟振振"></a>诗词格律与创作    钟振振</h3><p>这是真正的水课吧…老师上课就念讲稿。</p><p>我一学期10次课似乎就去了几次…</p><p>最后的大作业（一首绝句，一首律诗，一首词）也是随便写的…</p><h3 id="离散数学-2-张小平"><a href="#离散数学-2-张小平" class="headerlink" title="离散数学(2)    张小平"></a>离散数学(2)    张小平</h3><p>不后悔选张老师的离散，尽管真的很难，难到我几乎麻木。但我觉得这是真正能学到东西的课。</p><p>搬点微博我写的的感受：</p><blockquote><p>感觉迄今为止没有哪一门课像离散一样一次性上的时间长而且内容很满</p><p>连微积分都不能与之相比</p></blockquote><blockquote><p>其实我一直都觉得离散是有趣的，程序也是有趣的，数学也有趣</p><p>但有趣不等于简单，和这门课的难度没什么关系</p></blockquote><blockquote><p>“虽然我们这门课不计考勤，但是点名让我快乐”。（傲娇感哈哈哈）</p></blockquote><blockquote><p>“你们每一个人都具有独立开辟新的领域的能力”</p><p>“态度为贵，能力次之，分数为轻”</p><p>“如果以分数为最终目标，那么以后的人生会非常困惑”</p><p>“不要过于功利”</p><p>“诚信与自律”</p></blockquote><blockquote><p>能让我感觉学到知识的课真的不多，但张老师的离散数学2，一定算一个。</p></blockquote><p><img src="/images/e.png"></p><p><del>这是最后一次课我截的图</del>。张老师保佑我离散2总评一定还可以啊(祈祷)。</p><h3 id="计算机程序设计基础-马昱春"><a href="#计算机程序设计基础-马昱春" class="headerlink" title="计算机程序设计基础    马昱春"></a>计算机程序设计基础    马昱春</h3><p>马老师讲课是很有激情的，就算计程设这课太fly bitch了…</p><p>“两学分你想学会C++？”</p><p>直到现在，我的指针啊链表啊继承多态等等东西都学的不是很懂，感觉暑假还是要多练习一下。</p><p>可是又能通过什么来练习呢（sigh</p><h3 id="高等线性代数选讲-李鹏辉"><a href="#高等线性代数选讲-李鹏辉" class="headerlink" title="高等线性代数选讲    李鹏辉"></a>高等线性代数选讲    李鹏辉</h3><p>说实话，感觉还是徐帆老师讲的好一点…</p><p>不知道是我的原因还是老师的原因，可能大部分是因为我太菜了吧，又是早八，上课总是打瞌睡，老师讲的什么算子啥的太抽象</p><p>搞不懂</p><p>高等代数选讲不太适合我吧…</p><p>我还是比较喜欢具体的事物</p><p>只希望这科不挂，记了pf</p><p>只要不挂，一切都还有希望。</p><h3 id="W大学物理B-1-马万云"><a href="#W大学物理B-1-马万云" class="headerlink" title="W大学物理B(1)    马万云"></a>W大学物理B(1)    马万云</h3><p>期中只考了63分，占总评的40%，实在觉得学不会，退课了。</p><p>大学物理有什么用呢？</p><p>大学的大多数课又有什么用呢？</p><p>或许，再暴论一点，培养方案上的课又有什么用呢？</p><p>希望大物2可以学的好一点，尽管选的是老毕的大物英，还是很有挑战的。</p><p>就当作为以后出国做准备吧，提前适应英文授课hhh</p><h3 id="一年级女生体育-2-许淑华"><a href="#一年级女生体育-2-许淑华" class="headerlink" title="一年级女生体育(2)    许淑华"></a>一年级女生体育(2)    许淑华</h3><p>许老师教的挺好的，人也还不错。</p><p>认识了一位计算机系的同学，一起吃过几次饭，算是可以说上几句话吧。</p><p>逐渐认识到，在清华，想要认识大类以外的同学是多么的困难。</p><p>成绩过几天就会出了，保佑保佑</p><p>大学生啊，谁又不是为了这一点点可怜的、量化的分数到处奔走，为了绩点而出卖灵魂呢？</p><h2 id="迷雾"><a href="#迷雾" class="headerlink" title="迷雾"></a>迷雾</h2><p>看了别人博客写的总结，总感觉自己大一一事无成，也不知道是不是因为大一本来会的就不多，又没有人带着，一年都在为转系忙忙碌碌，最后还没有一个好结果。</p><blockquote><p>“你已经在清华了，为什么不好好利用清华优厚的环境来做点不一样的事情呢？为什么一定要转系呢？”</p></blockquote><p>可能是在转系失败后我才对这句话有了更深的体会。</p><p>可是人啊，是不会轻易放下心中的那份执念的。</p><p>执念太深，也未必是坏事。</p><p>如果没有了这份执念，那可能到时候会和行尸走肉一样恐怖吧。</p><p>感觉大二一年还是要多探索，并且争取能做出什么成果来。</p><p>只是本来选的学分已经够多了，不知道到时候顶不顶得住。</p><p>没事，希望是无所谓有无所谓无的。</p><h3 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h3><p>大一一年似乎重点花在学业上了，和高中一样。</p><p>尽管最后结果可能也不怎么样。</p><p>没有其他人那么厉害，科研经历为零。</p><p>如果要申美研的话还是应该进实验室干活，或者搞个srt也行。</p><p>都怪自己太菜了，什么都不会。</p><h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p>决定下学年也不竞选班委了，没什么意义，反正我最终必定离开，也没必要留下什么东西。</p><p>学习生活部的工作还是继续做，就当为爱发电吧，我想通过这样的方式让同学们尤其是二字班的学弟学妹们的学习生活更加容易。</p><p>感觉这样崇高<del>(应该可以算是崇高吧)</del>的理想和我曾经的那个梦想很像，说出来怕人笑话，落得一个假大空的标签罢了。</p><p>看了学长的博客，才发现社工居然也可以有目的性，希望我提高提高能力后，也能像他一样吧。</p><blockquote><p>（附）</p><p>答疑坊后台开发——硬的工程能力</p><p>答疑坊前台答疑——为TA做准备</p><p>课咨委——了解行业动向和学业前瞻</p><p>技能文档——看家本领</p></blockquote><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><p>还是应该多多结识新朋友。</p><p>有时候水群时有想认识的人但由于太怂，不敢加TAT</p><p>认识一个其他大类的同学好难，大课就不用说了，毕竟谁会闲着没事在大课的微信群上到处加人呢啊喂。小课的比例比较少，而且小课上的同学也不是那么容易就混熟的（sigh</p><p>有时候就喜欢把自己封闭起来，不想也不敢认识新的人，对世界带有敌意，但这是不应该的。</p><p>还是要尽快走出来，摆脱这种无形的枷锁。</p><h3 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h3><p>偶尔会去玩玩飞盘，中间一段时间玩的还是很多的。</p><p><del>想到时候去大洋彼岸和老美们一起打盘</del></p><p>所以打盘技术还需要提高。</p><p>飞盘可以说是调节情绪的良药吧，尽管它一花就是至少三小时。</p><p>在飞盘队结识的朋友也很珍贵。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>要多看看书，而不是无所事事地刷手机。</p><p>高三那么繁忙的时候我都有时间看那么多的书，怎么到了大学就拿“没时间”作为借口呢？</p><p>不应该不应该。</p><p>改变是逐渐的循序渐进的，而非一下子就可以成功。</p><p>说到底，还是“过程重要还是结果重要”这个老问题。</p><h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><blockquote><ul><li>十年前你说生如夏花般绚烂<br> 十年后你说平凡是唯一的答案</li><li>对抗这个世界很容易，但对抗你的过去、对抗你自己，背叛你的过去、背叛你自己，就没有那么轻松了。</li><li>成长就是背叛，没有其他的道路。没有离开，就没有到达。</li><li>什么也无法舍弃的人，什么都得不到吧…</li><li>这个浮躁的世界里，日新月异，走马观花，朝不保夕，坚固的事物都面临烟消云散。我们习惯沉默、闷骚、低调、酷、失语、旁观，不再试图表达自己。</li><li>求道之人，不问寒暑。</li><li>就算你这次仍然辜负我，我也还是爱你。</li></ul></blockquote><p>过去宛如过往云烟一样消散了，</p><p>还是应该把希望放在未来，</p><p>哪怕并不是我所希冀的未来。</p>]]></content>
    
    
    <summary type="html">过去都是假的，回忆是一条没有归途的路，以往的一切春天都无法复原。唯有孤独永存...</summary>
    
    
    
    <category term="过往云烟" scheme="http://liuydd.github.io/categories/%E8%BF%87%E5%BE%80%E4%BA%91%E7%83%9F/"/>
    
    
    <category term="总结, 大一, 逃离" scheme="http://liuydd.github.io/tags/%E6%80%BB%E7%BB%93-%E5%A4%A7%E4%B8%80-%E9%80%83%E7%A6%BB/"/>
    
  </entry>
  
</feed>
